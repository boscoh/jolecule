(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["jolecule"] = factory();
	else
		root["jolecule"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.remoteDataServer = exports.initFullPageJolecule = exports.initEmbedJolecule = undefined;
	
	var _animation = __webpack_require__(1);
	
	var _embedjolecule = __webpack_require__(2);
	
	var _fullpagejolecule = __webpack_require__(17);
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _jquery = __webpack_require__(3);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 *
	 * @param userArgs = {
	 *   divTag: '',
	 *   viewId: '',
	 *   viewHeight: 170,
	 *   isViewTextShown: false,
	 *   isEditable: true,
	 *   isLoop: false,
	 *   onload: onload,
	 *   isGrid: false
	 * }
	 * @returns {EmbedJolecule}
	 */
	
	function initEmbedJolecule(userArgs) {
	  var args = _lodash2.default.merge(_embedjolecule.defaultArgs, userArgs);
	  var widget = new _embedjolecule.EmbedJolecule(args);
	  (0, _animation.registerGlobalAnimationLoop)(widget);
	  return widget;
	}
	
	/**
	 * @param protein_display_tag
	 * @param sequenceDisplayTag
	 * @param views_display_tag
	 * @returns {FullPageJolecule}
	 */
	function initFullPageJolecule() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  var widget = new (Function.prototype.bind.apply(_fullpagejolecule.FullPageJolecule, [null].concat(args)))();
	  (0, _animation.registerGlobalAnimationLoop)(widget);
	  return widget;
	}
	
	function remoteDataServer(pdbId) {
	  return {
	    pdb_id: pdbId,
	    get_protein_data: function get_protein_data(processProteinData) {
	      var url = void 0;
	      if (pdbId.length === 4) {
	        url = 'https://files.rcsb.org/download/' + pdbId + '.pdb1';
	      } else {
	        url = '/pdb/' + pdbId + '.txt';
	      }
	      console.log('remoteDataServer.get_protein_data', url);
	      _jquery2.default.get(url, function (pdbText) {
	        processProteinData({ pdb_id: pdbId, pdb_text: pdbText });
	      });
	    },
	    get_views: function get_views(processViews) {
	      console.log('remoteDataServer.get_views', '/pdb/' + pdbId + '.views.json');
	      _jquery2.default.getJSON('/pdb/' + pdbId + '.views.json', processViews);
	    },
	    save_views: function save_views(views, success) {
	      console.log('remoteDataServer.save_views', '/save/views');
	      _jquery2.default.post('/save/views', JSON.stringify(views), success);
	    },
	    delete_protein_view: function delete_protein_view(viewId, success) {
	      console.log('remoteDataServer.delete_protein_view', '/delete/view');
	      _jquery2.default.post('/delete/view', JSON.stringify({ pdbId: pdbId, viewId: viewId }), success);
	    }
	  };
	}
	
	exports.initEmbedJolecule = initEmbedJolecule;
	exports.initFullPageJolecule = initFullPageJolecule;
	exports.remoteDataServer = remoteDataServer;

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * This is a separate file to allow multiple jolecule
	 * widgets to be animated in the same global event loop.
	 * the interface to a widget is:
	 *
	 * class Widget {
	 *   animate() {}
	 *   isChanged: boolean
	 *   draw() {}
	 * }
	 *
	 * Global storage
	 * - window.globalWidgets
	 * - window.lastTime
	 */
	
	var MS_PER_STEP = 25;
	
	function loop() {
	  requestAnimationFrame(loop);
	
	  if (window.globalWidgets == []) {
	    return;
	  }
	  var currTime = new Date().getTime();
	  var elapsedTime = currTime - window.lastTime;
	  var nStep = elapsedTime / MS_PER_STEP;
	  if (nStep < 1) {
	    nStep = 1;
	  }
	  nStep = Math.floor(nStep);
	
	  for (var i = 0; i < nStep; i++) {
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;
	
	    try {
	      for (var _iterator = window.globalWidgets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	        var widget = _step.value;
	
	        widget.animate();
	      }
	    } catch (err) {
	      _didIteratorError = true;
	      _iteratorError = err;
	    } finally {
	      try {
	        if (!_iteratorNormalCompletion && _iterator.return) {
	          _iterator.return();
	        }
	      } finally {
	        if (_didIteratorError) {
	          throw _iteratorError;
	        }
	      }
	    }
	  }
	
	  var _iteratorNormalCompletion2 = true;
	  var _didIteratorError2 = false;
	  var _iteratorError2 = undefined;
	
	  try {
	    for (var _iterator2 = window.globalWidgets[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	      var _widget = _step2.value;
	
	      if (_widget.isChanged()) {
	        _widget.draw();
	      }
	    }
	  } catch (err) {
	    _didIteratorError2 = true;
	    _iteratorError2 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion2 && _iterator2.return) {
	        _iterator2.return();
	      }
	    } finally {
	      if (_didIteratorError2) {
	        throw _iteratorError2;
	      }
	    }
	  }
	
	  window.lastTime = currTime;
	}
	
	/**
	 * run loop() as a singleton by using the global
	 * window space to lock one single copy of loop
	 */
	function registerGlobalAnimationLoop(widget) {
	  if (typeof window.globalWidgets == 'undefined') {
	    window.globalWidgets = [];
	    loop();
	    window.lastTime = new Date().getTime();
	  }
	  window.globalWidgets.push(widget);
	}
	
	exports.registerGlobalAnimationLoop = registerGlobalAnimationLoop;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ViewPiece = exports.defaultArgs = exports.EmbedJolecule = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _jquery = __webpack_require__(3);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _soup = __webpack_require__(6);
	
	var _display = __webpack_require__(14);
	
	var _util = __webpack_require__(9);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function runWithProcessQueue(isProcessingFlag, fn) {
	  function guardFn() {
	    if (isProcessingFlag.flag) {
	      setTimeout(guardFn, 50);
	    } else {
	      isProcessingFlag.flag = true;
	      fn(isProcessingFlag);
	    }
	  }
	  guardFn();
	}
	
	var ViewPiece = function () {
	  /**
	   * params{ goto, saveChage(txt), pick, view, deleteView, isEditable, swapUp
	   * 
	   }
	   */
	  function ViewPiece(params) {
	    _classCallCheck(this, ViewPiece);
	
	    this.params = params;
	    this.div = (0, _jquery2.default)('<div>').addClass('jolecule-view');
	
	    if ((0, _util.exists)(params.goto)) {
	      this.div.append((0, _util.linkButton)('', this.params.goto, 'jolecule-button', this.params.pick)).append('<div style="width: 10px">');
	    }
	    this.params = params;
	    this.makeEditDiv();
	
	    this.makeShowDiv();
	  }
	
	  _createClass(ViewPiece, [{
	    key: 'saveChange',
	    value: function saveChange() {
	      console.log('ViewPiece.saveChange');
	      var changedTet = this.editTextArea.val();
	      this.editDiv.hide();
	      this.showDiv.show();
	      this.showTextDiv.html(changedTet);
	      this.params.saveChange(changedTet);
	      window.keyboard_lock = false;
	    }
	  }, {
	    key: 'startEdit',
	    value: function startEdit() {
	      this.params.pick();
	      this.editTextArea.text(this.params.view.text);
	      this.editDiv.show();
	      this.showDiv.hide();
	      var textarea = this.editTextArea.find('textarea');
	      setTimeout(function () {
	        textarea.focus();
	      }, 100);
	      window.keyboard_lock = true;
	    }
	  }, {
	    key: 'discardChange',
	    value: function discardChange() {
	      this.editDiv.hide();
	      this.showDiv.show();
	      window.keyboard_lock = false;
	    }
	  }, {
	    key: 'makeEditDiv',
	    value: function makeEditDiv() {
	      var _this = this;
	
	      this.editTextArea = (0, _jquery2.default)('<textarea>').addClass('jolecule-view-text').css('width', '100%').css('height', '5em').click(_lodash2.default.noop);
	
	      this.editDiv = (0, _jquery2.default)('<div>').css('width', '100%').click(_lodash2.default.noop).append(this.editTextArea).append('<br><br>').append((0, _util.linkButton)('', 'save', 'jolecule-small-button', function (event) {
	        _this.saveChange();
	      })).append(' &nbsp; ').append((0, _util.linkButton)('', 'discard', 'jolecule-small-button', function (event) {
	        _this.discardChange();
	      })).hide();
	
	      this.div.append(this.editDiv);
	    }
	  }, {
	    key: 'makeShowDiv',
	    value: function makeShowDiv() {
	      var _this2 = this;
	
	      var view = this.params.view;
	
	      var editButton = (0, _util.linkButton)('', 'edit', 'jolecule-small-button', function () {
	        _this2.startEdit();
	      });
	
	      var embedButton = (0, _util.linkButton)('', 'embed', 'jolecule-small-button', function () {
	        _this2.params.embed_view();
	      });
	
	      this.showTextDiv = (0, _jquery2.default)('<div>').addClass('jolecule-view-text').html(this.params.view.text);
	
	      this.showDiv = (0, _jquery2.default)('<div>').css('width', '100%').append(this.showTextDiv);
	
	      if (view.id != 'view:000000') {
	        this.showDiv.append((0, _jquery2.default)('<div>').addClass('jolecule-author').html(view.creator));
	      }
	
	      var isEditable = this.params.isEditable && !view.lock && view.id != 'view:000000';
	
	      if (isEditable) {
	
	        // this.showDiv
	        //   .append(embedButton)
	        //   .append(' ');
	
	        this.showDiv.append(editButton);
	
	        if ((0, _util.exists)(this.params.swapUp) && this.params.swapUp) this.showDiv.append(' ').append((0, _util.linkButton)('', 'up', 'jolecule-small-button', function () {
	          _this2.params.swapUp();
	        }));
	
	        if ((0, _util.exists)(this.params.swapUp) && this.params.swapDown) this.showDiv.append(' ').append((0, _util.linkButton)('', 'down', 'jolecule-small-button', function () {
	          _this2.params.swapDown();
	        }));
	
	        if ((0, _util.exists)(this.params.delete_view)) {
	          this.showDiv.append((0, _jquery2.default)('<div>').css('float', 'right').append((0, _util.linkButton)('', 'delete', 'jolecule-small-button', function () {
	            console.log('ViewPiece.deleteButton');
	            _this2.params.delete_view();
	          })));
	        }
	      }
	
	      this.div.append(this.showDiv);
	    }
	  }]);
	
	  return ViewPiece;
	}();
	
	/**
	 *
	 * EmbedJolecule - the widget that shows proteins and
	 * annotations
	 *
	 */
	
	var defaultArgs = {
	  divTag: '',
	  viewId: '',
	  viewHeight: 170,
	  isViewTextShown: false,
	  isEditable: true,
	  isLoop: false,
	  isGrid: false,
	  backgroundColor: 0xCCCCCC
	};
	
	var EmbedJolecule = function () {
	  function EmbedJolecule(params) {
	    var _this3 = this;
	
	    _classCallCheck(this, EmbedJolecule);
	
	    this.params = params;
	    this.isLoop = this.params.isLoop;
	
	    this.divTag = this.params.divTag;
	    this.div = (0, _jquery2.default)(this.params.divTag);
	
	    // disable right mouse click
	    this.div[0].oncontextmenu = _lodash2.default.noop;
	
	    this.initViewId = this.params.viewId;
	    this.hAnnotationView = this.params.viewHeight;
	
	    this.soup = new _soup.Soup();
	    this.soupView = new _soup.SoupView(this.soup);
	    this.controller = new _soup.Controller(this.soupView);
	
	    this.residueSelector = null;
	
	    this.createProteinDiv();
	    this.display = new _display.Display(this.soupView, '#jolecule-soup-display', this.controller, params.isGrid, params.backgroundColor);
	
	    this.createStatusDiv();
	    this.createViewDiv();
	
	    this.isViewTextShown = this.params.isViewTextShown;
	    this.setTextState();
	
	    (0, _jquery2.default)(window).resize(function () {
	      return _this3.resize();
	    });
	
	    this.resize();
	
	    this.isProcessing = { flag: false };
	  }
	
	  _createClass(EmbedJolecule, [{
	    key: 'loadProteinData',
	    value: function loadProteinData(isProcessingFlag, dataServer, proteinData, callback) {
	      var _this4 = this;
	
	      if (proteinData.pdb_text.length == 0) {
	        this.display.setProcessingMesssage('Error: no soup data');
	        isProcessingFlag.flag = false;
	        return;
	      }
	
	      this.soup.load(proteinData);
	
	      this.populateResidueSelector();
	
	      if (this.soup.parsingError) {
	        this.display.setProcessingMesssage('Error parsing soup: ' + this.soup.parsingError);
	        isProcessingFlag.flag = false;
	        return;
	      }
	
	      this.display.nDataServer += 1;
	      if (this.display.nDataServer == 1) {
	        this.display.buildAfterInitialLoad();
	
	        // need to keep track of a single dataServer
	        // to save views, will take the first one
	        this.dataServer = dataServer;
	        this.dataServer.get_views(function (view_dicts) {
	          _this4.loadViewsFromDataServer(view_dicts);
	          isProcessingFlag.flag = false;
	          _this4.display.cleanupProcessingMessage();
	          if (callback) {
	            callback();
	          }
	        });
	      } else {
	        this.display.buildAfterAdditionalLoad();
	        this.display.cleanupProcessingMessage();
	        isProcessingFlag.flag = false;
	        if (callback) {
	          callback();
	        }
	      }
	    }
	  }, {
	    key: 'addDataServer',
	    value: function addDataServer(dataServer, callback) {
	      var _this5 = this;
	
	      runWithProcessQueue(this.isProcessing, function (isProcessingFlag) {
	        dataServer.get_protein_data(function (proteinData) {
	          _this5.display.displayMessageBeforeCompute('Parsing \'' + proteinData.pdb_id + '\'', function () {
	            _this5.loadProteinData(isProcessingFlag, dataServer, proteinData, callback);
	          });
	        });
	      });
	    }
	  }, {
	    key: 'loadViewsFromDataServer',
	    value: function loadViewsFromDataServer(viewDicts) {
	
	      this.controller.load_views_from_flat_views(viewDicts);
	
	      var viewId = this.soupView.current_view.id;
	      if (this.initViewId) {
	        if (this.initViewId in this.soupView.saved_views_by_id) {
	          viewId = this.initViewId;
	        }
	      }
	      this.updateView();
	
	      if (this.params.viewId in this.soupView.saved_views_by_id) {
	        this.controller.set_target_view_by_id(this.params.viewId);
	        this.updateView();
	      }
	    }
	  }, {
	    key: 'saveViewsToDataServer',
	    value: function saveViewsToDataServer(success) {
	      this.dataServer.save_views(this.controller.get_view_dicts(), success);
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'saveCurrView',
	    value: function saveCurrView() {
	      var _this6 = this;
	
	      var newId = (0, _util.randomId)();
	      this.controller.save_current_view(newId);
	      this.updateView();
	      this.viewDiv.css('background-color', 'lightgray');
	      this.saveViewsToDataServer(function () {
	        _this6.viewDiv.css('background-color', '');
	      });
	    }
	  }, {
	    key: 'getCurrView',
	    value: function getCurrView() {
	      var i = this.soupView.i_last_view;
	      if (i in this.soupView.saved_views) {
	        var id = this.soupView.saved_views[i].id;
	        return this.soupView.saved_views_by_id[id];
	      } else {
	        return this.soupView.saved_views[0];
	      }
	    }
	  }, {
	    key: 'changeText',
	    value: function changeText(newText) {
	      var _this7 = this;
	
	      var view = this.getCurrView();
	      view.text = newText;
	      this.viewDiv.css('background-color', 'lightgray');
	      this.saveViewsToDataServer(function () {
	        _this7.viewDiv.css('background-color', '');
	      });
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'deleteCurrView',
	    value: function deleteCurrView() {
	      var _this8 = this;
	
	      var i = this.soupView.i_last_view;
	      if (i == 0) {
	        // skip default view:000000
	        return;
	      }
	      var id = this.soupView.saved_views[i].id;
	      this.controller.delete_view(id);
	      this.viewDiv.css('background-color', 'lightgray');
	      this.dataServer.delete_protein_view(id, function () {
	        _this8.updateView();
	        _this8.viewDiv.css('background-color', '');
	      });
	    }
	  }, {
	    key: 'isChanged',
	    value: function isChanged() {
	      if (!(0, _util.exists)(this.display)) {
	        return false;
	      }
	      return this.display.isChanged();
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      if ((0, _util.exists)(this.display)) {
	        this.display.animate();
	        if (this.isLoop) {
	          if (this.soupView.n_update_step <= 0) {
	            // loop started
	            this.soupView.n_update_step -= 1;
	            if (this.soupView.n_update_step < -100) {
	              this.controller.set_target_next_view();
	              this.soupView.changed = true;
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      if ((0, _util.exists)(this.display)) {
	        if (this.soupView.changed) {
	          this.updateView();
	          this.display.draw();
	          this.populateResidueSelector();
	          this.soupView.changed = false;
	        }
	      }
	    }
	  }, {
	    key: 'cycleBackbone',
	    value: function cycleBackbone() {
	      if (this.soupView.current_view.show.all_atom) {
	        this.controller.set_backbone_option('ribbon');
	      } else if (this.soupView.current_view.show.ribbon) {
	        this.controller.set_backbone_option('trace');
	      } else if (this.soupView.current_view.show.trace) {
	        this.controller.set_backbone_option('all_atom');
	      }
	    }
	  }, {
	    key: 'setTextState',
	    value: function setTextState() {
	      if (this.isViewTextShown) {
	        this.viewDiv.height(this.hAnnotationView);
	        this.viewDiv.css('visibility', 'visible');
	      } else {
	        this.viewDiv.height(0);
	        this.viewDiv.css('visibility', 'hidden');
	      }
	      this.resize();
	      this.controller.soupView.changed = true;
	    }
	  }, {
	    key: 'toggleTextState',
	    value: function toggleTextState() {
	      this.isViewTextShown = !this.isViewTextShown;
	      this.setTextState();
	    }
	  }, {
	    key: 'gotoPrevView',
	    value: function gotoPrevView() {
	      this.controller.set_target_prev_view();
	      this.updateView();
	    }
	  }, {
	    key: 'gotoNextView',
	    value: function gotoNextView() {
	      this.controller.set_target_next_view();
	      this.updateView();
	    }
	  }, {
	    key: 'createProteinDiv',
	    value: function createProteinDiv() {
	      var height = this.div.outerHeight() - this.hAnnotationView;
	      this.proteinDiv = (0, _jquery2.default)('<div>').attr('id', 'jolecule-soup-display').addClass('jolecule-embed-body').css('overflow', 'hidden').css('width', this.div.outerWidth()).css('height', height);
	      this.div.append(this.proteinDiv);
	    }
	  }, {
	    key: 'populateResidueSelector',
	    value: function populateResidueSelector() {
	      // clear selector
	      this.residueSelector.find('option').remove();
	
	      // rebuild selector
	      for (var i = 0; i < this.soup.getResidueCount(); i++) {
	        var residue = this.soup.getResidueProxy(i);
	        var text = residue.resId + '-' + residue.resType;
	        this.residueSelector.append((0, _jquery2.default)('<option>').attr('value', i).text(text));
	      }
	
	      var iAtom = this.soupView.current_view.i_atom;
	      var iRes = this.soup.getAtomProxy(iAtom).iRes;
	      this.residueSelector.val(iRes);
	    }
	  }, {
	    key: 'createStatusDiv',
	    value: function createStatusDiv() {
	      var _this9 = this;
	
	      this.statusText = (0, _jquery2.default)('<span>');
	
	      var textButton = (0, _util.toggleButton)('toggle_text', 'T', 'jolecule-button', function () {
	        return _this9.isViewTextShown;
	      }, function (b) {
	        _this9.toggleTextState();
	      });
	
	      var prevButton = (0, _util.linkButton)('prev_view', '<', 'jolecule-button', function () {
	        _this9.gotoPrevView();
	      });
	
	      var nextButton = (0, _util.linkButton)('prev_view', '>', 'jolecule-button', function () {
	        _this9.gotoNextView();
	      });
	
	      var loopButton = (0, _util.toggleButton)('loop', '&orarr;', 'jolecule-button', function () {
	        return _this9.isLoop;
	      }, function (b) {
	        _this9.isLoop = b;
	      });
	
	      var saveButton = '';
	      if (this.params.isEditable) {
	        saveButton = (0, _util.linkButton)('save_view', '+', 'jolecule-button', function () {
	          _this9.saveCurrView();
	        });
	      }
	
	      this.ligButton = (0, _util.toggleButton)('', 'lig', 'jolecule-button', function () {
	        return _this9.controller.get_show_option('ligands');
	      }, function (b) {
	        _this9.controller.set_show_option('ligands', b);
	      });
	
	      this.watButton = (0, _util.toggleButton)('', 'water', 'jolecule-button', function () {
	        return _this9.controller.get_show_option('water');
	      }, function (b) {
	        _this9.controller.set_show_option('water', b);
	      });
	
	      this.hydButton = (0, _util.toggleButton)('', 'h', 'jolecule-button', function () {
	        return _this9.controller.get_show_option('hydrogen');
	      }, function (b) {
	        _this9.controller.set_show_option('hydrogen', b);
	      });
	      this.hydButton = '';
	
	      var backboneButton = (0, _util.linkButton)('', 'backbone', 'jolecule-button', function () {
	        _this9.cycleBackbone();
	      });
	
	      var allSidechainButton = (0, _util.linkButton)('', 'all', 'jolecule-button', function () {
	        _this9.controller.set_show_option('sidechain', true);
	      });
	
	      var clearSidechainButton = (0, _util.linkButton)('', 'x', 'jolecule-button', function () {
	        _this9.controller.set_show_option('sidechain', false);
	        _this9.controller.clear_selected();
	      });
	
	      var nearSidechainButton = (0, _util.linkButton)('', 'near', 'jolecule-button', function () {
	        _this9.controller.toggle_neighbors();
	      });
	
	      this.residueSelector = (0, _jquery2.default)('<select>').addClass('jolecule-residue-selector').css({
	        'outline': 'none',
	        '-moz-appearance': 'none'
	      });
	
	      this.residueSelector.change(function () {
	        var iRes = parseInt(_this9.residueSelector.find(':selected').val());
	        _this9.display.setTargetViewFromAtom(_this9.soupView.soup.getResidueProxy(iRes).iAtom);
	      });
	
	      this.viewBarDiv = (0, _jquery2.default)('<div style="width: 100%; display: flex; flex-direction: row">').append((0, _jquery2.default)('<div style="flex: 1; display: flex; flex-direction: row; align-items: center;">').append(loopButton).append(textButton).append(prevButton).append(this.statusText).append(nextButton).append(saveButton)).append((0, _jquery2.default)('<div style="flex: 1; display: flex; flex-direction: row; justify-content: flex-end;">').append(this.residueSelector));
	
	      this.sidechainDiv = (0, _jquery2.default)('<div style="width: 100%; display: flex; flex-direction: row; margin-top: 5px">').append((0, _jquery2.default)('<div style="flex: 1; display: flex; flex-direction: row; align-items: center;">').append(backboneButton).append(' ').append(this.ligButton).append(this.hydButton).append(this.watButton).append(' ')).append((0, _jquery2.default)('<div style="flex: 1; justify-content: flex-end; display: flex; flex-direction: row; align-items: center;">').append(' sidechain: ').append(allSidechainButton).append(clearSidechainButton).append(nearSidechainButton));
	
	      this.statusDiv = (0, _jquery2.default)('<div style="display: flex; flex-direction: column">').addClass('jolecule-embed-view-bar').append(this.viewBarDiv).append(this.sidechainDiv);
	
	      this.div.append(this.statusDiv);
	    }
	  }, {
	    key: 'updateView',
	    value: function updateView() {
	      var _this10 = this;
	
	      var view = this.getCurrView();
	      if (view == null) {
	        return;
	      }
	      var nView = this.soupView.saved_views.length;
	      var iView = view.order + 1;
	      this.statusText.text(' ' + iView + '/' + nView + ' ');
	      var viewPiece = new ViewPiece({
	        view: view,
	        isEditable: this.params.isEditable,
	        delete_view: function delete_view() {
	          _this10.deleteCurrView();
	        },
	        save_change: function save_change(text) {
	          _this10.changeText(text);
	        },
	        pick: _lodash2.default.noop,
	        embed_view: function embed_view() {
	          window.location.href = '/embed/pdb/pdb?pdb_id=' + view.pdb_id + '&view=' + view.id;
	        }
	      });
	      this.realViewDiv = viewPiece.div;
	      this.realViewDiv.css('overflow-y', 'auto').css('height', '100%');
	      this.viewDiv.empty().append(this.realViewDiv);
	      this.ligButton.redraw();
	      this.watButton.redraw();
	      if (this.hydButton) {
	        this.hydButton.redraw();
	      }
	    }
	  }, {
	    key: 'createViewDiv',
	    value: function createViewDiv() {
	      this.viewDiv = (0, _jquery2.default)('<div>').addClass('jolecule-embed-view');
	      this.div.append(this.viewDiv);
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {
	      this.proteinDiv.width(this.div.outerWidth());
	      var newHeight = this.div.outerHeight() - this.viewDiv.outerHeight() - this.statusDiv.outerHeight();
	      if ((0, _util.exists)(this.display)) {
	        if ((0, _util.exists)(this.display.renderer)) {
	          this.display.renderer.domElement.style.height = newHeight;
	          this.display.resize();
	        }
	        this.soupView.changed = true;
	      }
	      this.proteinDiv.css('height', newHeight);
	    }
	  }]);
	
	  return EmbedJolecule;
	}();
	
	exports.EmbedJolecule = EmbedJolecule;
	exports.defaultArgs = defaultArgs;
	exports.ViewPiece = ViewPiece;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.1.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-09-22T22:30Z
	 */
	( function( global, factory ) {
	
		"use strict";
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
	
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";
	
	var arr = [];
	
	var document = window.document;
	
	var getProto = Object.getPrototypeOf;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var fnToString = hasOwn.toString;
	
	var ObjectFunctionString = fnToString.call( Object );
	
	var support = {};
	
	
	
		function DOMEval( code, doc ) {
			doc = doc || document;
	
			var script = doc.createElement( "script" );
	
			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module
	
	
	
	var
		version = "3.1.1",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
	
			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}
	
			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&
	
				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},
	
		isPlainObject: function( obj ) {
			var proto, Ctor;
	
			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}
	
			proto = getProto( obj );
	
			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}
	
			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},
	
		isEmptyObject: function( obj ) {
	
			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;
	
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
	
		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {
	
				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}
	
				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}
	
			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},
	
		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");
	
		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {
	
		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {
	
			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {
	
				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {
	
					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}
	
					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||
	
						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}
	
				return elem.disabled === disabled;
	
			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}
	
			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {
	
			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
	
			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );
	
					if ( elem ) {
	
						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
	
						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}
	
					return [];
				}
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";
	
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	
	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;
	
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}
	
		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}
	
		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}
	
		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}
	
		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}
	
		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			ret = this.pushStack( [] );
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						if ( elem ) {
	
							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );
	
			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :
	
							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
							matched.push( cur );
							break;
						}
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}
	
	function adoptValue( value, resolve, reject ) {
		var method;
	
		try {
	
			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );
	
			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );
	
			// Other non-thenables
			} else {
	
				// Support: Android 4.0 only
				// Strict mode functions invoked without .call/.apply get global-object context
				resolve.call( undefined, value );
			}
	
		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {
	
			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.call( undefined, value );
		}
	}
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},
	
					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
	
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
	
								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
	
								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;
	
										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}
	
										returned = handler.apply( that, args );
	
										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}
	
										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&
	
											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;
	
										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {
	
											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);
	
											// Normal processors (resolve) also hook into progress
											} else {
	
												// ...and disregard older resolution values
												maxDepth++;
	
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}
	
										// Handle all other returned values
										} else {
	
											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}
	
											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},
	
									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {
	
												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}
	
												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {
	
													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}
	
													deferred.rejectWith( that, args );
												}
											}
										};
	
								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {
	
									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}
	
						return jQuery.Deferred( function( newDefer ) {
	
							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);
	
							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);
	
							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];
	
				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add(
						function() {
	
							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},
	
						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,
	
						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}
	
				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );
	
				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};
	
				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( singleValue ) {
			var
	
				// count of uncompleted subordinates
				remaining = arguments.length,
	
				// count of unprocessed arguments
				i = remaining,
	
				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),
	
				// the master Deferred
				master = jQuery.Deferred(),
	
				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};
	
			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );
	
				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
	
					return master.then();
				}
			}
	
			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}
	
			return master.promise();
		}
	} );
	
	
	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
	
	jQuery.Deferred.exceptionHook = function( error, stack ) {
	
		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};
	
	
	
	
	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};
	
	
	
	
	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();
	
	jQuery.fn.ready = function( fn ) {
	
		readyList
			.then( fn )
	
			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );
	
	jQuery.ready.then = readyList.then;
	
	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );
	
	} else {
	
		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );
	
		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		if ( chainable ) {
			return elems;
		}
	
		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}
	
		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		cache: function( owner ) {
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
	
				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				return this.get( owner, key );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key !== undefined ) {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );
	
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}
	
				i = key.length;
	
				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}
	
		if ( data === "false" ) {
			return false;
		}
	
		if ( data === "null" ) {
			return null;
		}
	
		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}
	
		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}
	
		return data;
	}
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				this.each( function() {
	
					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHiddenWithinTree = function( elem, el ) {
	
			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
	
			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&
	
				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&
	
				jQuery.css( elem, "display" ) === "none";
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	var defaultDisplayMap = {};
	
	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];
	
		if ( display ) {
			return display;
		}
	
		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );
	
		temp.parentNode.removeChild( temp );
	
		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;
	
		return display;
	}
	
	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;
	
		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			display = elem.style.display;
			if ( show ) {
	
				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";
	
					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}
	
		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}
	
		return elements;
	}
	
	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;
	
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );
	
		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );
	
		} else {
			ret = [];
		}
	
		if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}
	
		return ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;
	
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( nativeEvent ) {
	
			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );
	
			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
	
			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}
	
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Find delegate handlers
			if ( delegateCount &&
	
				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&
	
				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,
	
				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},
	
				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},
	
		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;
	
			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,
	
		which: function( event ) {
			var button = event.button;
	
			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}
	
			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}
	
				if ( button & 2 ) {
					return 3;
				}
	
				if ( button & 4 ) {
					return 2;
				}
	
				return 0;
			}
	
			return event.which;
		}
	}, jQuery.event.addProp );
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
	
		/* eslint-disable max-len */
	
		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
	
		/* eslint-enable */
	
		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
	
			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}
	
		return elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	
	
	( function() {
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
	
			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}
	
			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
	
			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
	
			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}
	
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
	
		// Support: IE <=9 only
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
	
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;
	
		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;
	
		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var val,
			valueIsBorderBox = true,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Support: IE <=11 only
		// Running getBoundingClientRect on a disconnected node
		// in IE throws an error.
		if ( elem.getClientRects().length ) {
			val = elem.getBoundingClientRect()[ name ];
		}
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
	
						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	function raf() {
		if ( timerId ) {
			window.requestAnimationFrame( raf );
			jQuery.fx.tick();
		}
	}
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
	
					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}
	
		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}
	
		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {
	
			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {
	
					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}
	
			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {
	
					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {
	
			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}
	
				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}
	
				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}
	
				/* eslint-disable no-loop-func */
	
				anim.done( function() {
	
				/* eslint-enable no-loop-func */
	
					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}
	
			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		// Go to the end state if fx are off or if document is hidden
		if ( jQuery.fx.off || document.hidden ) {
			opt.duration = 0;
	
		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];
	
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.requestAnimationFrame ?
				window.requestAnimationFrame( raf ) :
				window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		if ( window.cancelAnimationFrame ) {
			window.cancelAnimationFrame( timerId );
		} else {
			window.clearInterval( timerId );
		}
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name,
				i = 0,
	
				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();
	
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}
	
					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}
	
					return -1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}
	
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}
	
					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;
	
					if ( index < 0 ) {
						i = max;
	
					} else {
						i = one ? index : 0;
					}
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						/* eslint-disable no-cond-assign */
	
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
	
						/* eslint-enable no-cond-assign */
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {
	
				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;
	
				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				if ( val == null ) {
					return null;
				}
	
				if ( jQuery.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}
	
				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": JSON.parse,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// Request state (becomes false upon send and true upon completion)
				completed,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// uncached part of the url
				uncached,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {
	
								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR );
	
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}
	
				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;
	
			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}
	
					// Propagate others as results
					done( -1, e );
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Ignore repeat invocations
				if ( completed ) {
					return;
				}
	
				completed = true;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );
	
	
	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};
	
	
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		var base, parsed, scripts;
	
		if ( !context ) {
	
			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );
	
				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}
	
		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
	
			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win, rect, doc,
				elem = this[ 0 ];
	
			if ( !elem ) {
				return;
			}
	
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}
	
			rect = elem.getBoundingClientRect();
	
			// Make sure element is not hidden (display: none)
			if ( rect.width || rect.height ) {
				doc = elem.ownerDocument;
				win = getWindow( doc );
				docElem = doc.documentElement;
	
				return {
					top: rect.top + win.pageYOffset - docElem.clientTop,
					left: rect.left + win.pageXOffset - docElem.clientLeft
				};
			}
	
			// Return zeros for disconnected and hidden elements (gh-2310)
			return rect;
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );
	
	jQuery.parseJSON = JSON.parse;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	
	
	
	
	return jQuery;
	} );


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * @license
	 * Lodash <https://lodash.com/>
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {
	
	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;
	
	  /** Used as the semantic version number. */
	  var VERSION = '4.17.4';
	
	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;
	
	  /** Error message constants. */
	  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
	      FUNC_ERROR_TEXT = 'Expected a function';
	
	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	  /** Used as the maximum memoize cache size. */
	  var MAX_MEMOIZE_SIZE = 500;
	
	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';
	
	  /** Used to compose bitmasks for cloning. */
	  var CLONE_DEEP_FLAG = 1,
	      CLONE_FLAT_FLAG = 2,
	      CLONE_SYMBOLS_FLAG = 4;
	
	  /** Used to compose bitmasks for value comparisons. */
	  var COMPARE_PARTIAL_FLAG = 1,
	      COMPARE_UNORDERED_FLAG = 2;
	
	  /** Used to compose bitmasks for function metadata. */
	  var WRAP_BIND_FLAG = 1,
	      WRAP_BIND_KEY_FLAG = 2,
	      WRAP_CURRY_BOUND_FLAG = 4,
	      WRAP_CURRY_FLAG = 8,
	      WRAP_CURRY_RIGHT_FLAG = 16,
	      WRAP_PARTIAL_FLAG = 32,
	      WRAP_PARTIAL_RIGHT_FLAG = 64,
	      WRAP_ARY_FLAG = 128,
	      WRAP_REARG_FLAG = 256,
	      WRAP_FLIP_FLAG = 512;
	
	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';
	
	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 800,
	      HOT_SPAN = 16;
	
	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;
	
	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;
	
	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
	
	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', WRAP_ARY_FLAG],
	    ['bind', WRAP_BIND_FLAG],
	    ['bindKey', WRAP_BIND_KEY_FLAG],
	    ['curry', WRAP_CURRY_FLAG],
	    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
	    ['flip', WRAP_FLIP_FLAG],
	    ['partial', WRAP_PARTIAL_FLAG],
	    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
	    ['rearg', WRAP_REARG_FLAG]
	  ];
	
	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      asyncTag = '[object AsyncFunction]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      domExcTag = '[object DOMException]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      nullTag = '[object Null]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      proxyTag = '[object Proxy]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      undefinedTag = '[object Undefined]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';
	
	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';
	
	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	
	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
	      reUnescapedHtml = /[&<>"']/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	
	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;
	
	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      reLeadingDot = /^\./,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);
	
	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;
	
	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;
	
	  /** Used to match words composed of alphanumeric characters. */
	  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
	
	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;
	
	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	
	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;
	
	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;
	
	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;
	
	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	  /** Used to match Latin Unicode letters (excluding mathematical operators). */
	  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
	
	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;
	
	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	
	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f',
	      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	      rsComboSymbolsRange = '\\u20d0-\\u20ff',
	      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	
	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';
	
	  /** Used to compose unicode regexes. */
	  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
	      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	
	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');
	
	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');
	
	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
	
	  /** Used to match complex or compound words. */
	  var reUnicodeWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
	    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
	    rsUpper + '+' + rsOptContrUpper,
	    rsOrdUpper,
	    rsOrdLower,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');
	
	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');
	
	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	
	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];
	
	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;
	
	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;
	
	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;
	
	  /** Used to map Latin Unicode letters to basic Latin letters. */
	  var deburredLetters = {
	    // Latin-1 Supplement block.
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss',
	    // Latin Extended-A block.
	    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
	    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
	    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
	    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
	    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
	    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
	    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
	    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
	    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
	    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
	    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
	    '\u0134': 'J',  '\u0135': 'j',
	    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
	    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
	    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
	    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
	    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
	    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
	    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
	    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
	    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
	    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
	    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
	    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
	    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
	    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
	    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
	    '\u0174': 'W',  '\u0175': 'w',
	    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
	    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
	    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
	    '\u0132': 'IJ', '\u0133': 'ij',
	    '\u0152': 'Oe', '\u0153': 'oe',
	    '\u0149': "'n", '\u017f': 's'
	  };
	
	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;'
	  };
	
	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'"
	  };
	
	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;
	
	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();
	
	  /** Detect free variable `exports`. */
	  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	  /** Detect free variable `module`. */
	  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;
	
	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;
	
	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      return freeProcess && freeProcess.binding && freeProcess.binding('util');
	    } catch (e) {}
	  }());
	
	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `map.set` because it's not chainable in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }
	
	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    // Don't return `set.add` because it's not chainable in IE 11.
	    set.add(value);
	    return set;
	  }
	
	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }
	
	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	
	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }
	
	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array == null ? 0 : array.length;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }
	
	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to inspect.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array == null ? 0 : array.length,
	        result = Array(length);
	
	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }
	
	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;
	
	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array == null ? 0 : array.length;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array == null ? 0 : array.length;
	
	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * Gets the size of an ASCII `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  var asciiSize = baseProperty('length');
	
	  /**
	   * Converts an ASCII `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function asciiToArray(string) {
	    return string.split('');
	  }
	
	  /**
	   * Splits an ASCII `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function asciiWords(string) {
	    return string.match(reAsciiWord) || [];
	  }
	
	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    return value === value
	      ? strictIndexOf(array, value, fromIndex)
	      : baseFindIndex(array, baseIsNaN, fromIndex);
	  }
	
	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }
	
	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array == null ? 0 : array.length;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }
	
	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }
	
	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;
	
	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }
	
	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;
	
	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);
	
	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }
	
	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }
	
	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }
	
	  /**
	   * Checks if a `cache` value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;
	
	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;
	
	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;
	
	    while (length--) {
	      if (array[length] === placeholder) {
	        ++result;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	   * letters to basic Latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);
	
	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);
	
	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }
	
	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }
	
	  /**
	   * Checks if `string` contains Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	   */
	  function hasUnicode(string) {
	    return reHasUnicode.test(string);
	  }
	
	  /**
	   * Checks if `string` contains a word composed of Unicode symbols.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {boolean} Returns `true` if a word is found, else `false`.
	   */
	  function hasUnicodeWord(string) {
	    return reHasUnicodeWord.test(string);
	  }
	
	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];
	
	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }
	
	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);
	
	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }
	
	  /**
	   * Creates a unary function that invokes `func` with its argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }
	
	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }
	
	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }
	
	  /**
	   * A specialized version of `_.indexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictIndexOf(array, value, fromIndex) {
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * A specialized version of `_.lastIndexOf` which performs strict equality
	   * comparisons of values, i.e. `===`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function strictLastIndexOf(array, value, fromIndex) {
	    var index = fromIndex + 1;
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return index;
	  }
	
	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    return hasUnicode(string)
	      ? unicodeSize(string)
	      : asciiSize(string);
	  }
	
	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return hasUnicode(string)
	      ? unicodeToArray(string)
	      : asciiToArray(string);
	  }
	
	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
	
	  /**
	   * Gets the size of a Unicode `string`.
	   *
	   * @private
	   * @param {string} string The string inspect.
	   * @returns {number} Returns the string size.
	   */
	  function unicodeSize(string) {
	    var result = reUnicode.lastIndex = 0;
	    while (reUnicode.test(string)) {
	      ++result;
	    }
	    return result;
	  }
	
	  /**
	   * Converts a Unicode `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	  }
	
	  /**
	   * Splits a Unicode `string` into an array of its words.
	   *
	   * @private
	   * @param {string} The string to inspect.
	   * @returns {Array} Returns the words of `string`.
	   */
	  function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  var runInContext = (function runInContext(context) {
	    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
	
	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;
	
	    /** Used for built-in method references. */
	    var arrayProto = Array.prototype,
	        funcProto = Function.prototype,
	        objectProto = Object.prototype;
	
	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];
	
	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = funcProto.toString;
	
	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;
	
	    /** Used to generate unique IDs. */
	    var idCounter = 0;
	
	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());
	
	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var nativeObjectToString = objectProto.toString;
	
	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);
	
	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;
	
	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );
	
	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
	        getPrototype = overArg(Object.getPrototypeOf, Object),
	        objectCreate = Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
	        symIterator = Symbol ? Symbol.iterator : undefined,
	        symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	    var defineProperty = (function() {
	      try {
	        var func = getNative(Object, 'defineProperty');
	        func({}, '', {});
	        return func;
	      } catch (e) {}
	    }());
	
	    /** Mocked built-ins. */
	    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
	        ctxNow = Date && Date.now !== root.Date.now && Date.now,
	        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
	
	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = overArg(Object.keys, Object),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = Date.now,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReverse = arrayProto.reverse;
	
	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(Object, 'create');
	
	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;
	
	    /** Used to lookup unminified function names. */
	    var realNames = {};
	
	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);
	
	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array and iteratees accept only
	     * one argument. The heuristic for whether a section qualifies for shortcut
	     * fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }
	
	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} proto The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(proto) {
	        if (!isObject(proto)) {
	          return {};
	        }
	        if (objectCreate) {
	          return objectCreate(proto);
	        }
	        object.prototype = proto;
	        var result = new object;
	        object.prototype = undefined;
	        return result;
	      };
	    }());
	
	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }
	
	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }
	
	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
	     * following template settings to use alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {
	
	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,
	
	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,
	
	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,
	
	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',
	
	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {
	
	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };
	
	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;
	
	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }
	
	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }
	
	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }
	
	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);
	
	      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];
	
	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;
	
	        var iterIndex = -1,
	            value = array[index];
	
	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);
	
	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }
	
	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      var result = this.has(key) && delete this.__data__[key];
	      this.size -= result ? 1 : 0;
	      return result;
	    }
	
	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }
	
	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	    }
	
	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      this.size += this.has(key) ? 0 : 1;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }
	
	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      --this.size;
	      return true;
	    }
	
	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      return index < 0 ? undefined : data[index][1];
	    }
	
	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }
	
	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        ++this.size;
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }
	
	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries == null ? 0 : entries.length;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.size = 0;
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }
	
	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      var result = getMapData(this, key)['delete'](key);
	      this.size -= result ? 1 : 0;
	      return result;
	    }
	
	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }
	
	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }
	
	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      var data = getMapData(this, key),
	          size = data.size;
	
	      data.set(key, value);
	      this.size += data.size == size ? 0 : 1;
	      return this;
	    }
	
	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values == null ? 0 : values.length;
	
	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }
	
	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }
	
	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }
	
	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      var data = this.__data__ = new ListCache(entries);
	      this.size = data.size;
	    }
	
	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	      this.size = 0;
	    }
	
	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      var data = this.__data__,
	          result = data['delete'](key);
	
	      this.size = data.size;
	      return result;
	    }
	
	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }
	
	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }
	
	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var data = this.__data__;
	      if (data instanceof ListCache) {
	        var pairs = data.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          this.size = ++data.size;
	          return this;
	        }
	        data = this.__data__ = new MapCache(pairs);
	      }
	      data.set(key, value);
	      this.size = data.size;
	      return this;
	    }
	
	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of the enumerable property names of the array-like `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @param {boolean} inherited Specify returning inherited property names.
	     * @returns {Array} Returns the array of property names.
	     */
	    function arrayLikeKeys(value, inherited) {
	      var isArr = isArray(value),
	          isArg = !isArr && isArguments(value),
	          isBuff = !isArr && !isArg && isBuffer(value),
	          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	          skipIndexes = isArr || isArg || isBuff || isType,
	          result = skipIndexes ? baseTimes(value.length, String) : [],
	          length = result.length;
	
	      for (var key in value) {
	        if ((inherited || hasOwnProperty.call(value, key)) &&
	            !(skipIndexes && (
	               // Safari 9 has enumerable `arguments.length` in strict mode.
	               key == 'length' ||
	               // Node.js 0.10 has enumerable non-index properties on buffers.
	               (isBuff && (key == 'offset' || key == 'parent')) ||
	               // PhantomJS 2 has enumerable non-index properties on typed arrays.
	               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	               // Skip index properties.
	               isIndex(key, length)
	            ))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.sample` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @returns {*} Returns the random element.
	     */
	    function arraySample(array) {
	      var length = array.length;
	      return length ? array[baseRandom(0, length - 1)] : undefined;
	    }
	
	    /**
	     * A specialized version of `_.sampleSize` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function arraySampleSize(array, n) {
	      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
	    }
	
	    /**
	     * A specialized version of `_.shuffle` for arrays.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function arrayShuffle(array) {
	      return shuffleSelf(copyArray(array));
	    }
	
	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }
	
	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        baseAssignValue(object, key, value);
	      }
	    }
	
	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }
	
	    /**
	     * The base implementation of `_.assignIn` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssignIn(object, source) {
	      return object && copyObject(source, keysIn(source), object);
	    }
	
	    /**
	     * The base implementation of `assignValue` and `assignMergeValue` without
	     * value checks.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function baseAssignValue(object, key, value) {
	      if (key == '__proto__' && defineProperty) {
	        defineProperty(object, key, {
	          'configurable': true,
	          'enumerable': true,
	          'value': value,
	          'writable': true
	        });
	      } else {
	        object[key] = value;
	      }
	    }
	
	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          length = paths.length,
	          result = Array(length),
	          skip = object == null;
	
	      while (++index < length) {
	        result[index] = skip ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }
	
	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Deep clone
	     *  2 - Flatten inherited properties
	     *  4 - Clone symbols
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, bitmask, customizer, key, object, stack) {
	      var result,
	          isDeep = bitmask & CLONE_DEEP_FLAG,
	          isFlat = bitmask & CLONE_FLAT_FLAG,
	          isFull = bitmask & CLONE_SYMBOLS_FLAG;
	
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;
	
	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = (isFlat || isFunc) ? {} : initCloneObject(value);
	          if (!isDeep) {
	            return isFlat
	              ? copySymbolsIn(value, baseAssignIn(result, value))
	              : copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);
	
	      var keysFunc = isFull
	        ? (isFlat ? getAllKeysIn : getAllKeys)
	        : (isFlat ? keysIn : keys);
	
	      var props = isArr ? undefined : keysFunc(value);
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }
	
	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (length--) {
	        var key = props[length],
	            predicate = source[key],
	            value = object[key];
	
	        if ((value === undefined && !(key in object)) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }
	
	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;
	
	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee == null ? value : iteratee(value);
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);
	
	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);
	
	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);
	
	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;
	
	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;
	
	      predicate || (predicate = isFlattenable);
	      result || (result = []);
	
	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();
	
	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);
	
	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }
	
	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = castPath(path, object);
	
	      var index = 0,
	          length = path.length;
	
	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }
	
	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }
	
	    /**
	     * The base implementation of `getTag` without fallbacks for buggy environments.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	      }
	      return (symToStringTag && symToStringTag in Object(value))
	        ? getRawTag(value)
	        : objectToString(value);
	    }
	
	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }
	
	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      return object != null && hasOwnProperty.call(object, key);
	    }
	
	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }
	
	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }
	
	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];
	
	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];
	
	      var index = -1,
	          seen = caches[0];
	
	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      var func = object == null ? object : object[toKey(last(path))];
	      return func == null ? undefined : apply(func, object, args);
	    }
	
	    /**
	     * The base implementation of `_.isArguments`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     */
	    function baseIsArguments(value) {
	      return isObjectLike(value) && baseGetTag(value) == argsTag;
	    }
	
	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
	    }
	
	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && baseGetTag(value) == dateTag;
	    }
	
	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {boolean} bitmask The bitmask flags.
	     *  1 - Unordered comparison
	     *  2 - Partial comparison
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, bitmask, customizer, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	    }
	
	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = objIsArr ? arrayTag : getTag(object),
	          othTag = othIsArr ? arrayTag : getTag(other);
	
	      objTag = objTag == argsTag ? objectTag : objTag;
	      othTag = othTag == argsTag ? objectTag : othTag;
	
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;
	
	      if (isSameTag && isBuffer(object)) {
	        if (!isBuffer(other)) {
	          return false;
	        }
	        objIsArr = true;
	        objIsObj = false;
	      }
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	      }
	      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;
	
	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	    }
	
	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }
	
	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;
	
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];
	
	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }
	
	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObjectLike(value) && baseGetTag(value) == regexpTag;
	    }
	
	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }
	
	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	    }
	
	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }
	
	    /**
	     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeys(object) {
	      if (!isPrototype(object)) {
	        return nativeKeys(object);
	      }
	      var result = [];
	      for (var key in Object(object)) {
	        if (hasOwnProperty.call(object, key) && key != 'constructor') {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      if (!isObject(object)) {
	        return nativeKeysIn(object);
	      }
	      var isProto = isPrototype(object),
	          result = [];
	
	      for (var key in object) {
	        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }
	
	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }
	
	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	      };
	    }
	
	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      baseFor(source, function(srcValue, key) {
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;
	
	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      }, keysIn);
	    }
	
	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);
	
	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;
	
	      var isCommon = newValue === undefined;
	
	      if (isCommon) {
	        var isArr = isArray(srcValue),
	            isBuff = !isArr && isBuffer(srcValue),
	            isTyped = !isArr && !isBuff && isTypedArray(srcValue);
	
	        newValue = srcValue;
	        if (isArr || isBuff || isTyped) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else if (isBuff) {
	            isCommon = false;
	            newValue = cloneBuffer(srcValue, true);
	          }
	          else if (isTyped) {
	            isCommon = false;
	            newValue = cloneTypedArray(srcValue, true);
	          }
	          else {
	            newValue = [];
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          newValue = objValue;
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            newValue = initCloneObject(srcValue);
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }
	
	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }
	
	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
	
	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });
	
	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }
	
	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, paths) {
	      return basePickBy(object, paths, function(value, path) {
	        return hasIn(object, path);
	      });
	    }
	
	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} paths The property paths to pick.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, paths, predicate) {
	      var index = -1,
	          length = paths.length,
	          result = {};
	
	      while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);
	
	        if (predicate(value, path)) {
	          baseSet(result, castPath(path, object), value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }
	
	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;
	
	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;
	
	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          } else {
	            baseUnset(array, index);
	          }
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }
	
	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);
	
	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);
	
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      return setToString(overRest(func, start, identity), func + '');
	    }
	
	    /**
	     * The base implementation of `_.sample`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     */
	    function baseSample(collection) {
	      return arraySample(values(collection));
	    }
	
	    /**
	     * The base implementation of `_.sampleSize` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} n The number of elements to sample.
	     * @returns {Array} Returns the random elements.
	     */
	    function baseSampleSize(collection, n) {
	      var array = values(collection);
	      return shuffleSelf(array, baseClamp(n, 0, array.length));
	    }
	
	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      if (!isObject(object)) {
	        return object;
	      }
	      path = castPath(path, object);
	
	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;
	
	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]),
	            newValue = value;
	
	        if (index != lastIndex) {
	          var objValue = nested[key];
	          newValue = customizer ? customizer(objValue, key, nested) : undefined;
	          if (newValue === undefined) {
	            newValue = isObject(objValue)
	              ? objValue
	              : (isIndex(path[index + 1]) ? [] : {});
	          }
	        }
	        assignValue(nested, key, newValue);
	        nested = nested[key];
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `setData` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };
	
	    /**
	     * The base implementation of `setToString` without support for hot loop shorting.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetToString = !defineProperty ? identity : function(func, string) {
	      return defineProperty(func, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(string),
	        'writable': true
	      });
	    };
	
	    /**
	     * The base implementation of `_.shuffle`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     */
	    function baseShuffle(collection) {
	      return shuffleSelf(values(collection));
	    }
	
	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;
	
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;
	
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;
	
	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }
	
	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array == null ? low : array.length;
	
	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];
	
	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }
	
	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);
	
	      var low = 0,
	          high = array == null ? 0 : array.length,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;
	
	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);
	
	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }
	
	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }
	
	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isArray(value)) {
	        // Recursively convert values (susceptible to call stack limits).
	        return arrayMap(value, baseToString) + '';
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;
	
	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The property path to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = castPath(path, object);
	      object = parent(object, path);
	      return object == null || delete object[toKey(last(path))];
	    }
	
	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }
	
	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;
	
	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}
	
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }
	
	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }
	
	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var length = arrays.length;
	      if (length < 2) {
	        return length ? baseUniq(arrays[0]) : [];
	      }
	      var index = -1,
	          result = Array(length);
	
	      while (++index < length) {
	        var array = arrays[index],
	            othIndex = -1;
	
	        while (++othIndex < length) {
	          if (othIndex != index) {
	            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
	          }
	        }
	      }
	      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
	    }
	
	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};
	
	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }
	
	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }
	
	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }
	
	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value, object) {
	      if (isArray(value)) {
	        return value;
	      }
	      return isKey(value, object) ? [value] : stringToPath(toString(value));
	    }
	
	    /**
	     * A `baseRest` alias which can be replaced with `identity` by module
	     * replacement plugins.
	     *
	     * @private
	     * @type {Function}
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    var castRest = baseRest;
	
	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }
	
	    /**
	     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
	     *
	     * @private
	     * @param {number|Object} id The timer id or timeout object of the timer to clear.
	     */
	    var clearTimeout = ctxClearTimeout || function(id) {
	      return root.clearTimeout(id);
	    };
	
	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var length = buffer.length,
	          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
	
	      buffer.copy(result);
	      return result;
	    }
	
	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }
	
	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }
	
	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }
	
	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }
	
	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }
	
	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }
	
	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }
	
	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);
	
	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);
	
	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }
	
	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;
	
	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }
	
	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;
	
	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;
	
	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;
	
	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }
	
	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      var isNew = !object;
	      object || (object = {});
	
	      var index = -1,
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index];
	
	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined;
	
	        if (newValue === undefined) {
	          newValue = source[key];
	        }
	        if (isNew) {
	          baseAssignValue(object, key, newValue);
	        } else {
	          assignValue(object, key, newValue);
	        }
	      }
	      return object;
	    }
	
	    /**
	     * Copies own symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }
	
	    /**
	     * Copies own and inherited symbols of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbolsIn(source, object) {
	      return copyObject(source, getSymbolsIn(source), object);
	    }
	
	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};
	
	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }
	
	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;
	
	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;
	
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }
	
	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }
	
	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;
	
	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);
	
	        var strSymbols = hasUnicode(string)
	          ? stringToArray(string)
	          : undefined;
	
	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);
	
	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);
	
	        return chr[methodName]() + trailing;
	      };
	    }
	
	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }
	
	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);
	
	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);
	
	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	      };
	    }
	
	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return flatRest(function(funcs) {
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;
	
	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];
	
	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;
	
	          if (data && isLaziable(data[0]) &&
	                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];
	
	          if (wrapper && args.length == 1 && isArray(value)) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;
	
	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & WRAP_ARY_FLAG,
	          isBind = bitmask & WRAP_BIND_FLAG,
	          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
	          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
	          isFlip = bitmask & WRAP_FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;
	
	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }
	
	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return defaultValue;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return flatRest(function(iteratees) {
	        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }
	
	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);
	
	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return hasUnicode(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & WRAP_BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	
	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toFinite(start);
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toFinite(end);
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	        return baseRange(start, end, step, fromRight);
	      };
	    }
	
	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & WRAP_CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;
	
	      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
	
	      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
	        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];
	
	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }
	
	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));
	
	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }
	
	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };
	
	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }
	
	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *    1 - `_.bind`
	     *    2 - `_.bindKey`
	     *    4 - `_.curry` or `_.curryRight` of a bound function
	     *    8 - `_.curry`
	     *   16 - `_.curryRight`
	     *   32 - `_.partial`
	     *   64 - `_.partialRight`
	     *  128 - `_.rearg`
	     *  256 - `_.ary`
	     *  512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;
	
	      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;
	
	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);
	
	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];
	
	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] === undefined
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);
	
	      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }
	
	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
	     * of source objects to the destination object for all destination properties
	     * that resolve to `undefined`.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsAssignIn(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }
	
	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
	     * objects into destination objects that are passed thru.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }
	
	    /**
	     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	     * objects.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @param {string} key The key of the property to inspect.
	     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	     */
	    function customOmitClone(value) {
	      return isPlainObject(value) ? undefined : value;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          arrLength = array.length,
	          othLength = other.length;
	
	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;
	
	      stack.set(array, other);
	      stack.set(other, array);
	
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!cacheHas(seen, othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                  return seen.push(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, bitmask, customizer, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      stack['delete'](other);
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;
	
	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;
	
	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);
	
	        case errorTag:
	          return object.name == other.name && object.message == other.message;
	
	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');
	
	        case mapTag:
	          var convert = mapToArray;
	
	        case setTag:
	          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	          convert || (convert = setToArray);
	
	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= COMPARE_UNORDERED_FLAG;
	
	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	          stack['delete'](object);
	          return result;
	
	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	          objProps = getAllKeys(object),
	          objLength = objProps.length,
	          othProps = getAllKeys(other),
	          othLength = othProps.length;
	
	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);
	
	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;
	
	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      stack['delete'](other);
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseRest` which flattens the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @returns {Function} Returns the new function.
	     */
	    function flatRest(func) {
	      return setToString(overRest(func, undefined, flatten), func + '');
	    }
	
	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }
	
	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }
	
	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };
	
	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
	
	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }
	
	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }
	
	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }
	
	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;
	
	      while (length--) {
	        var key = result[length],
	            value = object[key];
	
	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined;
	    }
	
	    /**
	     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the raw `toStringTag`.
	     */
	    function getRawTag(value) {
	      var isOwn = hasOwnProperty.call(value, symToStringTag),
	          tag = value[symToStringTag];
	
	      try {
	        value[symToStringTag] = undefined;
	        var unmasked = true;
	      } catch (e) {}
	
	      var result = nativeObjectToString.call(value);
	      if (unmasked) {
	        if (isOwn) {
	          value[symToStringTag] = tag;
	        } else {
	          delete value[symToStringTag];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of the own enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	      if (object == null) {
	        return [];
	      }
	      object = Object(object);
	      return arrayFilter(nativeGetSymbols(object), function(symbol) {
	        return propertyIsEnumerable.call(object, symbol);
	      });
	    };
	
	    /**
	     * Creates an array of the own and inherited enumerable symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };
	
	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;
	
	    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';
	
	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;
	
	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;
	
	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }
	
	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }
	
	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = castPath(path, object);
	
	      var index = -1,
	          length = path.length,
	          result = false;
	
	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result || ++index != length) {
	        return result;
	      }
	      length = object == null ? 0 : object.length;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isArguments(object));
	    }
	
	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);
	
	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }
	
	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }
	
	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);
	
	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);
	
	        case dataViewTag:
	          return cloneDataView(object, isDeep);
	
	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);
	
	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);
	
	        case numberTag:
	        case stringTag:
	          return new Ctor(object);
	
	        case regexpTag:
	          return cloneRegExp(object);
	
	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);
	
	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }
	
	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length;
	      if (!length) {
	        return source;
	      }
	      var lastIndex = length - 1;
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }
	
	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol]);
	    }
	
	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return !!length &&
	        (typeof value == 'number' || reIsUint.test(value)) &&
	        (value > -1 && value % 1 == 0 && value < length);
	    }
	
	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }
	
	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }
	
	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }
	
	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];
	
	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }
	
	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }
	
	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;
	
	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	      return value === proto;
	    }
	
	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }
	
	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }
	
	    /**
	     * A specialized version of `_.memoize` which clears the memoized function's
	     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	     *
	     * @private
	     * @param {Function} func The function to have its output memoized.
	     * @returns {Function} Returns the new memoized function.
	     */
	    function memoizeCapped(func) {
	      var result = memoize(func, function(key) {
	        if (cache.size === MAX_MEMOIZE_SIZE) {
	          cache.clear();
	        }
	        return key;
	      });
	
	      var cache = result.cache;
	      return result;
	    }
	
	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
	
	      var isCombo =
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
	        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));
	
	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & WRAP_BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & WRAP_ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;
	
	      return data;
	    }
	
	    /**
	     * This function is like
	     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * except that it includes inherited enumerable properties.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function nativeKeysIn(object) {
	      var result = [];
	      if (object != null) {
	        for (var key in Object(object)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to a string using `Object.prototype.toString`.
	     *
	     * @private
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     */
	    function objectToString(value) {
	      return nativeObjectToString.call(value);
	    }
	
	    /**
	     * A specialized version of `baseRest` which transforms the rest array.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @param {Function} transform The rest array transform.
	     * @returns {Function} Returns the new function.
	     */
	    function overRest(func, start, transform) {
	      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);
	
	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = transform(array);
	        return apply(func, this, otherArgs);
	      };
	    }
	
	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }
	
	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);
	
	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }
	
	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = shortOut(baseSetData);
	
	    /**
	     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @returns {number|Object} Returns the timer id or timeout object.
	     */
	    var setTimeout = ctxSetTimeout || function(func, wait) {
	      return root.setTimeout(func, wait);
	    };
	
	    /**
	     * Sets the `toString` method of `func` to return `string`.
	     *
	     * @private
	     * @param {Function} func The function to modify.
	     * @param {Function} string The `toString` result.
	     * @returns {Function} Returns `func`.
	     */
	    var setToString = shortOut(baseSetToString);
	
	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    function setWrapToString(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	    }
	
	    /**
	     * Creates a function that'll short out and invoke `identity` instead
	     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	     * milliseconds.
	     *
	     * @private
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new shortable function.
	     */
	    function shortOut(func) {
	      var count = 0,
	          lastCalled = 0;
	
	      return function() {
	        var stamp = nativeNow(),
	            remaining = HOT_SPAN - (stamp - lastCalled);
	
	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return arguments[0];
	          }
	        } else {
	          count = 0;
	        }
	        return func.apply(undefined, arguments);
	      };
	    }
	
	    /**
	     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
	     *
	     * @private
	     * @param {Array} array The array to shuffle.
	     * @param {number} [size=array.length] The size of `array`.
	     * @returns {Array} Returns `array`.
	     */
	    function shuffleSelf(array, size) {
	      var index = -1,
	          length = array.length,
	          lastIndex = length - 1;
	
	      size = size === undefined ? length : size;
	      while (++index < size) {
	        var rand = baseRandom(index, lastIndex),
	            value = array[rand];
	
	        array[rand] = array[index];
	        array[index] = value;
	      }
	      array.length = size;
	      return array;
	    }
	
	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoizeCapped(function(string) {
	      var result = [];
	      if (reLeadingDot.test(string)) {
	        result.push('');
	      }
	      string.replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });
	
	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to convert.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }
	
	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }
	
	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array == null ? 0 : array.length;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));
	
	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array == null ? 0 : array.length,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length;
	      if (!length) {
	        return [];
	      }
	      var args = Array(length - 1),
	          array = arguments[0],
	          index = length;
	
	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
	    }
	
	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. The order and
	     * references of result values are determined by the first array. The comparator
	     * is invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }
	
	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }
	
	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }
	
	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }
	
	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, 1) : [];
	    }
	
	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }
	
	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }
	
	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs == null ? 0 : pairs.length,
	          result = {};
	
	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }
	
	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }
	
	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 0, -1) : [];
	    }
	
	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons. The order and references of result values are
	     * determined by the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. The order and references of result values are
	     * determined by the first array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. The order and references
	     * of result values are determined by the first array. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      if (comparator) {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array == null ? '' : nativeJoin.call(array, separator);
	    }
	
	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? array[length - 1] : undefined;
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
	      }
	      return value === value
	        ? strictLastIndexOf(array, value, index)
	        : baseFindIndex(array, baseIsNaN, index, true);
	    }
	
	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }
	
	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);
	
	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }
	
	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = flatRest(function(array, indexes) {
	      var length = array == null ? 0 : array.length,
	          result = baseAt(array, indexes);
	
	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));
	
	      return result;
	    });
	
	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;
	
	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }
	
	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array == null ? array : nativeReverse.call(array);
	    }
	
	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }
	
	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }
	
	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }
	
	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array == null ? 0 : array.length;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }
	
	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }
	
	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      var length = array == null ? 0 : array.length;
	      return length ? baseSlice(array, 1, length) : [];
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array == null ? 0 : array.length;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }
	
	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });
	
	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each element
	     * is kept. The order of result values is determined by the order they occur
	     * in the array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length) ? baseUniq(array) : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The order of result values is determined by the
	     * order they occur in the array. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The order of result values is
	     * determined by the order they occur in the array.The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }
	
	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }
	
	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });
	
	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The order of result values is determined
	     * by the order they occur in the arrays. The iteratee is invoked with one
	     * argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The order of result values is
	     * determined by the order they occur in the arrays. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      comparator = typeof comparator == 'function' ? comparator : undefined;
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });
	
	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);
	
	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }
	
	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;
	
	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }
	
	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }
	
	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }
	
	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = flatRest(function(paths) {
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };
	
	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });
	
	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }
	
	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }
	
	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];
	
	      return { 'done': done, 'value': value };
	    }
	
	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }
	
	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;
	
	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }
	
	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }
	
	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        ++result[key];
	      } else {
	        baseAssignValue(result, key, 1);
	      }
	    });
	
	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * **Note:** This method returns `true` for
	     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	     * elements of empty collections.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);
	
	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);
	
	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }
	
	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _.forEach([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        baseAssignValue(result, key, [value]);
	      }
	    });
	
	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
	
	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }
	
	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value) {
	        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      baseAssignValue(result, key, value);
	    });
	
	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }
	
	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });
	
	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }
	
	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }
	
	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }
	
	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var func = isArray(collection) ? arraySample : baseSample;
	      return func(collection);
	    }
	
	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
	      return func(collection, n);
	    }
	
	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      var func = isArray(collection) ? arrayShuffle : baseShuffle;
	      return func(collection);
	    }
	
	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        return isString(collection) ? stringSize(collection) : collection.length;
	      }
	      var tag = getTag(collection);
	      if (tag == mapTag || tag == setTag) {
	        return collection.size;
	      }
	      return baseKeys(collection).length;
	    }
	
	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, [function(o) { return o.user; }]);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    var now = ctxNow || function() {
	      return root.Date.now();
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }
	
	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = WRAP_BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= WRAP_PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });
	
	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }
	
	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }
	
	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide `options` to indicate whether `func` should be invoked on the
	     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent
	     * calls to the debounced function return the result of the last `func`
	     * invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the debounced function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	
	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;
	
	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }
	
	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }
	
	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;
	
	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }
	
	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;
	
	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }
	
	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }
	
	      function trailingEdge(time) {
	        timerId = undefined;
	
	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }
	
	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined;
	      }
	
	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }
	
	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);
	
	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;
	
	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }
	
	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one millisecond.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });
	
	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, WRAP_FLIP_FLAG);
	    }
	
	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;
	
	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result) || cache;
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }
	
	    // Expose `MapCache`.
	    memoize.Cache = MapCache;
	
	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }
	
	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }
	
	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = castRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
	
	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);
	
	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });
	
	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = flatRest(function(func, indexes) {
	      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? start : toInteger(start);
	      return baseRest(func, start);
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start == null ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);
	
	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }
	
	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide `options` to indicate whether `func`
	     * should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }
	
	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }
	
	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      return partial(castFunction(wrapper), value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }
	
	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, CLONE_SYMBOLS_FLAG);
	    }
	
	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
	    }
	
	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	    }
	
	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
	    }
	
	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate
	     * properties of `source` with the corresponding property values of `object`.
	     *
	     * **Note:** This method is equivalent to `_.conforms` when `source` is
	     * partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }
	
	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }
	
	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);
	
	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });
	
	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	        !propertyIsEnumerable.call(value, 'callee');
	    };
	
	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;
	
	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
	
	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(value.length) && !isFunction(value);
	    }
	
	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && baseGetTag(value) == boolTag);
	    }
	
	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;
	
	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
	
	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
	    }
	
	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) &&
	          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	        return !value.length;
	      }
	      var tag = getTag(value);
	      if (tag == mapTag || tag == setTag) {
	        return !value.size;
	      }
	      if (isPrototype(value)) {
	        return !baseKeys(value).length;
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are compared by strict equality, i.e. `===`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }
	
	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	    }
	
	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      var tag = baseGetTag(value);
	      return tag == errorTag || tag == domExcTag ||
	        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
	    }
	
	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      if (!isObject(value)) {
	        return false;
	      }
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 9 which returns 'object' for typed arrays and other constructors.
	      var tag = baseGetTag(value);
	      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	    }
	
	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }
	
	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return value != null && (type == 'object' || type == 'function');
	    }
	
	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return value != null && typeof value == 'object';
	    }
	
	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
	
	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values.
	     *
	     * **Note:** This method is equivalent to `_.matches` when `source` is
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }
	
	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }
	
	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }
	
	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error(CORE_ERROR_TEXT);
	      }
	      return baseIsNative(value);
	    }
	
	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }
	
	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && baseGetTag(value) == numberTag);
	    }
	
	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	        funcToString.call(Ctor) == objectCtorString;
	    }
	
	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
	
	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
	
	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && baseGetTag(value) == symbolTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
	    }
	
	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);
	
	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });
	
	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (symIterator && value[symIterator]) {
	        return iteratorToArray(value[symIterator]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
	
	      return func(value);
	    }
	
	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }
	
	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;
	
	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }
	
	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }
	
	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }
	
	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }
	
	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return value
	        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
	        : (value === 0 ? value : 0);
	    }
	
	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });
	
	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      copyObject(source, keysIn(source), object);
	    });
	
	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });
	
	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });
	
	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = flatRest(baseAt);
	
	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties == null ? result : baseAssign(result, properties);
	    }
	
	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(args) {
	      args.push(undefined, customDefaultsAssignIn);
	      return apply(assignInWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined, customDefaultsMerge);
	      return apply(mergeWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }
	
	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }
	
	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }
	
	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }
	
	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }
	
	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }
	
	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }
	
	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));
	
	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);
	
	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);
	
	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	    }
	
	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, iteratee(value, key, object), value);
	      });
	      return result;
	    }
	
	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        baseAssignValue(result, key, iteratee(value, key, object));
	      });
	      return result;
	    }
	
	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });
	
	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with six arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });
	
	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable property paths of `object` that are not omitted.
	     *
	     * **Note:** This method is considerably slower than `_.pick`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = flatRest(function(object, paths) {
	      var result = {};
	      if (object == null) {
	        return result;
	      }
	      var isDeep = false;
	      paths = arrayMap(paths, function(path) {
	        path = castPath(path, object);
	        isDeep || (isDeep = path.length > 1);
	        return path;
	      });
	      copyObject(object, getAllKeysIn(object), result);
	      if (isDeep) {
	        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	      }
	      var length = paths.length;
	      while (length--) {
	        baseUnset(result, paths[length]);
	      }
	      return result;
	    });
	
	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }
	
	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [paths] The property paths to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = flatRest(function(object, paths) {
	      return object == null ? {} : basePick(object, paths);
	    });
	
	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      if (object == null) {
	        return {};
	      }
	      var props = arrayMap(getAllKeysIn(object), function(prop) {
	        return [prop];
	      });
	      predicate = getIteratee(predicate);
	      return basePickBy(object, props, function(value, path) {
	        return predicate(value, path[0]);
	      });
	    }
	
	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = castPath(path, object);
	
	      var index = -1,
	          length = path.length;
	
	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        length = 1;
	        object = undefined;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }
	
	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }
	
	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }
	
	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);
	
	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);
	
	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object),
	          isArrLike = isArr || isBuffer(object) || isTypedArray(object);
	
	      iteratee = getIteratee(iteratee, 4);
	      if (accumulator == null) {
	        var Ctor = object && object.constructor;
	        if (isArrLike) {
	          accumulator = isArr ? new Ctor : [];
	        }
	        else if (isObject(object)) {
	          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	        }
	        else {
	          accumulator = {};
	        }
	      }
	      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }
	
	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }
	
	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }
	
	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object == null ? [] : baseValues(object, keys(object));
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }
	
	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toFinite(start);
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toFinite(end);
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }
	
	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toFinite(lower);
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toFinite(upper);
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });
	
	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }
	
	    /**
	     * Deburrs `string` by converting
	     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	     * letters to basic Latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	    }
	
	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);
	
	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);
	
	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }
	
	    /**
	     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
	     * corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }
	
	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');
	
	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }
	
	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }
	
	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }
	
	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
	    }
	
	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }
	
	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);
	
	      return args.length < 3 ? string : string.replace(args[1], args[2]);
	    }
	
	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (!separator && hasUnicode(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return string.split(separator, limit);
	    }
	
	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });
	
	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = position == null
	        ? 0
	        : baseClamp(toInteger(position), 0, string.length);
	
	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }
	
	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES template literal delimiter as an "interpolate" delimiter.
	     * // Disable support by replacing the "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;
	
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, customDefaultsAssignIn);
	
	      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);
	
	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";
	
	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');
	
	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';
	
	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);
	
	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	
	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;
	
	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });
	
	      source += "';\n";
	
	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');
	
	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';
	
	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });
	
	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }
	
	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }
	
	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }
	
	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;
	
	      return castSlice(strSymbols, start, end).join('');
	    }
	
	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
	
	      return castSlice(strSymbols, 0, end).join('');
	    }
	
	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));
	
	      return castSlice(strSymbols, start).join('');
	    }
	
	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;
	
	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);
	
	      var strLength = string.length;
	      if (hasUnicode(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);
	
	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;
	
	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }
	
	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });
	
	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');
	
	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;
	
	      if (pattern === undefined) {
	        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	      }
	      return string.match(pattern) || [];
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });
	
	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = flatRest(function(object, methodNames) {
	      arrayEach(methodNames, function(key) {
	        key = toKey(key);
	        baseAssignValue(object, key, bind(object[key], object));
	      });
	      return object;
	    });
	
	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs == null ? 0 : pairs.length,
	          toIteratee = getIteratee();
	
	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });
	
	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }
	
	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.conformsTo` with
	     * `source` partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }
	
	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }
	
	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();
	
	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);
	
	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }
	
	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`.
	     *
	     * **Note:** The created function is equivalent to `_.isMatch` with `source`
	     * partially applied.
	     *
	     * Partial comparisons will match empty array and empty object `source`
	     * values against any array or object value, respectively. See `_.isEqual`
	     * for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** Partial comparisons will match empty array and empty object
	     * `srcValue` values against any array or object value, respectively. See
	     * `_.isEqual` for a list of supported value comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
	    }
	
	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);
	
	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);
	
	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);
	
	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });
	
	      return object;
	    }
	
	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }
	
	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }
	
	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }
	
	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);
	
	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);
	
	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);
	
	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }
	
	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }
	
	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();
	
	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);
	
	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }
	
	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }
	
	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }
	
	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }
	
	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }
	
	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);
	
	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;
	
	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	    }
	
	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);
	
	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');
	
	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);
	
	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');
	
	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined;
	    }
	
	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }
	
	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined;
	    }
	
	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);
	
	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');
	
	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);
	
	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }
	
	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;
	
	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;
	
	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;
	
	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;
	
	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;
	
	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });
	
	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
	
	        var result = (this.__filtered__ && !index)
	          ? new LazyWrapper(this)
	          : this.clone();
	
	        if (result.__filtered__) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };
	
	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });
	
	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
	
	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });
	
	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };
	
	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };
	
	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };
	
	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });
	
	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };
	
	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);
	
	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };
	
	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };
	
	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };
	
	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);
	
	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);
	
	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };
	
	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;
	
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });
	
	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
	
	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });
	
	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);
	
	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });
	
	    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];
	
	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;
	
	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
	
	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;
	
	    if (symIterator) {
	      lodash.prototype[symIterator] = wrapperToIterator;
	    }
	    return lodash;
	  });
	
	  /*--------------------------------------------------------------------------*/
	
	  // Export lodash.
	  var _ = runInContext();
	
	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (true) {
	    // Expose Lodash on the global object to prevent errors when Lodash is
	    // loaded by a script tag in the presence of an AMD loader.
	    // See http://requirejs.org/docs/errors.html#mismatch for more details.
	    // Use `_.noConflict` to remove Lodash from the global object.
	    root._ = _;
	
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds it.
	  else if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5)(module)))

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.SoupView = exports.interpolateCameras = exports.Controller = exports.Soup = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _v = __webpack_require__(7);
	
	var _v2 = _interopRequireDefault(_v);
	
	var _util = __webpack_require__(9);
	
	var _glgeom = __webpack_require__(10);
	
	var glgeom = _interopRequireWildcard(_glgeom);
	
	var _pairs = __webpack_require__(11);
	
	var _store = __webpack_require__(12);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _bitarray = __webpack_require__(13);
	
	var _bitarray2 = _interopRequireDefault(_bitarray);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var user = 'public'; // will be overriden by server
	
	
	function deleteNumbers(text) {
	  return text.replace(/\d+/, '');
	}
	
	function pushToListInDict(dict, key, value) {
	  if (!(key in dict)) {
	    dict[key] = [];
	  }
	  dict[key].push(value);
	}
	
	function getValueTableIndex(valueList, value) {
	  if (!_.includes(valueList, value)) {
	    valueList.push(value);
	  }
	  return valueList.indexOf(value);
	}
	
	function intToBool(i) {
	  return i === 1;
	}
	
	function boolToInt(b) {
	  return b ? 1 : 0;
	}
	
	function intToChar(i) {
	  return i ? String.fromCharCode(i) : '';
	}
	
	function charToInt(c) {
	  return c.charCodeAt(0);
	}
	
	function parsetTitleFromPdbText(text) {
	  var result = '';
	  var lines = text.split(/\r?\n/);
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;
	
	  try {
	    for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var line = _step.value;
	
	      if (line.substring(0, 5) === 'TITLE') {
	        result += line.substring(10);
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	
	  return result;
	}
	
	var atomStoreFields = [['x', 1, 'float32'], ['y', 1, 'float32'], ['z', 1, 'float32'], ['bfactor', 1, 'float32'], ['alt', 1, 'uint8'], ['iAtomType', 1, 'uint16'], ['iElem', 1, 'uint16'], ['iRes', 1, 'uint32'], ['iChain', 1, 'int32'], ['bondOffset', 1, 'uint32'], ['bondCount', 1, 'uint16']];
	
	var AtomProxy = function () {
	  function AtomProxy(soup, iAtom) {
	    _classCallCheck(this, AtomProxy);
	
	    this.soup = soup;
	    if (Number.isInteger(iAtom)) {
	      this.load(iAtom);
	    }
	    this._pos = _v2.default.create();
	  }
	
	  _createClass(AtomProxy, [{
	    key: 'load',
	    value: function load(iAtom) {
	      this.iAtom = iAtom;
	      return this;
	    }
	  }, {
	    key: 'getBondIndices',
	    value: function getBondIndices() {
	      var iStart = this.soup.atomStore.bondOffset[this.iAtom];
	      var n = this.soup.atomStore.bondCount[this.iAtom];
	      var iEnd = iStart + n;
	      return _.range(iStart, iEnd);
	    }
	  }, {
	    key: 'pos',
	    get: function get() {
	      this._pos.x = this.soup.atomStore.x[this.iAtom];
	      this._pos.y = this.soup.atomStore.y[this.iAtom];
	      this._pos.z = this.soup.atomStore.z[this.iAtom];
	      return this._pos;
	    }
	  }, {
	    key: 'resId',
	    get: function get() {
	      return this.soup.resIds[this.iRes];
	    }
	  }, {
	    key: 'elem',
	    get: function get() {
	      var iElem = this.soup.atomStore.iElem[this.iAtom];
	      return this.soup.elemTable[iElem];
	    }
	  }, {
	    key: 'bfactor',
	    get: function get() {
	      return this.soup.atomStore.bfactor[this.iAtom];
	    }
	  }, {
	    key: 'atomType',
	    get: function get() {
	      var iAtomType = this.soup.atomStore.iAtomType[this.iAtom];
	      return this.soup.atomTypeTable[iAtomType];
	    }
	  }, {
	    key: 'iRes',
	    get: function get() {
	      return this.soup.atomStore.iRes[this.iAtom];
	    }
	  }, {
	    key: 'resType',
	    get: function get() {
	      var iResType = this.soup.residueStore[this.iRes];
	      return this.soup.resTypeTable[iResType];
	    }
	  }, {
	    key: 'getResidue',
	    get: function get() {
	      return this.soup.getResidueProxy(this.iRes);
	    }
	  }, {
	    key: 'label',
	    get: function get() {
	      var res = this.soup.getResidueProxy(this.iRes);
	      return res.resId + ' - ' + this.atomType;
	    }
	  }]);
	
	  return AtomProxy;
	}();
	
	var residueStoreFields = [['atomOffset', 1, 'uint32'], ['atomCount', 1, 'uint16'], ['iCentralAtom', 1, 'uint32'], ['iResType', 1, 'uint16'], ['iChain', 1, 'uint8'], ['resno', 1, 'int32'], ['sstruc', 1, 'uint8'], ['inscode', 1, 'uint8'], ['iColor', 1, 'uint8'], ['isPolymer', 1, 'uint8'], ['isMesh', 1, 'uint8']];
	
	var ResidueProxy = function () {
	  function ResidueProxy(soup, iRes) {
	    _classCallCheck(this, ResidueProxy);
	
	    this.soup = soup;
	    if (Number.isInteger(iRes)) {
	      this.load(iRes);
	    }
	  }
	
	  _createClass(ResidueProxy, [{
	    key: 'load',
	    value: function load(iRes) {
	      this.iRes = iRes;
	      return this;
	    }
	  }, {
	    key: 'getAtomIndices',
	    value: function getAtomIndices() {
	      var iStart = this.soup.residueStore.atomOffset[this.iRes];
	      var n = this.soup.residueStore.atomCount[this.iRes];
	      var iEnd = iStart + n;
	      return _.range(iStart, iEnd);
	    }
	  }, {
	    key: 'getCentralAtomProxy',
	    value: function getCentralAtomProxy() {
	      return this.soup.getAtomProxy(this.iAtom);
	    }
	  }, {
	    key: 'getAtomProxy',
	    value: function getAtomProxy(atomType) {
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;
	
	      try {
	        for (var _iterator2 = this.getAtomIndices()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var iAtom = _step2.value;
	
	          var atom = this.soup.getAtomProxy(iAtom);
	          if (atom.atomType === atomType) {
	            return atom;
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }
	
	      return null;
	    }
	  }, {
	    key: 'checkAtomTypes',
	    value: function checkAtomTypes(atomTypes) {
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;
	
	      try {
	        for (var _iterator3 = atomTypes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var atomType = _step3.value;
	
	          var a = this.getAtomProxy(atomType);
	          if (a === null) {
	            return false;
	          }
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	
	      return true;
	    }
	  }, {
	    key: 'iAtom',
	    get: function get() {
	      return this.soup.residueStore.iCentralAtom[this.iRes];
	    },
	    set: function set(iAtom) {
	      this.soup.residueStore.iCentralAtom[this.iRes] = iAtom;
	    }
	  }, {
	    key: 'resId',
	    get: function get() {
	      return this.soup.resIds[this.iRes];
	    }
	  }, {
	    key: 'isPolymer',
	    get: function get() {
	      return intToBool(this.soup.residueStore.isPolymer[this.iRes]);
	    },
	    set: function set(v) {
	      this.soup.residueStore.isPolymer[this.iRes] = boolToInt(v);
	    }
	  }, {
	    key: 'color',
	    get: function get() {
	      var iColor = this.soup.residueStore.iColor[this.iRes];
	      return this.soup.colorTable[iColor];
	    },
	    set: function set(color) {
	      var iColor = getValueTableIndex(this.soup.colorTable, color);
	      this.soup.residueStore.iColor[this.iRes] = iColor;
	    }
	  }, {
	    key: 'selected',
	    get: function get() {
	      return this.soup.residueSelect.get(this.iRes);
	    },
	    set: function set(v) {
	      if (v) {
	        this.soup.residueSelect.set(this.iRes);
	      } else {
	        this.soup.residueSelect.clear(this.iRes);
	      }
	    }
	  }, {
	    key: 'isMesh',
	    get: function get() {
	      return intToBool(this.soup.residueStore.isMesh[this.iRes]);
	    },
	    set: function set(v) {
	      this.soup.residueStore.isMesh[this.iRes] = boolToInt(v);
	    }
	  }, {
	    key: 'resType',
	    get: function get() {
	      var iResType = this.soup.residueStore.iResType[this.iRes];
	      return this.soup.resTypeTable[iResType];
	    }
	  }, {
	    key: 'normal',
	    get: function get() {
	      var hasNormal = this.iRes in this.soup.residueNormal;
	      return hasNormal ? this.soup.residueNormal[this.iRes].clone() : null;
	    }
	  }, {
	    key: 'ss',
	    get: function get() {
	      return intToChar(this.soup.residueStore.sstruc[this.iRes]);
	    },
	    set: function set(c) {
	      this.soup.residueStore.sstruc[this.iRes] = charToInt(c);
	    }
	  }]);
	
	  return ResidueProxy;
	}();
	
	var bondStoreFields = [['iAtom1', 1, 'int32'], ['iAtom2', 1, 'int32']];
	
	var BondProxy = function () {
	  function BondProxy(soup, iBond) {
	    _classCallCheck(this, BondProxy);
	
	    this.soup = soup;
	    if (Number.isInteger(iBond)) {
	      this.load(iBond);
	    }
	  }
	
	  _createClass(BondProxy, [{
	    key: 'load',
	    value: function load(iBond) {
	      this.iBond = iBond;
	      return this;
	    }
	  }, {
	    key: 'iAtom1',
	    get: function get() {
	      return this.soup.bondStore.iAtom1[this.iBond];
	    }
	  }, {
	    key: 'iAtom2',
	    get: function get() {
	      return this.soup.bondStore.iAtom2[this.iBond];
	    }
	  }]);
	
	  return BondProxy;
	}();
	
	/**
	 * Soup
	 * -------
	 * The main data object that holds information
	 * about the soup. This object is responsible
	 * for reading the data from the PDB and turning
	 * it into a suitable javascript object.
	 *
	 * The soup will be embedded in a SoupView
	 * object that will handle all the different
	 * viewing options.
	 *
	 * Allowable actions on the SoupView of the Soup
	 * will be made via the Controller object. This
	 * includes AJAX operations with the server
	 * jolecule.appspot.com, and uses jQuery for the
	 * i/o operations with the server.
	 */
	
	
	var Soup = function () {
	  function Soup() {
	    _classCallCheck(this, Soup);
	
	    this.parsingError = '';
	    this.default_html = '';
	
	    this.atomStore = new _store2.default(atomStoreFields);
	    this.residueStore = new _store2.default(residueStoreFields);
	    this.bondStore = new _store2.default(bondStoreFields);
	
	    this.resIds = [];
	
	    this.atomProxy = new AtomProxy(this);
	    this.otherAtomProxy = new AtomProxy(this);
	    this.residueProxy = new ResidueProxy(this);
	    this.otherResidueProxy = new ResidueProxy(this);
	    this.bondProxy = new BondProxy(this);
	
	    this.atomSelect = new _bitarray2.default(0);
	    this.residueSelect = new _bitarray2.default(0);
	    this.bondSelect = new _bitarray2.default(0);
	
	    this.elemTable = [];
	    this.atomTypeTable = [];
	    this.resTypeTable = [];
	    this.colorTable = [];
	
	    this.residueNormal = {};
	    this.residueConhPartners = {};
	    this.residueNormals = {};
	
	    this.grid = {
	      bCutoff: 0.8,
	      bMax: 2,
	      bMin: 0.4,
	      changed: true,
	      isElem: {}
	    };
	  }
	
	  _createClass(Soup, [{
	    key: 'load',
	    value: function load(protein_data) {
	
	      this.pdb_id = protein_data['pdb_id'];
	
	      var title = parsetTitleFromPdbText(protein_data['pdb_text']);
	      this.default_html = this.pdb_id + ': ' + title;
	
	      console.log('Soup.load parse ' + this.pdb_id + '...');
	
	      this.makeAtomsFromPdbLines(protein_data['pdb_text'], this.pdb_id);
	
	      this.atomSelect = new _bitarray2.default(this.getAtomCount());
	      this.residueSelect = new _bitarray2.default(this.getResidueCount());
	
	      this.assignResidueSsAndCentralAtoms();
	
	      console.log('Soup.load processed ' + this.getAtomCount() + ' atoms, ' + (this.getResidueCount() + ' residues'));
	
	      console.log('Soup.load finding bonds...');
	      this.calcBonds();
	
	      console.log('Soup.load calculated ' + this.getBondCount() + ' bonds');
	
	      this.assignBondsToAtoms();
	
	      console.log('Soup.load assigned bonds to atoms');
	
	      this.calcMaxLength();
	
	      this.findSecondaryStructure();
	      console.log('Soup.load calculated secondary-structure');
	    }
	  }, {
	    key: 'makeAtomsFromPdbLines',
	    value: function makeAtomsFromPdbLines(pdbText, pdbId) {
	
	      var pdbLines = pdbText.split(/\r?\n/);
	
	      var lines = [];
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;
	
	      try {
	        for (var _iterator4 = pdbLines[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var _line = _step4.value;
	
	          if (_line.slice(0, 4) === 'ATOM' || _line.slice(0, 6) === 'HETATM') {
	            lines.push(_line);
	          }
	          if (_line.slice(0, 3) === 'END') {
	            break;
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }
	
	      if (lines.length === 0) {
	        this.parsingError = 'No atom lines';
	        return;
	      }
	
	      for (var iLine = 0; iLine < lines.length; iLine += 1) {
	        var line = lines[iLine];
	        if (line.substr(0, 4) === 'ATOM' || line.substr(0, 6) === 'HETATM') {
	          var x = void 0,
	              y = void 0,
	              z = void 0,
	              chain = void 0,
	              resNumIns = void 0,
	              resType = void 0,
	              atomType = void 0,
	              bfactor = void 0,
	              elem = void 0,
	              alt = void 0;
	          try {
	            atomType = _.trim(line.substr(12, 4));
	            alt = _.trim(line.substr(16, 1));
	            resType = _.trim(line.substr(17, 3));
	            chain = _.trim(line[21]);
	            resNumIns = _.trim(line.substr(22, 5));
	            x = parseFloat(line.substr(30, 7));
	            y = parseFloat(line.substr(38, 7));
	            z = parseFloat(line.substr(46, 7));
	            bfactor = parseFloat(line.substr(60, 6));
	            elem = deleteNumbers(_.trim(line.substr(76, 2)));
	          } catch (e) {
	            this.parsingError = 'line ' + iLine;
	            console.log('Error: "' + line + '"');
	            continue;
	          }
	
	          if (elem === '') {
	            elem = deleteNumbers(_.trim(atomType)).substr(0, 1);
	          }
	
	          var resId = '';
	          if (pdbId) {
	            resId += pdbId + ':';
	          }
	          if (chain) {
	            resId += chain + ':';
	          }
	          resId += resNumIns;
	
	          this.addAtom(x, y, z, bfactor, alt, atomType, elem, resType, resId);
	        }
	      }
	    }
	  }, {
	    key: 'addAtom',
	    value: function addAtom(x, y, z, bfactor, alt, atomType, elem, resType, resId) {
	
	      var iAtom = this.atomStore.count;
	
	      this.atomStore.increment();
	
	      this.atomStore.x[iAtom] = x;
	      this.atomStore.y[iAtom] = y;
	      this.atomStore.z[iAtom] = z;
	
	      this.atomStore.bfactor[iAtom] = bfactor;
	      this.atomStore.alt[iAtom] = charToInt(alt);
	
	      this.atomStore.bondCount[iAtom] = 0;
	
	      this.atomStore.iAtomType[iAtom] = getValueTableIndex(this.atomTypeTable, atomType);
	
	      this.atomStore.iElem[iAtom] = getValueTableIndex(this.elemTable, elem);
	
	      var nRes = this.getResidueCount();
	      var lastResId = nRes === 0 ? '' : this.resIds[nRes - 1];
	      if (resId !== lastResId) {
	        this.addResidue(iAtom, resId, resType);
	      }
	
	      var iRes = this.getResidueCount() - 1;
	
	      this.residueStore.atomCount[iRes] += 1;
	
	      this.atomStore.iRes[iAtom] = iRes;
	    }
	  }, {
	    key: 'addResidue',
	    value: function addResidue(iFirstAtomInRes, resId, resType) {
	      var iRes = this.getResidueCount();
	      this.residueStore.increment();
	
	      this.resIds.push(resId);
	
	      this.residueStore.iResType[iRes] = getValueTableIndex(this.resTypeTable, resType);
	
	      this.residueStore.atomOffset[iRes] = iFirstAtomInRes;
	      this.residueStore.atomCount[iRes] = 0;
	
	      this.residueStore.isMesh[iRes] = boolToInt(false);
	    }
	  }, {
	    key: 'getCentralAtomProxy',
	    value: function getCentralAtomProxy() {
	      var atomIndices = _.range(this.getAtomCount());
	      var center = this.getCenter(atomIndices);
	      var iAtom = this.getIAtomClosest(center, atomIndices);
	      return this.getAtomProxy(iAtom);
	    }
	  }, {
	    key: 'assignResidueSsAndCentralAtoms',
	    value: function assignResidueSsAndCentralAtoms() {
	      for (var iRes = 0; iRes < this.getResidueCount(); iRes += 1) {
	        var res = this.getResidueProxy(iRes);
	        var iAtom = void 0;
	        if (this.hasProteinBackbone(iRes)) {
	          iAtom = res.getAtomProxy('CA').iAtom;
	          res.ss = 'C';
	          res.isPolymer = true;
	        } else if (this.hasSugarBackbone(iRes)) {
	          iAtom = res.getAtomProxy('C3\'').iAtom;
	          res.ss = 'D';
	          res.isPolymer = true;
	        } else {
	          res.isPolymer = false;
	          if (res.resType === 'HOH') {
	            // water
	            res.ss = 'W';
	          } else if (res.resType === 'XXX') {
	            // grid atom
	            res.ss = 'G';
	          } else {
	            res.ss = '-';
	          }
	          var center = this.getCenter(res.getAtomIndices());
	          iAtom = this.getIAtomClosest(center, res.getAtomIndices());
	        }
	        res.iAtom = iAtom;
	      }
	    }
	  }, {
	    key: 'getIAtomClosest',
	    value: function getIAtomClosest(pos, atomIndices) {
	      var iAtomClosest = null;
	      var min_d = 1E6;
	      var _iteratorNormalCompletion5 = true;
	      var _didIteratorError5 = false;
	      var _iteratorError5 = undefined;
	
	      try {
	        for (var _iterator5 = atomIndices[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	          var iAtom = _step5.value;
	
	          if (iAtomClosest === null) {
	            iAtomClosest = iAtom;
	          } else {
	            var d = _v2.default.distance(pos, this.getAtomProxy(iAtom).pos);
	            if (d < min_d) {
	              iAtomClosest = iAtom;
	              min_d = d;
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError5 = true;
	        _iteratorError5 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion5 && _iterator5.return) {
	            _iterator5.return();
	          }
	        } finally {
	          if (_didIteratorError5) {
	            throw _iteratorError5;
	          }
	        }
	      }
	
	      return iAtomClosest;
	    }
	  }, {
	    key: 'getCenter',
	    value: function getCenter(atomIndices) {
	      var result = _v2.default.create(0, 0, 0);
	      var _iteratorNormalCompletion6 = true;
	      var _didIteratorError6 = false;
	      var _iteratorError6 = undefined;
	
	      try {
	        for (var _iterator6 = atomIndices[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	          var iAtom = _step6.value;
	
	          result = _v2.default.sum(result, this.getAtomProxy(iAtom).pos);
	        }
	      } catch (err) {
	        _didIteratorError6 = true;
	        _iteratorError6 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion6 && _iterator6.return) {
	            _iterator6.return();
	          }
	        } finally {
	          if (_didIteratorError6) {
	            throw _iteratorError6;
	          }
	        }
	      }
	
	      result.divideScalar(atomIndices.length);
	      return result;
	    }
	
	    /**
	     * TODO: replace with bounding box?
	     */
	
	  }, {
	    key: 'calcMaxLength',
	    value: function calcMaxLength() {
	      var maxima = [0.0, 0.0, 0.0];
	      var minima = [0.0, 0.0, 0.0];
	      var spans = [0.0, 0.0, 0.0];
	
	      function comp(v, i) {
	        if (i === 0) return v.x;
	        if (i === 1) return v.y;
	        if (i === 2) return v.z;
	      }
	
	      for (var iDim = 0; iDim < 3; iDim++) {
	        for (var iAtom = 0; iAtom < this.getAtomCount(); iAtom += 1) {
	          var pos = this.getAtomProxy(iAtom).pos;
	          if (minima[iDim] > comp(pos, iDim)) {
	            minima[iDim] = comp(pos, iDim);
	          }
	          if (maxima[iDim] < comp(pos, iDim)) {
	            maxima[iDim] = comp(pos, iDim);
	          }
	        }
	        spans[iDim] = maxima[iDim] - minima[iDim];
	      }
	      this.maxLength = Math.max(spans[0], spans[1], spans[2]);
	    }
	  }, {
	    key: 'calcBonds',
	    value: function calcBonds() {
	
	      this.bondStore.count = 0;
	
	      var small_cutoff = 1.2;
	      var medium_cutoff = 1.9;
	      var large_cutoff = 2.4;
	      var CHONPS = ['C', 'H', 'O', 'N', 'P', 'S'];
	
	      var vertices = [];
	      var nAtom = this.getAtomCount();
	      var a = this.getAtomProxy();
	      for (var iAtom = 0; iAtom < nAtom; iAtom += 1) {
	        a.load(iAtom);
	        vertices.push([a.pos.x, a.pos.y, a.pos.z]);
	      }
	
	      var spaceHash = new _pairs.SpaceHash(vertices);
	      var _iteratorNormalCompletion7 = true;
	      var _didIteratorError7 = false;
	      var _iteratorError7 = undefined;
	
	      try {
	        for (var _iterator7 = spaceHash.getClosePairs()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	          var pair = _step7.value;
	
	
	          var iAtom1 = pair[0];
	          var iAtom2 = pair[1];
	
	          if (iAtom1 === iAtom2) {
	            continue;
	          }
	
	          var atom1 = this.getAtomProxy(iAtom1);
	          var atom2 = this.getOtherAtomProxy(iAtom2);
	
	          // HACK: to avoid the water grid bond calculation
	          // step that kills the rendering
	          if (atom1.resType === 'XXX' || atom2.resType === 'XXX') {
	            continue;
	          }
	
	          if (atom1.alt !== '' && atom2.alt !== '') {
	            if (atom1.alt !== atom2.alt) {
	              continue;
	            }
	          }
	
	          var cutoff = void 0;
	          if (atom1.elem === 'H' || atom2.elem === 'H') {
	            cutoff = small_cutoff;
	          } else if ((0, _util.inArray)(atom1.elem, CHONPS) && (0, _util.inArray)(atom2.elem, CHONPS)) {
	            cutoff = medium_cutoff;
	          } else {
	            cutoff = large_cutoff;
	          }
	
	          if (_v2.default.distance(atom1.pos, atom2.pos) <= cutoff) {
	            var iBond = this.getBondCount();
	            this.bondStore.increment();
	            this.bondStore.iAtom1[iBond] = atom1.iAtom;
	            this.bondStore.iAtom2[iBond] = atom2.iAtom;
	
	            iBond = this.getBondCount();
	            this.bondStore.increment();
	            this.bondStore.iAtom1[iBond] = atom2.iAtom;
	            this.bondStore.iAtom2[iBond] = atom1.iAtom;
	          }
	        }
	      } catch (err) {
	        _didIteratorError7 = true;
	        _iteratorError7 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion7 && _iterator7.return) {
	            _iterator7.return();
	          }
	        } finally {
	          if (_didIteratorError7) {
	            throw _iteratorError7;
	          }
	        }
	      }
	
	      this.bondSelect = new _bitarray2.default(this.getBondCount());
	    }
	  }, {
	    key: 'assignBondsToAtoms',
	    value: function assignBondsToAtoms() {
	
	      var iAtom1Array = this.bondStore.iAtom1;
	      this.bondStore.sort(function (i, j) {
	        return iAtom1Array[i] - iAtom1Array[j];
	      });
	
	      for (var iAtom = 0; iAtom < this.getAtomCount(); iAtom += 1) {
	        this.atomStore.bondCount[iAtom] = 0;
	      }
	
	      var iAtom1 = null;
	      for (var iBond = 0; iBond < this.getBondCount(); iBond += 1) {
	        var bond = this.bondProxy.load(iBond);
	        if (iAtom1 !== bond.iAtom1) {
	          iAtom1 = bond.iAtom1;
	          this.atomStore.bondOffset[iAtom1] = iBond;
	        }
	        this.atomStore.bondCount[iAtom1] += 1;
	      }
	    }
	  }, {
	    key: 'hasProteinBackbone',
	    value: function hasProteinBackbone(iRes) {
	      return this.getResidueProxy(iRes).checkAtomTypes(['CA', 'N', 'C']);
	    }
	  }, {
	    key: 'hasSugarBackbone',
	    value: function hasSugarBackbone(iRes) {
	      return this.getResidueProxy(iRes).checkAtomTypes(['C3\'', 'O3\'', 'C5\'', 'O4\'', 'C1\'']);
	    }
	
	    /**
	     * Detect phosphate sugar bond
	     */
	
	  }, {
	    key: 'isSugarPhosphateConnected',
	    value: function isSugarPhosphateConnected(iRes0, iRes1) {
	      if (this.hasSugarBackbone(iRes0) && this.hasSugarBackbone(iRes1) && this.getResidueProxy(iRes1).checkAtomTypes(['P'])) {
	        var o3 = this.getResidueProxy(iRes0).getAtomProxy('O3\'').pos.clone();
	        var p = this.getResidueProxy(iRes1).getAtomProxy('P').pos.clone();
	        if (_v2.default.distance(o3, p) < 2.5) {
	          return true;
	        }
	      }
	      return false;
	    }
	
	    /**
	     * Detect peptide bond
	     * @returns {boolean}
	     */
	
	  }, {
	    key: 'isPeptideConnected',
	    value: function isPeptideConnected(iRes0, iRes1) {
	      if (this.hasProteinBackbone(iRes0) && this.hasProteinBackbone(iRes1)) {
	        var c = this.getResidueProxy(iRes0).getAtomProxy('C').pos.clone();
	        var n = this.getResidueProxy(iRes1).getAtomProxy('N').pos.clone();
	        if (_v2.default.distance(c, n) < 2) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: 'isPolymerConnected',
	    value: function isPolymerConnected(iRes0, iRes1) {
	      var peptideConnect = this.isPeptideConnected(iRes0, iRes1);
	      var nucleotideConnect = this.isSugarPhosphateConnected(iRes0, iRes1);
	      return peptideConnect || nucleotideConnect;
	    }
	  }, {
	    key: 'getNucleotideNormal',
	    value: function getNucleotideNormal(iRes) {
	      var c3 = this.getResidueProxy(iRes).getAtomProxy('C3\'').pos.clone();
	      var c5 = this.getResidueProxy(iRes).getAtomProxy('C5\'').pos.clone();
	      var c1 = this.getResidueProxy(iRes).getAtomProxy('C1\'').pos.clone();
	      var forward = _v2.default.diff(c3, c5);
	      var up = _v2.default.diff(c1, c3);
	      return _v2.default.crossProduct(forward, up);
	    }
	
	    /**
	     * Methods to calculate secondary-structure using Kabsch-Sanders
	     */
	
	    /**
	     * Find backbone hydrogen bonds
	     */
	
	  }, {
	    key: 'findBackboneHbonds',
	    value: function findBackboneHbonds() {
	      var vertices = [];
	      var atomIndices = [];
	      for (var iRes = 0; iRes < this.getResidueCount(); iRes += 1) {
	        var residue = this.getResidueProxy(iRes);
	        if (residue.isPolymer) {
	          var _arr = ['O', 'N'];
	
	          for (var _i = 0; _i < _arr.length; _i++) {
	            var aTypeName = _arr[_i];
	            var a = residue.getAtomProxy(aTypeName);
	            if (a !== null) {
	              vertices.push([a.pos.x, a.pos.y, a.pos.z]);
	              atomIndices.push(a.iAtom);
	            }
	          }
	        }
	      }
	
	      var cutoff = 3.5;
	      var spaceHash = new _pairs.SpaceHash(vertices);
	      var _iteratorNormalCompletion8 = true;
	      var _didIteratorError8 = false;
	      var _iteratorError8 = undefined;
	
	      try {
	        for (var _iterator8 = spaceHash.getClosePairs()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	          var pair = _step8.value;
	
	          var a0 = this.getAtomProxy(atomIndices[pair[0]]);
	          var a1 = this.getOtherAtomProxy(atomIndices[pair[1]]);
	          if (a0.elem === 'O' && a1.elem === 'N') {
	            var _ref = [a1, a0];
	            a0 = _ref[0];
	            a1 = _ref[1];
	          }
	          if (!(a0.elem === 'N' && a1.elem === 'O')) {
	            continue;
	          }
	          var iRes0 = a0.iRes;
	          var iRes1 = a1.iRes;
	          if (iRes0 === iRes1) {
	            continue;
	          }
	          if (_v2.default.distance(a0.pos, a1.pos) <= cutoff) {
	            pushToListInDict(this.residueConhPartners, iRes0, iRes1);
	          }
	        }
	      } catch (err) {
	        _didIteratorError8 = true;
	        _iteratorError8 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion8 && _iterator8.return) {
	            _iterator8.return();
	          }
	        } finally {
	          if (_didIteratorError8) {
	            throw _iteratorError8;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'isCONHBonded',
	    value: function isCONHBonded(iRes0, iRes1) {
	      var nRes = this.getResidueCount();
	      if (iRes1 < 0 || iRes1 >= nRes) {
	        return false;
	      }
	      if (iRes0 < 0 || iRes0 >= nRes) {
	        return false;
	      }
	      return _.includes(this.residueConhPartners[iRes1], iRes0);
	    }
	  }, {
	    key: 'vecBetweenResidues',
	    value: function vecBetweenResidues(iRes0, iRes1) {
	      var pos0 = this.getResidueProxy(iRes0).getCentralAtomProxy().pos.clone();
	      var pos1 = this.getResidueProxy(iRes1).getCentralAtomProxy().pos.clone();
	      return _v2.default.diff(pos0, pos1);
	    }
	
	    /**
	     * Find Secondary Structure:
	     * - H - alpha-helix/3-10-helix
	     * - E - beta-sheet
	     * - C - coil
	     * - - - ligand
	     * - W - water
	     * - D - DNA or RNA
	     * - R - non-standard nucleotide
	     */
	
	  }, {
	    key: 'findSecondaryStructure',
	    value: function findSecondaryStructure() {
	      var nRes = this.getResidueCount();
	
	      this.findBackboneHbonds();
	
	      for (var iRes1 = 0; iRes1 < nRes; iRes1 += 1) {
	
	        if (_.includes('DR', this.getResidueProxy(iRes1).ss)) {
	          pushToListInDict(this.residueNormals, iRes1, this.getNucleotideNormal(iRes1));
	        }
	
	        // alpha-helix
	        if (this.isCONHBonded(iRes1, iRes1 + 4) && this.isCONHBonded(iRes1 + 1, iRes1 + 5)) {
	          var normal1 = this.vecBetweenResidues(iRes1, iRes1 + 4);
	          var normal2 = this.vecBetweenResidues(iRes1 + 1, iRes1 + 5);
	          for (var iRes2 = iRes1 + 1; iRes2 < iRes1 + 5; iRes2 += 1) {
	            this.getResidueProxy(iRes2).ss = 'H';
	            pushToListInDict(this.residueNormals, iRes2, normal1);
	            pushToListInDict(this.residueNormals, iRes2, normal2);
	          }
	        }
	
	        // 3-10 helix
	        if (this.isCONHBonded(iRes1, iRes1 + 3) && this.isCONHBonded(iRes1 + 1, iRes1 + 4)) {
	          var _normal = this.vecBetweenResidues(iRes1, iRes1 + 3);
	          var _normal2 = this.vecBetweenResidues(iRes1 + 1, iRes1 + 4);
	          for (var _iRes = iRes1 + 1; _iRes < iRes1 + 4; _iRes += 1) {
	            this.getResidueProxy(_iRes).ss = 'H';
	            pushToListInDict(this.residueNormals, _iRes, _normal);
	            pushToListInDict(this.residueNormals, _iRes, _normal2);
	          }
	        }
	
	        for (var _iRes2 = iRes1 + 1; _iRes2 < nRes; _iRes2 += 1) {
	
	          if (Math.abs(iRes1 - _iRes2) <= 5) {
	            continue;
	          }
	
	          var betaResidueIndices = [];
	
	          // parallel beta sheet pairs
	          if (this.isCONHBonded(iRes1, _iRes2 + 1) && this.isCONHBonded(_iRes2 - 1, iRes1)) {
	            betaResidueIndices = betaResidueIndices.concat([iRes1, _iRes2]);
	          }
	          if (this.isCONHBonded(iRes1 - 1, _iRes2) && this.isCONHBonded(_iRes2, iRes1 + 1)) {
	            betaResidueIndices = betaResidueIndices.concat([iRes1, _iRes2]);
	          }
	
	          // anti-parallel hbonded beta sheet pairs
	          if (this.isCONHBonded(iRes1, _iRes2) && this.isCONHBonded(_iRes2, iRes1)) {
	            betaResidueIndices = betaResidueIndices.concat([iRes1, _iRes2]);
	            var normal = this.vecBetweenResidues(iRes1, _iRes2);
	            pushToListInDict(this.residueNormals, iRes1, normal);
	            pushToListInDict(this.residueNormals, _iRes2, _v2.default.scaled(normal, -1));
	          }
	
	          // anti-parallel non-hbonded beta sheet pairs
	          if (this.isCONHBonded(iRes1 - 1, _iRes2 + 1) && this.isCONHBonded(_iRes2 - 1, iRes1 + 1)) {
	            betaResidueIndices = betaResidueIndices.concat([iRes1, _iRes2]);
	            var _normal3 = this.vecBetweenResidues(iRes1, _iRes2);
	            pushToListInDict(this.residueNormals, iRes1, _v2.default.scaled(_normal3, -1));
	            pushToListInDict(this.residueNormals, _iRes2, _normal3);
	          }
	
	          var _iteratorNormalCompletion9 = true;
	          var _didIteratorError9 = false;
	          var _iteratorError9 = undefined;
	
	          try {
	            for (var _iterator9 = betaResidueIndices[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	              var iRes = _step9.value;
	
	              this.getResidueProxy(iRes).ss = 'E';
	            }
	          } catch (err) {
	            _didIteratorError9 = true;
	            _iteratorError9 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion9 && _iterator9.return) {
	                _iterator9.return();
	              }
	            } finally {
	              if (_didIteratorError9) {
	                throw _iteratorError9;
	              }
	            }
	          }
	        }
	      }
	
	      // average residueNormals to make a nice average
	      for (var _iRes3 = 0; _iRes3 < nRes; _iRes3 += 1) {
	        if (_iRes3 in this.residueNormals && this.residueNormals[_iRes3].length > 0) {
	          var normalSum = _v2.default.create(0, 0, 0);
	          var _iteratorNormalCompletion10 = true;
	          var _didIteratorError10 = false;
	          var _iteratorError10 = undefined;
	
	          try {
	            for (var _iterator10 = this.residueNormals[_iRes3][Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	              var _normal4 = _step10.value;
	
	              normalSum = _v2.default.sum(normalSum, _normal4);
	            }
	          } catch (err) {
	            _didIteratorError10 = true;
	            _iteratorError10 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion10 && _iterator10.return) {
	                _iterator10.return();
	              }
	            } finally {
	              if (_didIteratorError10) {
	                throw _iteratorError10;
	              }
	            }
	          }
	
	          this.residueNormal[_iRes3] = _v2.default.normalized(normalSum);
	        }
	      }
	
	      // flip every second beta-strand normal so they are
	      // consistently pointing in the same direction
	      for (var _iRes4 = 1; _iRes4 < nRes; _iRes4 += 1) {
	        var res = this.getResidueProxy(_iRes4 - 1);
	        var prevNormal = res.normal;
	        if (res.ss === 'E' && prevNormal) {
	          res = this.getResidueProxy(_iRes4);
	          if (res.ss === 'E' && res.normal) {
	            if (res.normal.dot(prevNormal) < 0) {
	              this.residueNormal[_iRes4].negate();
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'getAtomProxy',
	    value: function getAtomProxy(iAtom) {
	      return this.atomProxy.load(iAtom);
	    }
	  }, {
	    key: 'getOtherAtomProxy',
	    value: function getOtherAtomProxy(iAtom) {
	      return this.otherAtomProxy.load(iAtom);
	    }
	  }, {
	    key: 'getAtomCount',
	    value: function getAtomCount() {
	      return this.atomStore.count;
	    }
	  }, {
	    key: 'getResidueProxy',
	    value: function getResidueProxy(iRes) {
	      return this.residueProxy.load(iRes);
	    }
	  }, {
	    key: 'getBondCount',
	    value: function getBondCount() {
	      return this.bondStore.count;
	    }
	  }, {
	    key: 'getResidueCount',
	    value: function getResidueCount() {
	      return this.residueStore.count;
	    }
	  }, {
	    key: 'clearSelectedResidues',
	    value: function clearSelectedResidues() {
	      this.residueSelect.clearBits();
	    }
	  }, {
	    key: 'areCloseResidues',
	    value: function areCloseResidues(iRes0, iRes1) {
	      var res0 = this.getResidueProxy(iRes0);
	      var pos0 = this.getAtomProxy(res0.iAtom).pos.clone();
	      var atomIndices0 = res0.getAtomIndices();
	
	      var res1 = this.getResidueProxy(iRes1);
	      var pos1 = this.getAtomProxy(res1.iAtom).pos.clone();
	      var atomIndices1 = res1.getAtomIndices();
	
	      if (_v2.default.distance(pos0, pos1) > 17) {
	        return false;
	      }
	
	      var _iteratorNormalCompletion11 = true;
	      var _didIteratorError11 = false;
	      var _iteratorError11 = undefined;
	
	      try {
	        for (var _iterator11 = atomIndices0[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	          var iAtom0 = _step11.value;
	          var _iteratorNormalCompletion12 = true;
	          var _didIteratorError12 = false;
	          var _iteratorError12 = undefined;
	
	          try {
	            for (var _iterator12 = atomIndices1[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
	              var iAtom1 = _step12.value;
	
	              var _pos = this.getAtomProxy(iAtom0).pos.clone();
	              var _pos2 = this.getAtomProxy(iAtom1).pos.clone();
	              if (_v2.default.distance(_pos, _pos2) < 4) {
	                return true;
	              }
	            }
	          } catch (err) {
	            _didIteratorError12 = true;
	            _iteratorError12 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion12 && _iterator12.return) {
	                _iterator12.return();
	              }
	            } finally {
	              if (_didIteratorError12) {
	                throw _iteratorError12;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError11 = true;
	        _iteratorError11 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion11 && _iterator11.return) {
	            _iterator11.return();
	          }
	        } finally {
	          if (_didIteratorError11) {
	            throw _iteratorError11;
	          }
	        }
	      }
	
	      return false;
	    }
	  }, {
	    key: 'clearSelectedResidues',
	    value: function clearSelectedResidues() {
	      for (var iRes = 0; iRes < this.getResidueCount(); iRes += 1) {
	        this.getResidueProxy(iRes).selected = false;
	      }
	    }
	  }, {
	    key: 'selectResidues',
	    value: function selectResidues(residueIndices, select) {
	      var _iteratorNormalCompletion13 = true;
	      var _didIteratorError13 = false;
	      var _iteratorError13 = undefined;
	
	      try {
	        for (var _iterator13 = residueIndices[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
	          var iRes = _step13.value;
	
	          this.getResidueProxy(iRes).selected = select;
	        }
	      } catch (err) {
	        _didIteratorError13 = true;
	        _iteratorError13 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion13 && _iterator13.return) {
	            _iterator13.return();
	          }
	        } finally {
	          if (_didIteratorError13) {
	            throw _iteratorError13;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'selectNeighbourResidues',
	    value: function selectNeighbourResidues(iRes, selected) {
	      var indices = [iRes];
	      for (var jRes = 0; jRes < this.getResidueCount(); jRes += 1) {
	        if (this.areCloseResidues(jRes, iRes)) {
	          indices.push(jRes);
	        }
	      }
	      this.selectResidues(indices, selected);
	    }
	
	    /**
	     * Searches autodock grid atoms for B-factor limits
	     */
	
	  }, {
	    key: 'findGridLimits',
	    value: function findGridLimits() {
	      for (var iRes = 0; iRes < this.getResidueCount(); iRes += 1) {
	        var residue = this.getResidueProxy(iRes);
	        if (residue.ss === 'G') {
	          var atom = residue.getCentralAtomProxy();
	          if (!(atom.elem in this.grid.isElem)) {
	            this.grid.isElem[atom.elem] = true;
	          }
	          if (this.grid.bMin === null) {
	            this.grid.bMin = atom.bfactor;
	            this.grid.bMax = atom.bfactor;
	          } else {
	            if (atom.bfactor > this.grid.bMax) {
	              this.grid.bMax = atom.bfactor;
	            }
	            if (atom.bfactor < this.grid.bMin) {
	              this.grid.bMin = atom.bfactor;
	            }
	          }
	        }
	      }
	
	      if (this.grid.bMin === null) {
	        this.grid.bMin = 0;
	      }
	      if (this.grid.bMax === null) {
	        this.grid.bMin = 0;
	      }
	      this.grid.bCutoff = this.grid.bMin;
	    }
	  }]);
	
	  return Soup;
	}();
	
	/**
	 *
	 * View
	 * ----
	 * A view includes all pertinent viewing options
	 * needed to render the soup in the way
	 * for the user.
	 *
	 * JolyCamera stores information about
	 * the direction and zoom that a soup
	 * should be viewed
	 *
	 * Inside a view are two cameras as a camera is
	 * defined in terms of an existing frame of
	 * reference. The first camera refers to the
	 * current_view camera.
	 *
	 * The absolute camera is expressed with respect
	 * to the original frame of coordinate of the PDB.
	 *
	 * Converts JolyCamera to Target, the view structure for
	 * Display
	 *
	 * JolyCamera {
	 *    pos: soupView center, camera focus
	 *    up: gives the direction of the y vector from pos
	 *    in: gives the positive z-axis direction
	 *    zFront: clipping plane in front of the camera focus
	 *    zBack: clipping plane behind the camera focus
	 * }
	 *
	 * camera {
	 *    focus: position that camera is looking at
	 *    position: position of camera - distance away gives zoom
	 *    up: vector direction denoting the up direction of camera
	 *    zFront: clipping plane in front of the camera focus
	 *    zBack: clipping plane behind the camera focus
	 * }
	 *
	 * Coordinates
	 * - JolyCamera
	 *     - soupView is from 0 to positive z; since canvasjolecule draws +z into screen
	 *     - as opengl +z is out of screen, need to flip z direction
	 *     - in opengl, the box is -1 to 1 that gets projected on screen + perspective
	 *     - by adding a i distance to move the camera further into -z
	 *     - z_front and z_back define cutoffs
	 * - opengl:
	 *     - x right -> left
	 *     - y bottom -> top (inverse of classic 2D coordinate)
	 *     - z far -> near
	 *     - that is positive Z direction is out of the screen
	 *     - box -1to +1
	 */
	
	
	var View = function () {
	  function View() {
	    _classCallCheck(this, View);
	
	    this.id = 'view:000000';
	    this.res_id = '';
	    this.i_atom = -1;
	    this.order = 1;
	    this.camera = {
	      focus: _v2.default.create(0, 0, 0),
	      position: _v2.default.create(0, 0, -1),
	      up: _v2.default.create(0, 1, 0),
	      zFront: 0,
	      zBack: 0,
	      zoom: 1
	    };
	    this.selected = [];
	    this.labels = [];
	    this.distances = [];
	    this.text = 'Default view of PDB file';
	    this.creator = '';
	    this.url = (0, _util.getWindowUrl)();
	    this.show = {
	      sidechain: true,
	      peptide: true,
	      hydrogen: false,
	      water: false,
	      ligands: true,
	      trace: false,
	      all_atom: false,
	      ribbon: true
	    };
	  }
	
	  _createClass(View, [{
	    key: 'setCamera',
	    value: function setCamera(camera) {
	      this.camera = camera;
	    }
	  }, {
	    key: 'makeDefaultOfSoup',
	    value: function makeDefaultOfSoup(soup) {
	      var atom = soup.getCentralAtomProxy();
	      this.i_atom = atom.iAtom;
	      this.res_id = soup.resIds[atom.iRes];
	
	      this.show.sidechain = false;
	
	      this.camera.zFront = -soup.maxLength / 2;
	      this.camera.zBack = soup.maxLength / 2;
	      this.camera.zoom = Math.abs(soup.maxLength);
	      this.camera.up = _v2.default.create(0, 1, 0);
	      this.camera.focus.copy(atom.pos);
	      this.camera.position = _v2.default.create(0, 0, -this.camera.zoom).add(atom.pos);
	
	      this.order = 0;
	      this.text = soup.default_html;
	      this.pdb_id = soup.pdb_id;
	    }
	  }, {
	    key: 'getViewTranslatedTo',
	    value: function getViewTranslatedTo(pos) {
	      var view = this.clone();
	      var disp = pos.clone().sub(view.camera.focus);
	      view.camera.focus.copy(pos);
	      view.camera.position.add(disp);
	      return view;
	    }
	  }, {
	    key: 'clone',
	    value: function clone() {
	      var v = new View();
	      v.id = this.id;
	      v.res_id = this.res_id;
	      v.i_atom = this.i_atom;
	      v.selected = this.selected;
	      v.labels = _.cloneDeep(this.labels);
	      v.distances = _.cloneDeep(this.distances);
	      v.order = this.order;
	      v.text = this.text;
	      v.time = this.time;
	      v.url = this.url;
	      v.camera = _.cloneDeep(this.camera);
	      v.show = _.cloneDeep(this.show);
	      return v;
	    }
	  }, {
	    key: 'getDict',
	    value: function getDict() {
	      var cameraDir = this.camera.focus.clone().sub(this.camera.position);
	      var zoom = cameraDir.length();
	      cameraDir.normalize();
	      var pos = this.camera.focus;
	      var in_v = pos.clone().add(cameraDir);
	      var up_v = pos.clone().sub(this.camera.up);
	      return {
	        version: 2,
	        view_id: this.id,
	        creator: this.creator,
	        pdb_id: this.pdb_id,
	        order: this.order,
	        show: this.show,
	        text: this.text,
	        res_id: this.res_id,
	        i_atom: this.i_atom,
	        labels: this.labels,
	        selected: this.selected,
	        distances: this.distances,
	        camera: {
	          slab: {
	            z_front: this.camera.zFront,
	            z_back: this.camera.zBack,
	            zoom: zoom
	          },
	          pos: [pos.x, pos.y, pos.z],
	          up: [up_v.x, up_v.y, up_v.z],
	          in: [in_v.x, in_v.y, in_v.z]
	        }
	      };
	    }
	  }, {
	    key: 'setCameraFromJolyCamera',
	    value: function setCameraFromJolyCamera(jolyCamera) {
	      var focus = _v2.default.clone(jolyCamera.pos);
	
	      var cameraDirection = _v2.default.clone(jolyCamera.in_v).sub(focus).multiplyScalar(jolyCamera.zoom).negate();
	
	      var position = _v2.default.clone(focus).add(cameraDirection);
	
	      var up = _v2.default.clone(jolyCamera.up_v).sub(focus).negate();
	
	      this.camera = {
	        focus: focus,
	        position: position,
	        up: up,
	        zFront: jolyCamera.z_front,
	        zBack: jolyCamera.z_back,
	        zoom: jolyCamera.zoom
	      };
	    }
	  }, {
	    key: 'setFromDict',
	    value: function setFromDict(flat_dict) {
	      this.id = flat_dict.view_id;
	      this.view_id = flat_dict.view_id;
	      this.pdb_id = flat_dict.pdb_id;
	      this.lock = flat_dict.lock;
	      this.text = flat_dict.text;
	      this.creator = flat_dict.creator;
	      this.order = flat_dict.order;
	      this.res_id = flat_dict.res_id;
	      this.i_atom = flat_dict.i_atom;
	
	      this.labels = flat_dict.labels;
	      this.selected = flat_dict.selected;
	      this.distances = flat_dict.distances;
	
	      this.show = flat_dict.show;
	      if (!(this.show.all_atom || this.show.trace || this.show.ribbon)) {
	        this.show.ribbon = true;
	      }
	
	      var jolyCamera = {
	        pos: _v2.default.create(0, 0, 0),
	        up_v: _v2.default.create(0, 1, 0),
	        in_v: _v2.default.create(0, 0, 1),
	        zoom: 1.0,
	        z_front: 0.0,
	        z_back: 0.0
	      };
	      jolyCamera.pos.x = flat_dict.camera.pos[0];
	      jolyCamera.pos.y = flat_dict.camera.pos[1];
	      jolyCamera.pos.z = flat_dict.camera.pos[2];
	      jolyCamera.up_v.x = flat_dict.camera.up[0];
	      jolyCamera.up_v.y = flat_dict.camera.up[1];
	      jolyCamera.up_v.z = flat_dict.camera.up[2];
	      jolyCamera.in_v.x = flat_dict.camera.in[0];
	      jolyCamera.in_v.y = flat_dict.camera.in[1];
	      jolyCamera.in_v.z = flat_dict.camera.in[2];
	      jolyCamera.z_front = flat_dict.camera.slab.z_front;
	      jolyCamera.z_back = flat_dict.camera.slab.z_back;
	      jolyCamera.zoom = flat_dict.camera.slab.zoom;
	
	      this.setCameraFromJolyCamera(jolyCamera);
	    }
	  }]);
	
	  return View;
	}();
	
	function interpolateCameras(oldCamera, futureCamera, t) {
	
	  var oldCameraDirection = oldCamera.position.clone().sub(oldCamera.focus);
	  var oldZoom = oldCameraDirection.length();
	  oldCameraDirection.normalize();
	
	  var futureCameraDirection = futureCamera.position.clone().sub(futureCamera.focus);
	
	  var futureZoom = futureCameraDirection.length();
	  futureCameraDirection.normalize();
	
	  var cameraDirRotation = glgeom.getUnitVectorRotation(oldCameraDirection, futureCameraDirection);
	
	  var partialRotatedCameraUp = oldCamera.up.clone().applyQuaternion(cameraDirRotation);
	
	  var fullCameraUpRotation = glgeom.getUnitVectorRotation(partialRotatedCameraUp, futureCamera.up).multiply(cameraDirRotation);
	  var cameraUpRotation = glgeom.getFractionRotation(fullCameraUpRotation, t);
	
	  var focusDisp = futureCamera.focus.clone().sub(oldCamera.focus).multiplyScalar(t);
	
	  var focus = oldCamera.focus.clone().add(focusDisp);
	
	  var zoom = glgeom.fraction(oldZoom, futureZoom, t);
	
	  var focusToPosition = oldCameraDirection.clone().applyQuaternion(cameraUpRotation).multiplyScalar(zoom);
	
	  return {
	    focus: focus,
	    position: focus.clone().add(focusToPosition),
	    up: oldCamera.up.clone().applyQuaternion(cameraUpRotation),
	    zFront: glgeom.fraction(oldCamera.zFront, futureCamera.zFront, t),
	    zBack: glgeom.fraction(oldCamera.zBack, futureCamera.zBack, t),
	    zoom: zoom
	  };
	}
	
	/**
	 * The SoupView contains a soup and a list of
	 * views of the soup, including the current
	 * view, and a target view for animation
	 */
	
	var SoupView = function () {
	  function SoupView(soup) {
	    _classCallCheck(this, SoupView);
	
	    // the soup data for the soupView
	    this.soup = soup;
	
	    // stores the current camera, display
	    // options, distances, labels, selected
	    // residues
	    this.current_view = new View();
	
	    // stores other views that can be reloaded
	    this.saved_views_by_id = {};
	    this.saved_views = [];
	    this.i_last_view = 0;
	
	    // stores a target view for animation
	    this.target_view = null;
	    // timing counter that is continually decremented
	    // until it becomes negative
	    this.n_update_step = -1;
	    // this is to set the time between transitions of views
	    this.max_update_step = 20;
	
	    this.updateSelection = false;
	  }
	
	  _createClass(SoupView, [{
	    key: 'set_target_view',
	    value: function set_target_view(view) {
	      this.n_update_step = this.max_update_step;
	      this.target_view = view.clone();
	    }
	  }, {
	    key: 'centered_atom',
	    value: function centered_atom() {
	      var i = this.current_view.i_atom;
	      return this.soup.getAtomProxy(i);
	    }
	  }, {
	    key: 'get_i_saved_view_from_id',
	    value: function get_i_saved_view_from_id(id) {
	      for (var j = 0; j < this.saved_views.length; j += 1) {
	        if (this.saved_views[j].id === id) {
	          return j;
	        }
	      }
	      return -1;
	    }
	  }, {
	    key: 'insert_view',
	    value: function insert_view(j, new_id, new_view) {
	      this.saved_views_by_id[new_id] = new_view;
	      if (j >= this.saved_views.length) {
	        this.saved_views.push(new_view);
	      } else {
	        this.saved_views.splice(j, 0, new_view);
	      }
	      this.i_last_view = j;
	      for (var i = 0; i < this.saved_views.length; i++) {
	        this.saved_views[i].order = i;
	      }
	    }
	  }, {
	    key: 'remove_saved_view',
	    value: function remove_saved_view(id) {
	      var i = this.get_i_saved_view_from_id(id);
	      if (i < 0) {
	        return;
	      }
	      this.saved_views.splice(i, 1);
	      delete this.saved_views_by_id[id];
	      for (var j = 0; j < this.saved_views.length; j++) {
	        this.saved_views[j].order = j;
	      }
	      if (this.i_last_view >= this.saved_views.length) {
	        this.i_last_view = this.saved_views.length - 1;
	      }
	      this.changed = true;
	    }
	  }, {
	    key: 'save_view',
	    value: function save_view(view) {
	      this.saved_views_by_id[view.id] = view;
	      this.saved_views.push(view);
	    }
	  }]);
	
	  return SoupView;
	}();
	
	/**
	 * The Controller for SoupView. All mutations
	 * to a Soup and its Views go through here.
	 */
	
	
	var Controller = function () {
	  function Controller(scene) {
	    _classCallCheck(this, Controller);
	
	    this.soup = scene.soup;
	    this.soupView = scene;
	  }
	
	  _createClass(Controller, [{
	    key: 'delete_dist',
	    value: function delete_dist(i) {
	      this.soupView.current_view.distances.splice(i, 1);
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'make_dist',
	    value: function make_dist(iAtom1, iAtom2) {
	      this.soupView.current_view.distances.push({ 'i_atom1': iAtom1, 'i_atom2': iAtom2 });
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'make_label',
	    value: function make_label(iAtom, text) {
	      this.soupView.current_view.labels.push({
	        'i_atom': iAtom, 'text': text
	      });
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'delete_label',
	    value: function delete_label(iLabel) {
	      this.soupView.current_view.labels.splice(iLabel, 1);
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'set_target_view',
	    value: function set_target_view(view) {
	      this.soupView.set_target_view(view);
	    }
	  }, {
	    key: 'set_target_view_by_id',
	    value: function set_target_view_by_id(viewId) {
	      var view = this.soupView.saved_views_by_id[viewId];
	      this.soupView.i_last_view = this.soupView.saved_views_by_id[viewId].order;
	      this.set_target_view(view);
	    }
	  }, {
	    key: 'set_target_view_by_atom',
	    value: function set_target_view_by_atom(iAtom) {
	      var atom = this.soup.getAtomProxy(iAtom);
	      var view = this.soupView.current_view.getViewTranslatedTo(atom.pos);
	      view.res_id = this.soup.getResidueProxy(atom.iRes).id;
	      view.i_atom = iAtom;
	      this.set_target_view(view);
	    }
	  }, {
	    key: 'set_target_prev_residue',
	    value: function set_target_prev_residue() {
	      var curr_res_id = void 0;
	      if (this.soupView.n_update_step >= 0) {
	        curr_res_id = this.soupView.target_view.res_id;
	      } else {
	        curr_res_id = this.soupView.current_view.res_id;
	      }
	      var iAtom = this.soupView.current_view.i_atom;
	      var iRes = this.soup.getAtomProxy(iAtom).iRes;
	      if (iRes <= 0) {
	        iRes = this.soup.getResidueCount() - 1;
	      } else {
	        iRes -= 1;
	      }
	      iAtom = this.soup.getResidueProxy(iRes).iAtom;
	      this.set_target_view_by_atom(iAtom);
	    }
	  }, {
	    key: 'set_target_next_residue',
	    value: function set_target_next_residue() {
	      var curr_res_id = void 0;
	      if (this.soupView.n_update_step >= 0) {
	        curr_res_id = this.soupView.target_view.res_id;
	      } else {
	        curr_res_id = this.soupView.current_view.res_id;
	      }
	      var iAtom = this.soupView.current_view.i_atom;
	      var iRes = this.soup.getAtomProxy(iAtom).iRes;
	      if (iRes >= this.soup.getResidueCount() - 1) {
	        iRes = 0;
	      } else {
	        iRes += 1;
	      }
	      iAtom = this.soup.getResidueProxy(iRes).iAtom;
	      this.set_target_view_by_atom(iAtom);
	    }
	  }, {
	    key: 'set_target_prev_view',
	    value: function set_target_prev_view() {
	      var scene = this.soupView;
	      scene.i_last_view -= 1;
	      if (scene.i_last_view < 0) {
	        scene.i_last_view = scene.saved_views.length - 1;
	      }
	      var id = scene.saved_views[scene.i_last_view].id;
	      this.set_target_view_by_id(id);
	      return id;
	    }
	  }, {
	    key: 'set_target_next_view',
	    value: function set_target_next_view() {
	      var scene = this.soupView;
	      scene.i_last_view += 1;
	      if (scene.i_last_view >= scene.saved_views.length) {
	        scene.i_last_view = 0;
	      }
	      var id = scene.saved_views[scene.i_last_view].id;
	      this.set_target_view_by_id(id);
	      return id;
	    }
	  }, {
	    key: 'swapViews',
	    value: function swapViews(i, j) {
	      this.soupView.saved_views[j].order = i;
	      this.soupView.saved_views[i].order = j;
	      var dummy = this.soupView.saved_views[j];
	      this.soupView.saved_views[j] = this.soupView.saved_views[i];
	      this.soupView.saved_views[i] = dummy;
	    }
	  }, {
	    key: 'get_view_dicts',
	    value: function get_view_dicts() {
	      var view_dicts = [];
	      for (var i = 1; i < this.soupView.saved_views.length; i += 1) {
	        view_dicts.push(this.soupView.saved_views[i].getDict());
	      }
	      return view_dicts;
	    }
	  }, {
	    key: 'make_selected',
	    value: function make_selected() {
	      var result = [];
	      for (var i = 0; i < this.soup.getResidueCount(); i += 1) {
	        if (this.soup.getResidueProxy(i).selected) {
	          result.push(i);
	        }
	      }
	      return result;
	    }
	  }, {
	    key: 'clear_selected',
	    value: function clear_selected() {
	      this.soup.clearSelectedResidues();
	      this.soupView.current_view.selected = this.make_selected();
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'select_residue',
	    value: function select_residue(i, v) {
	      this.soup.getResidueProxy(i).selected = v;
	      this.soupView.current_view.selected = this.make_selected();
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'toggle_neighbors',
	    value: function toggle_neighbors() {
	      var res_id = this.soupView.current_view.res_id;
	      var iAtom = this.soupView.current_view.i_atom;
	      var i_res = this.soup.getAtomProxy(iAtom).iRes;
	      var b = void 0;
	      if (this.last_neighbour_res_id === res_id) {
	        b = false;
	        this.last_neighbour_res_id = null;
	      } else {
	        b = true;
	        this.last_neighbour_res_id = res_id;
	      }
	      this.soup.selectNeighbourResidues(i_res, b);
	      this.soupView.current_view.selected = this.make_selected();
	      this.soupView.changed = true;
	      this.soupView.updateSelection = true;
	    }
	  }, {
	    key: 'save_current_view',
	    value: function save_current_view(new_id) {
	      var j = this.soupView.i_last_view + 1;
	      var new_view = this.soupView.current_view.clone();
	      new_view.text = 'Click edit to change this text.';
	      new_view.pdb_id = this.soup.pdb_id;
	      var time = (0, _util.getCurrentDateStr)();
	      if (user === '' || typeof user === 'undefined') {
	        new_view.creator = '~ [public] @' + time;
	      } else {
	        new_view.creator = '~ ' + user + ' @' + time;
	      }
	      new_view.id = new_id;
	      new_view.selected = this.make_selected();
	      this.soupView.insert_view(j, new_id, new_view);
	      return j;
	    }
	  }, {
	    key: 'delete_view',
	    value: function delete_view(id) {
	      this.soupView.remove_saved_view(id);
	    }
	  }, {
	    key: 'sort_views_by_order',
	    value: function sort_views_by_order() {
	      function order_sort(a, b) {
	        return a.order - b.order;
	      }
	
	      this.soupView.saved_views.sort(order_sort);
	      for (var i = 0; i < this.soupView.saved_views.length; i += 1) {
	        this.soupView.saved_views[i].order = i;
	      }
	    }
	  }, {
	    key: 'load_views_from_flat_views',
	    value: function load_views_from_flat_views(view_dicts) {
	      for (var i = 0; i < view_dicts.length; i += 1) {
	        var view = new View();
	        view.setFromDict(view_dicts[i]);
	        if (view.id === 'view:000000') {
	          continue;
	        }
	        this.soupView.save_view(view);
	      }
	      this.sort_views_by_order();
	    }
	  }, {
	    key: 'set_backbone_option',
	    value: function set_backbone_option(option) {
	      this.soupView.current_view.show.all_atom = false;
	      this.soupView.current_view.show.trace = false;
	      this.soupView.current_view.show.ribbon = false;
	      this.soupView.current_view.show[option] = true;
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'set_show_option',
	    value: function set_show_option(option, bool) {
	      console.log('Controller.set_show_option', option, bool);
	      this.soupView.current_view.show[option] = bool;
	      if (option === 'sidechain') {
	        this.soupView.updateSelection = true;
	      }
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'get_show_option',
	    value: function get_show_option(option) {
	      return this.soupView.current_view.show[option];
	    }
	  }, {
	    key: 'toggle_show_option',
	    value: function toggle_show_option(option) {
	      var val = this.get_show_option(option);
	      this.set_show_option(option, !val);
	    }
	  }, {
	    key: 'flag_changed',
	    value: function flag_changed() {
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'set_current_view',
	    value: function set_current_view(view) {
	      this.soupView.current_view = view.clone();
	      var atom = this.soup.getAtomProxy(view.i_atom);
	      this.soupView.current_view.res_id = this.soup.resIds[atom.iRes];
	      this.soupView.soup.clearSelectedResidues();
	      this.soupView.soup.selectResidues(view.selected, true);
	      this.soupView.changed = true;
	    }
	  }]);
	
	  return Controller;
	}();
	
	exports.Soup = Soup;
	exports.Controller = Controller;
	exports.interpolateCameras = interpolateCameras;
	exports.SoupView = SoupView;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _three = __webpack_require__(8);
	
	var THREE = _interopRequireWildcard(_three);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	var SMALL = 1E-6;
	
	/**
	 * 
	 * v3.js - is a simple function based wrapper library around the vector
	 * portion of THREE.js. THREE.Vector3 are created and manipulated using
	 * factory functions, which was the original approach used in a deprecated
	 * vector library. This was replaced with the fully-featured vector library
	 * in THREE.js
	 * 
	 */
	
	function isNearZero(a) {
	  return Math.abs(a) < SMALL;
	}
	
	function create(x, y, z) {
	  return new THREE.Vector3(x, y, z);
	}
	
	function clone(v) {
	  return v.clone();
	}
	
	function scaled(v, s) {
	  var w = create(v.x, v.y, v.z);
	  w.multiplyScalar(s);
	  return w;
	}
	
	function normalized(v) {
	  return scaled(v, 1.0 / v.length());
	}
	
	function diff(b, a) {
	  return create(b.x - a.x, b.y - a.y, b.z - a.z);
	}
	
	function sum(a, b) {
	  return create(b.x + a.x, b.y + a.y, b.z + a.z);
	}
	
	function parallel(v, axis) {
	  var axis_len = axis.length();
	  var result = void 0;
	  if (isNearZero(axis_len)) {
	    result = create(v.x, v.y, v.z);
	  } else {
	    var scale = dot_product(v, axis) / axis_len / axis_len;
	    result = scaled(axis, scale);
	  }
	  return result;
	}
	
	function perpendicular(v, axis) {
	  return diff(v, parallel(v, axis));
	}
	
	function crossProduct(a, b) {
	  return new THREE.Vector3().crossVectors(a, b);
	}
	
	function dot_product(a, b) {
	  return a.x * b.x + a.y * b.y + a.z * b.z;
	}
	
	function distance(p1, p2) {
	  return diff(p1, p2).length();
	}
	
	function angle(a, b) {
	  var a_len = a.length();
	  var b_len = b.length();
	  if (isNearZero(a_len * b_len)) {
	    return 0.0;
	  }
	  var c = dot_product(a, b) / a_len / b_len;
	  if (c >= 1.0) {
	    return 0.0;
	  }
	  if (c < -1.0) {
	    return Math.PI;
	  }
	  return Math.acos(c);
	}
	
	function dihedral(ref, axis, v) {
	  // + values: right-hand screw rotation of v
	  //           around axis relative to ref
	  var ref_perp = perpendicular(ref, axis);
	  var v_perp = perpendicular(v, axis);
	  var a = angle(ref_perp, v_perp);
	  var cross = crossProduct(ref_perp, v_perp);
	  if (dot_product(cross, axis) > 0) {
	    a = -a;
	  }
	  return a;
	}
	
	function midPoint(p, q) {
	  var s = sum(p, q);
	  return scaled(s, 0.5);
	}
	
	function random() {
	  return create(Math.random(), Math.random(), Math.random());
	}
	
	function isEqual(v, w) {
	  if (!isNearZero(v.x - w.x)) {
	    return false;
	  } else if (!isNearZero(v.y - w.y)) {
	    return false;
	  } else if (!isNearZero(v.y - w.y)) {
	    return false;
	  }
	  return true;
	}
	
	function isAligned(v, w) {
	  return isNearZero(angle(v, w));
	}
	
	var Matrix4 = THREE.Matrix4;
	
	function matrixProduct(lhs, rhs) {
	  var c = new Matrix4();
	  c.multiplyMatrices(lhs, rhs);
	  return c;
	}
	
	function rotation(axis, theta) {
	  var a = axis.clone().normalize();
	  return new Matrix4().makeRotationAxis(a, theta);
	}
	
	function translation(p) {
	  var c = new Matrix4();
	  return c.makeTranslation(p.x, p.y, p.z);
	}
	
	function degToRad(deg) {
	  return deg * Math.PI / 180.0;
	}
	
	exports.default = {
	  SMALL: SMALL,
	  isNearZero: isNearZero,
	  create: create,
	  clone: clone,
	  scaled: scaled,
	  normalized: normalized,
	  diff: diff,
	  sum: sum,
	  parallel: parallel,
	  perpendicular: perpendicular,
	  crossProduct: crossProduct,
	  dot_product: dot_product,
	  distance: distance,
	  angle: angle,
	  dihedral: dihedral,
	  midPoint: midPoint,
	  random: random,
	  isEqual: isEqual,
	  isAligned: isAligned,
	  Matrix4: Matrix4,
	  matrixProduct: matrixProduct,
	  rotation: rotation,
	  translation: translation,
	  degToRad: degToRad
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.THREE = global.THREE || {})));
	}(this, (function (exports) { 'use strict';
	
		// Polyfills
	
		if ( Number.EPSILON === undefined ) {
	
			Number.EPSILON = Math.pow( 2, - 52 );
	
		}
	
		if ( Number.isInteger === undefined ) {
	
			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
	
			Number.isInteger = function ( value ) {
	
				return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;
	
			};
	
		}
	
		//
	
		if ( Math.sign === undefined ) {
	
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
	
			Math.sign = function ( x ) {
	
				return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;
	
			};
	
		}
	
		if ( 'name' in Function.prototype === false ) {
	
			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
	
			Object.defineProperty( Function.prototype, 'name', {
	
				get: function () {
	
					return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];
	
				}
	
			} );
	
		}
	
		if ( Object.assign === undefined ) {
	
			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	
			( function () {
	
				Object.assign = function ( target ) {
	
					'use strict';
	
					if ( target === undefined || target === null ) {
	
						throw new TypeError( 'Cannot convert undefined or null to object' );
	
					}
	
					var output = Object( target );
	
					for ( var index = 1; index < arguments.length; index ++ ) {
	
						var source = arguments[ index ];
	
						if ( source !== undefined && source !== null ) {
	
							for ( var nextKey in source ) {
	
								if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {
	
									output[ nextKey ] = source[ nextKey ];
	
								}
	
							}
	
						}
	
					}
	
					return output;
	
				};
	
			} )();
	
		}
	
		/**
		 * https://github.com/mrdoob/eventdispatcher.js/
		 */
	
		function EventDispatcher() {}
	
		Object.assign( EventDispatcher.prototype, {
	
			addEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) this._listeners = {};
	
				var listeners = this._listeners;
	
				if ( listeners[ type ] === undefined ) {
	
					listeners[ type ] = [];
	
				}
	
				if ( listeners[ type ].indexOf( listener ) === - 1 ) {
	
					listeners[ type ].push( listener );
	
				}
	
			},
	
			hasEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) return false;
	
				var listeners = this._listeners;
	
				return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;
	
			},
	
			removeEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) return;
	
				var listeners = this._listeners;
				var listenerArray = listeners[ type ];
	
				if ( listenerArray !== undefined ) {
	
					var index = listenerArray.indexOf( listener );
	
					if ( index !== - 1 ) {
	
						listenerArray.splice( index, 1 );
	
					}
	
				}
	
			},
	
			dispatchEvent: function ( event ) {
	
				if ( this._listeners === undefined ) return;
	
				var listeners = this._listeners;
				var listenerArray = listeners[ event.type ];
	
				if ( listenerArray !== undefined ) {
	
					event.target = this;
	
					var array = listenerArray.slice( 0 );
	
					for ( var i = 0, l = array.length; i < l; i ++ ) {
	
						array[ i ].call( this, event );
	
					}
	
				}
	
			}
	
		} );
	
		var REVISION = '88';
		var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
		var CullFaceNone = 0;
		var CullFaceBack = 1;
		var CullFaceFront = 2;
		var CullFaceFrontBack = 3;
		var FrontFaceDirectionCW = 0;
		var FrontFaceDirectionCCW = 1;
		var BasicShadowMap = 0;
		var PCFShadowMap = 1;
		var PCFSoftShadowMap = 2;
		var FrontSide = 0;
		var BackSide = 1;
		var DoubleSide = 2;
		var FlatShading = 1;
		var SmoothShading = 2;
		var NoColors = 0;
		var FaceColors = 1;
		var VertexColors = 2;
		var NoBlending = 0;
		var NormalBlending = 1;
		var AdditiveBlending = 2;
		var SubtractiveBlending = 3;
		var MultiplyBlending = 4;
		var CustomBlending = 5;
		var AddEquation = 100;
		var SubtractEquation = 101;
		var ReverseSubtractEquation = 102;
		var MinEquation = 103;
		var MaxEquation = 104;
		var ZeroFactor = 200;
		var OneFactor = 201;
		var SrcColorFactor = 202;
		var OneMinusSrcColorFactor = 203;
		var SrcAlphaFactor = 204;
		var OneMinusSrcAlphaFactor = 205;
		var DstAlphaFactor = 206;
		var OneMinusDstAlphaFactor = 207;
		var DstColorFactor = 208;
		var OneMinusDstColorFactor = 209;
		var SrcAlphaSaturateFactor = 210;
		var NeverDepth = 0;
		var AlwaysDepth = 1;
		var LessDepth = 2;
		var LessEqualDepth = 3;
		var EqualDepth = 4;
		var GreaterEqualDepth = 5;
		var GreaterDepth = 6;
		var NotEqualDepth = 7;
		var MultiplyOperation = 0;
		var MixOperation = 1;
		var AddOperation = 2;
		var NoToneMapping = 0;
		var LinearToneMapping = 1;
		var ReinhardToneMapping = 2;
		var Uncharted2ToneMapping = 3;
		var CineonToneMapping = 4;
		var UVMapping = 300;
		var CubeReflectionMapping = 301;
		var CubeRefractionMapping = 302;
		var EquirectangularReflectionMapping = 303;
		var EquirectangularRefractionMapping = 304;
		var SphericalReflectionMapping = 305;
		var CubeUVReflectionMapping = 306;
		var CubeUVRefractionMapping = 307;
		var RepeatWrapping = 1000;
		var ClampToEdgeWrapping = 1001;
		var MirroredRepeatWrapping = 1002;
		var NearestFilter = 1003;
		var NearestMipMapNearestFilter = 1004;
		var NearestMipMapLinearFilter = 1005;
		var LinearFilter = 1006;
		var LinearMipMapNearestFilter = 1007;
		var LinearMipMapLinearFilter = 1008;
		var UnsignedByteType = 1009;
		var ByteType = 1010;
		var ShortType = 1011;
		var UnsignedShortType = 1012;
		var IntType = 1013;
		var UnsignedIntType = 1014;
		var FloatType = 1015;
		var HalfFloatType = 1016;
		var UnsignedShort4444Type = 1017;
		var UnsignedShort5551Type = 1018;
		var UnsignedShort565Type = 1019;
		var UnsignedInt248Type = 1020;
		var AlphaFormat = 1021;
		var RGBFormat = 1022;
		var RGBAFormat = 1023;
		var LuminanceFormat = 1024;
		var LuminanceAlphaFormat = 1025;
		var RGBEFormat = RGBAFormat;
		var DepthFormat = 1026;
		var DepthStencilFormat = 1027;
		var RGB_S3TC_DXT1_Format = 2001;
		var RGBA_S3TC_DXT1_Format = 2002;
		var RGBA_S3TC_DXT3_Format = 2003;
		var RGBA_S3TC_DXT5_Format = 2004;
		var RGB_PVRTC_4BPPV1_Format = 2100;
		var RGB_PVRTC_2BPPV1_Format = 2101;
		var RGBA_PVRTC_4BPPV1_Format = 2102;
		var RGBA_PVRTC_2BPPV1_Format = 2103;
		var RGB_ETC1_Format = 2151;
		var LoopOnce = 2200;
		var LoopRepeat = 2201;
		var LoopPingPong = 2202;
		var InterpolateDiscrete = 2300;
		var InterpolateLinear = 2301;
		var InterpolateSmooth = 2302;
		var ZeroCurvatureEnding = 2400;
		var ZeroSlopeEnding = 2401;
		var WrapAroundEnding = 2402;
		var TrianglesDrawMode = 0;
		var TriangleStripDrawMode = 1;
		var TriangleFanDrawMode = 2;
		var LinearEncoding = 3000;
		var sRGBEncoding = 3001;
		var GammaEncoding = 3007;
		var RGBEEncoding = 3002;
		var LogLuvEncoding = 3003;
		var RGBM7Encoding = 3004;
		var RGBM16Encoding = 3005;
		var RGBDEncoding = 3006;
		var BasicDepthPacking = 3200;
		var RGBADepthPacking = 3201;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _Math = {
	
			DEG2RAD: Math.PI / 180,
			RAD2DEG: 180 / Math.PI,
	
			generateUUID: function () {
	
				// http://www.broofa.com/Tools/Math.uuid.htm
				// Replaced .join with string concatenation (@takahirox)
	
				var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
				var rnd = 0, r;
	
				return function generateUUID() {
	
					var uuid = '';
	
					for ( var i = 0; i < 36; i ++ ) {
	
						if ( i === 8 || i === 13 || i === 18 || i === 23 ) {
	
							uuid += '-';
	
						} else if ( i === 14 ) {
	
							uuid += '4';
	
						} else {
	
							if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
							r = rnd & 0xf;
							rnd = rnd >> 4;
							uuid += chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];
	
						}
	
					}
	
					return uuid;
	
				};
	
			}(),
	
			clamp: function ( value, min, max ) {
	
				return Math.max( min, Math.min( max, value ) );
	
			},
	
			// compute euclidian modulo of m % n
			// https://en.wikipedia.org/wiki/Modulo_operation
	
			euclideanModulo: function ( n, m ) {
	
				return ( ( n % m ) + m ) % m;
	
			},
	
			// Linear mapping from range <a1, a2> to range <b1, b2>
	
			mapLinear: function ( x, a1, a2, b1, b2 ) {
	
				return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
	
			},
	
			// https://en.wikipedia.org/wiki/Linear_interpolation
	
			lerp: function ( x, y, t ) {
	
				return ( 1 - t ) * x + t * y;
	
			},
	
			// http://en.wikipedia.org/wiki/Smoothstep
	
			smoothstep: function ( x, min, max ) {
	
				if ( x <= min ) return 0;
				if ( x >= max ) return 1;
	
				x = ( x - min ) / ( max - min );
	
				return x * x * ( 3 - 2 * x );
	
			},
	
			smootherstep: function ( x, min, max ) {
	
				if ( x <= min ) return 0;
				if ( x >= max ) return 1;
	
				x = ( x - min ) / ( max - min );
	
				return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
	
			},
	
			// Random integer from <low, high> interval
	
			randInt: function ( low, high ) {
	
				return low + Math.floor( Math.random() * ( high - low + 1 ) );
	
			},
	
			// Random float from <low, high> interval
	
			randFloat: function ( low, high ) {
	
				return low + Math.random() * ( high - low );
	
			},
	
			// Random float from <-range/2, range/2> interval
	
			randFloatSpread: function ( range ) {
	
				return range * ( 0.5 - Math.random() );
	
			},
	
			degToRad: function ( degrees ) {
	
				return degrees * _Math.DEG2RAD;
	
			},
	
			radToDeg: function ( radians ) {
	
				return radians * _Math.RAD2DEG;
	
			},
	
			isPowerOfTwo: function ( value ) {
	
				return ( value & ( value - 1 ) ) === 0 && value !== 0;
	
			},
	
			ceilPowerOfTwo: function ( value ) {
	
				return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );
	
			},
	
			floorPowerOfTwo: function ( value ) {
	
				return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author philogb / http://blog.thejit.org/
		 * @author egraether / http://egraether.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */
	
		function Vector2( x, y ) {
	
			this.x = x || 0;
			this.y = y || 0;
	
		}
	
		Object.defineProperties( Vector2.prototype, {
	
			"width": {
	
				get: function () {
	
					return this.x;
	
				},
	
				set: function ( value ) {
	
					this.x = value;
	
				}
	
			},
	
			"height": {
	
				get: function () {
	
					return this.y;
	
				},
	
				set: function ( value ) {
	
					this.y = value;
	
				}
	
			}
	
		} );
	
		Object.assign( Vector2.prototype, {
	
			isVector2: true,
	
			set: function ( x, y ) {
	
				this.x = x;
				this.y = y;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
	
				return this;
	
			},
	
			multiply: function ( v ) {
	
				this.x *= v.x;
				this.y *= v.y;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				this.x *= scalar;
				this.y *= scalar;
	
				return this;
	
			},
	
			divide: function ( v ) {
	
				this.x /= v.x;
				this.y /= v.y;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			applyMatrix3: function ( m ) {
	
				var x = this.x, y = this.y;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
				this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];
	
				return this;
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// assumes min < max, componentwise
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
	
				return this;
	
			},
	
			clampScalar: function () {
	
				var min = new Vector2();
				var max = new Vector2();
	
				return function clampScalar( minVal, maxVal ) {
	
					min.set( minVal, minVal );
					max.set( maxVal, maxVal );
	
					return this.clamp( min, max );
	
				};
	
			}(),
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y;
	
			},
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y );
	
			},
	
			manhattanLength: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() || 1 );
	
			},
	
			angle: function () {
	
				// computes the angle in radians with respect to the positive x-axis
	
				var angle = Math.atan2( this.y, this.x );
	
				if ( angle < 0 ) angle += 2 * Math.PI;
	
				return angle;
	
			},
	
			distanceTo: function ( v ) {
	
				return Math.sqrt( this.distanceToSquared( v ) );
	
			},
	
			distanceToSquared: function ( v ) {
	
				var dx = this.x - v.x, dy = this.y - v.y;
				return dx * dx + dy * dy;
	
			},
	
			manhattanDistanceTo: function ( v ) {
	
				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
	
			},
	
			setLength: function ( length ) {
	
				return this.normalize().multiplyScalar( length );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
	
				return array;
	
			},
	
			fromBufferAttribute: function ( attribute, index, offset ) {
	
				if ( offset !== undefined ) {
	
					console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );
	
				}
	
				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
	
				return this;
	
			},
	
			rotateAround: function ( center, angle ) {
	
				var c = Math.cos( angle ), s = Math.sin( angle );
	
				var x = this.x - center.x;
				var y = this.y - center.y;
	
				this.x = x * c - y * s + center.x;
				this.y = x * s + y * c + center.y;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author jordi_ros / http://plattsoft.com
		 * @author D1plo1d / http://github.com/D1plo1d
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author timknip / http://www.floorplanner.com/
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Matrix4() {
	
			this.elements = [
	
				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
	
			];
	
			if ( arguments.length > 0 ) {
	
				console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
	
			}
	
		}
	
		Object.assign( Matrix4.prototype, {
	
			isMatrix4: true,
	
			set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
	
				var te = this.elements;
	
				te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
				te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
				te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
				te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
	
				return this;
	
			},
	
			identity: function () {
	
				this.set(
	
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			clone: function () {
	
				return new Matrix4().fromArray( this.elements );
	
			},
	
			copy: function ( m ) {
	
				var te = this.elements;
				var me = m.elements;
	
				te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
				te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
				te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
				te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];
	
				return this;
	
			},
	
			copyPosition: function ( m ) {
	
				var te = this.elements, me = m.elements;
	
				te[ 12 ] = me[ 12 ];
				te[ 13 ] = me[ 13 ];
				te[ 14 ] = me[ 14 ];
	
				return this;
	
			},
	
			extractBasis: function ( xAxis, yAxis, zAxis ) {
	
				xAxis.setFromMatrixColumn( this, 0 );
				yAxis.setFromMatrixColumn( this, 1 );
				zAxis.setFromMatrixColumn( this, 2 );
	
				return this;
	
			},
	
			makeBasis: function ( xAxis, yAxis, zAxis ) {
	
				this.set(
					xAxis.x, yAxis.x, zAxis.x, 0,
					xAxis.y, yAxis.y, zAxis.y, 0,
					xAxis.z, yAxis.z, zAxis.z, 0,
					0, 0, 0, 1
				);
	
				return this;
	
			},
	
			extractRotation: function () {
	
				var v1 = new Vector3();
	
				return function extractRotation( m ) {
	
					var te = this.elements;
					var me = m.elements;
	
					var scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();
					var scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();
					var scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();
	
					te[ 0 ] = me[ 0 ] * scaleX;
					te[ 1 ] = me[ 1 ] * scaleX;
					te[ 2 ] = me[ 2 ] * scaleX;
	
					te[ 4 ] = me[ 4 ] * scaleY;
					te[ 5 ] = me[ 5 ] * scaleY;
					te[ 6 ] = me[ 6 ] * scaleY;
	
					te[ 8 ] = me[ 8 ] * scaleZ;
					te[ 9 ] = me[ 9 ] * scaleZ;
					te[ 10 ] = me[ 10 ] * scaleZ;
	
					return this;
	
				};
	
			}(),
	
			makeRotationFromEuler: function ( euler ) {
	
				if ( ! ( euler && euler.isEuler ) ) {
	
					console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
	
				}
	
				var te = this.elements;
	
				var x = euler.x, y = euler.y, z = euler.z;
				var a = Math.cos( x ), b = Math.sin( x );
				var c = Math.cos( y ), d = Math.sin( y );
				var e = Math.cos( z ), f = Math.sin( z );
	
				if ( euler.order === 'XYZ' ) {
	
					var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
					te[ 0 ] = c * e;
					te[ 4 ] = - c * f;
					te[ 8 ] = d;
	
					te[ 1 ] = af + be * d;
					te[ 5 ] = ae - bf * d;
					te[ 9 ] = - b * c;
	
					te[ 2 ] = bf - ae * d;
					te[ 6 ] = be + af * d;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'YXZ' ) {
	
					var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
					te[ 0 ] = ce + df * b;
					te[ 4 ] = de * b - cf;
					te[ 8 ] = a * d;
	
					te[ 1 ] = a * f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b;
	
					te[ 2 ] = cf * b - de;
					te[ 6 ] = df + ce * b;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'ZXY' ) {
	
					var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
					te[ 0 ] = ce - df * b;
					te[ 4 ] = - a * f;
					te[ 8 ] = de + cf * b;
	
					te[ 1 ] = cf + de * b;
					te[ 5 ] = a * e;
					te[ 9 ] = df - ce * b;
	
					te[ 2 ] = - a * d;
					te[ 6 ] = b;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'ZYX' ) {
	
					var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
					te[ 0 ] = c * e;
					te[ 4 ] = be * d - af;
					te[ 8 ] = ae * d + bf;
	
					te[ 1 ] = c * f;
					te[ 5 ] = bf * d + ae;
					te[ 9 ] = af * d - be;
	
					te[ 2 ] = - d;
					te[ 6 ] = b * c;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'YZX' ) {
	
					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
					te[ 0 ] = c * e;
					te[ 4 ] = bd - ac * f;
					te[ 8 ] = bc * f + ad;
	
					te[ 1 ] = f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b * e;
	
					te[ 2 ] = - d * e;
					te[ 6 ] = ad * f + bc;
					te[ 10 ] = ac - bd * f;
	
				} else if ( euler.order === 'XZY' ) {
	
					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
					te[ 0 ] = c * e;
					te[ 4 ] = - f;
					te[ 8 ] = d * e;
	
					te[ 1 ] = ac * f + bd;
					te[ 5 ] = a * e;
					te[ 9 ] = ad * f - bc;
	
					te[ 2 ] = bc * f - ad;
					te[ 6 ] = b * e;
					te[ 10 ] = bd * f + ac;
	
				}
	
				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;
	
				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;
	
				return this;
	
			},
	
			makeRotationFromQuaternion: function ( q ) {
	
				var te = this.elements;
	
				var x = q._x, y = q._y, z = q._z, w = q._w;
				var x2 = x + x, y2 = y + y, z2 = z + z;
				var xx = x * x2, xy = x * y2, xz = x * z2;
				var yy = y * y2, yz = y * z2, zz = z * z2;
				var wx = w * x2, wy = w * y2, wz = w * z2;
	
				te[ 0 ] = 1 - ( yy + zz );
				te[ 4 ] = xy - wz;
				te[ 8 ] = xz + wy;
	
				te[ 1 ] = xy + wz;
				te[ 5 ] = 1 - ( xx + zz );
				te[ 9 ] = yz - wx;
	
				te[ 2 ] = xz - wy;
				te[ 6 ] = yz + wx;
				te[ 10 ] = 1 - ( xx + yy );
	
				// last column
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;
	
				// bottom row
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;
	
				return this;
	
			},
	
			lookAt: function () {
	
				var x = new Vector3();
				var y = new Vector3();
				var z = new Vector3();
	
				return function lookAt( eye, target, up ) {
	
					var te = this.elements;
	
					z.subVectors( eye, target );
	
					if ( z.lengthSq() === 0 ) {
	
						// eye and target are in the same position
	
						z.z = 1;
	
					}
	
					z.normalize();
					x.crossVectors( up, z );
	
					if ( x.lengthSq() === 0 ) {
	
						// up and z are parallel
	
						if ( Math.abs( up.z ) === 1 ) {
	
							z.x += 0.0001;
	
						} else {
	
							z.z += 0.0001;
	
						}
	
						z.normalize();
						x.crossVectors( up, z );
	
					}
	
					x.normalize();
					y.crossVectors( z, x );
	
					te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
					te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
					te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;
	
					return this;
	
				};
	
			}(),
	
			multiply: function ( m, n ) {
	
				if ( n !== undefined ) {
	
					console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
					return this.multiplyMatrices( m, n );
	
				}
	
				return this.multiplyMatrices( this, m );
	
			},
	
			premultiply: function ( m ) {
	
				return this.multiplyMatrices( m, this );
	
			},
	
			multiplyMatrices: function ( a, b ) {
	
				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;
	
				var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
				var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
				var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
				var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
	
				var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
				var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
				var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
				var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
	
				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
				te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
				te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
				te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
	
				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
				te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
				te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
				te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
	
				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
				te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
				te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
				te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
	
				te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
				te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
				te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
				te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				var te = this.elements;
	
				te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
				te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
				te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
				te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
	
				return this;
	
			},
	
			applyToBufferAttribute: function () {
	
				var v1 = new Vector3();
	
				return function applyToBufferAttribute( attribute ) {
	
					for ( var i = 0, l = attribute.count; i < l; i ++ ) {
	
						v1.x = attribute.getX( i );
						v1.y = attribute.getY( i );
						v1.z = attribute.getZ( i );
	
						v1.applyMatrix4( this );
	
						attribute.setXYZ( i, v1.x, v1.y, v1.z );
	
					}
	
					return attribute;
	
				};
	
			}(),
	
			determinant: function () {
	
				var te = this.elements;
	
				var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
				var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
				var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
				var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
	
				//TODO: make this more efficient
				//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
	
				return (
					n41 * (
						+ n14 * n23 * n32
						 - n13 * n24 * n32
						 - n14 * n22 * n33
						 + n12 * n24 * n33
						 + n13 * n22 * n34
						 - n12 * n23 * n34
					) +
					n42 * (
						+ n11 * n23 * n34
						 - n11 * n24 * n33
						 + n14 * n21 * n33
						 - n13 * n21 * n34
						 + n13 * n24 * n31
						 - n14 * n23 * n31
					) +
					n43 * (
						+ n11 * n24 * n32
						 - n11 * n22 * n34
						 - n14 * n21 * n32
						 + n12 * n21 * n34
						 + n14 * n22 * n31
						 - n12 * n24 * n31
					) +
					n44 * (
						- n13 * n22 * n31
						 - n11 * n23 * n32
						 + n11 * n22 * n33
						 + n13 * n21 * n32
						 - n12 * n21 * n33
						 + n12 * n23 * n31
					)
	
				);
	
			},
	
			transpose: function () {
	
				var te = this.elements;
				var tmp;
	
				tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
				tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
				tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
	
				tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
				tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
				tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
	
				return this;
	
			},
	
			setPosition: function ( v ) {
	
				var te = this.elements;
	
				te[ 12 ] = v.x;
				te[ 13 ] = v.y;
				te[ 14 ] = v.z;
	
				return this;
	
			},
	
			getInverse: function ( m, throwOnDegenerate ) {
	
				// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
				var te = this.elements,
					me = m.elements,
	
					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
					n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
					n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
					n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],
	
					t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
					t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
					t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
					t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
	
				var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
	
				if ( det === 0 ) {
	
					var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
	
					if ( throwOnDegenerate === true ) {
	
						throw new Error( msg );
	
					} else {
	
						console.warn( msg );
	
					}
	
					return this.identity();
	
				}
	
				var detInv = 1 / det;
	
				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
				te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
				te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
	
				te[ 4 ] = t12 * detInv;
				te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
				te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
				te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
	
				te[ 8 ] = t13 * detInv;
				te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
				te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
				te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
	
				te[ 12 ] = t14 * detInv;
				te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
				te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
				te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
	
				return this;
	
			},
	
			scale: function ( v ) {
	
				var te = this.elements;
				var x = v.x, y = v.y, z = v.z;
	
				te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
				te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
				te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
				te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
	
				return this;
	
			},
	
			getMaxScaleOnAxis: function () {
	
				var te = this.elements;
	
				var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
				var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
				var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
	
				return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
	
			},
	
			makeTranslation: function ( x, y, z ) {
	
				this.set(
	
					1, 0, 0, x,
					0, 1, 0, y,
					0, 0, 1, z,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationX: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					1, 0, 0, 0,
					0, c, - s, 0,
					0, s, c, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationY: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					 c, 0, s, 0,
					 0, 1, 0, 0,
					- s, 0, c, 0,
					 0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationZ: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					c, - s, 0, 0,
					s, c, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationAxis: function ( axis, angle ) {
	
				// Based on http://www.gamedev.net/reference/articles/article1199.asp
	
				var c = Math.cos( angle );
				var s = Math.sin( angle );
				var t = 1 - c;
				var x = axis.x, y = axis.y, z = axis.z;
				var tx = t * x, ty = t * y;
	
				this.set(
	
					tx * x + c, tx * y - s * z, tx * z + s * y, 0,
					tx * y + s * z, ty * y + c, ty * z - s * x, 0,
					tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
					0, 0, 0, 1
	
				);
	
				 return this;
	
			},
	
			makeScale: function ( x, y, z ) {
	
				this.set(
	
					x, 0, 0, 0,
					0, y, 0, 0,
					0, 0, z, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeShear: function ( x, y, z ) {
	
				this.set(
	
					1, y, z, 0,
					x, 1, z, 0,
					x, y, 1, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			compose: function ( position, quaternion, scale ) {
	
				this.makeRotationFromQuaternion( quaternion );
				this.scale( scale );
				this.setPosition( position );
	
				return this;
	
			},
	
			decompose: function () {
	
				var vector = new Vector3();
				var matrix = new Matrix4();
	
				return function decompose( position, quaternion, scale ) {
	
					var te = this.elements;
	
					var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
					var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
					var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
	
					// if determine is negative, we need to invert one scale
					var det = this.determinant();
					if ( det < 0 ) sx = - sx;
	
					position.x = te[ 12 ];
					position.y = te[ 13 ];
					position.z = te[ 14 ];
	
					// scale the rotation part
					matrix.copy( this );
	
					var invSX = 1 / sx;
					var invSY = 1 / sy;
					var invSZ = 1 / sz;
	
					matrix.elements[ 0 ] *= invSX;
					matrix.elements[ 1 ] *= invSX;
					matrix.elements[ 2 ] *= invSX;
	
					matrix.elements[ 4 ] *= invSY;
					matrix.elements[ 5 ] *= invSY;
					matrix.elements[ 6 ] *= invSY;
	
					matrix.elements[ 8 ] *= invSZ;
					matrix.elements[ 9 ] *= invSZ;
					matrix.elements[ 10 ] *= invSZ;
	
					quaternion.setFromRotationMatrix( matrix );
	
					scale.x = sx;
					scale.y = sy;
					scale.z = sz;
	
					return this;
	
				};
	
			}(),
	
			makePerspective: function ( left, right, top, bottom, near, far ) {
	
				if ( far === undefined ) {
	
					console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );
	
				}
	
				var te = this.elements;
				var x = 2 * near / ( right - left );
				var y = 2 * near / ( top - bottom );
	
				var a = ( right + left ) / ( right - left );
				var b = ( top + bottom ) / ( top - bottom );
				var c = - ( far + near ) / ( far - near );
				var d = - 2 * far * near / ( far - near );
	
				te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
				te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
	
				return this;
	
			},
	
			makeOrthographic: function ( left, right, top, bottom, near, far ) {
	
				var te = this.elements;
				var w = 1.0 / ( right - left );
				var h = 1.0 / ( top - bottom );
				var p = 1.0 / ( far - near );
	
				var x = ( right + left ) * w;
				var y = ( top + bottom ) * h;
				var z = ( far + near ) * p;
	
				te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
				te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
	
				return this;
	
			},
	
			equals: function ( matrix ) {
	
				var te = this.elements;
				var me = matrix.elements;
	
				for ( var i = 0; i < 16; i ++ ) {
	
					if ( te[ i ] !== me[ i ] ) return false;
	
				}
	
				return true;
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				for ( var i = 0; i < 16; i ++ ) {
	
					this.elements[ i ] = array[ i + offset ];
	
				}
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				var te = this.elements;
	
				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
				array[ offset + 3 ] = te[ 3 ];
	
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
	
				array[ offset + 8 ] = te[ 8 ];
				array[ offset + 9 ] = te[ 9 ];
				array[ offset + 10 ] = te[ 10 ];
				array[ offset + 11 ] = te[ 11 ];
	
				array[ offset + 12 ] = te[ 12 ];
				array[ offset + 13 ] = te[ 13 ];
				array[ offset + 14 ] = te[ 14 ];
				array[ offset + 15 ] = te[ 15 ];
	
				return array;
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */
	
		function Quaternion( x, y, z, w ) {
	
			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._w = ( w !== undefined ) ? w : 1;
	
		}
	
		Object.assign( Quaternion, {
	
			slerp: function ( qa, qb, qm, t ) {
	
				return qm.copy( qa ).slerp( qb, t );
	
			},
	
			slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
	
				// fuzz-free, array-based Quaternion SLERP operation
	
				var x0 = src0[ srcOffset0 + 0 ],
					y0 = src0[ srcOffset0 + 1 ],
					z0 = src0[ srcOffset0 + 2 ],
					w0 = src0[ srcOffset0 + 3 ],
	
					x1 = src1[ srcOffset1 + 0 ],
					y1 = src1[ srcOffset1 + 1 ],
					z1 = src1[ srcOffset1 + 2 ],
					w1 = src1[ srcOffset1 + 3 ];
	
				if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
	
					var s = 1 - t,
	
						cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
	
						dir = ( cos >= 0 ? 1 : - 1 ),
						sqrSin = 1 - cos * cos;
	
					// Skip the Slerp for tiny steps to avoid numeric problems:
					if ( sqrSin > Number.EPSILON ) {
	
						var sin = Math.sqrt( sqrSin ),
							len = Math.atan2( sin, cos * dir );
	
						s = Math.sin( s * len ) / sin;
						t = Math.sin( t * len ) / sin;
	
					}
	
					var tDir = t * dir;
	
					x0 = x0 * s + x1 * tDir;
					y0 = y0 * s + y1 * tDir;
					z0 = z0 * s + z1 * tDir;
					w0 = w0 * s + w1 * tDir;
	
					// Normalize in case we just did a lerp:
					if ( s === 1 - t ) {
	
						var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
	
						x0 *= f;
						y0 *= f;
						z0 *= f;
						w0 *= f;
	
					}
	
				}
	
				dst[ dstOffset ] = x0;
				dst[ dstOffset + 1 ] = y0;
				dst[ dstOffset + 2 ] = z0;
				dst[ dstOffset + 3 ] = w0;
	
			}
	
		} );
	
		Object.defineProperties( Quaternion.prototype, {
	
			x: {
	
				get: function () {
	
					return this._x;
	
				},
	
				set: function ( value ) {
	
					this._x = value;
					this.onChangeCallback();
	
				}
	
			},
	
			y: {
	
				get: function () {
	
					return this._y;
	
				},
	
				set: function ( value ) {
	
					this._y = value;
					this.onChangeCallback();
	
				}
	
			},
	
			z: {
	
				get: function () {
	
					return this._z;
	
				},
	
				set: function ( value ) {
	
					this._z = value;
					this.onChangeCallback();
	
				}
	
			},
	
			w: {
	
				get: function () {
	
					return this._w;
	
				},
	
				set: function ( value ) {
	
					this._w = value;
					this.onChangeCallback();
	
				}
	
			}
	
		} );
	
		Object.assign( Quaternion.prototype, {
	
			set: function ( x, y, z, w ) {
	
				this._x = x;
				this._y = y;
				this._z = z;
				this._w = w;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this._x, this._y, this._z, this._w );
	
			},
	
			copy: function ( quaternion ) {
	
				this._x = quaternion.x;
				this._y = quaternion.y;
				this._z = quaternion.z;
				this._w = quaternion.w;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromEuler: function ( euler, update ) {
	
				if ( ! ( euler && euler.isEuler ) ) {
	
					throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );
	
				}
	
				var x = euler._x, y = euler._y, z = euler._z, order = euler.order;
	
				// http://www.mathworks.com/matlabcentral/fileexchange/
				// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
				//	content/SpinCalc.m
	
				var cos = Math.cos;
				var sin = Math.sin;
	
				var c1 = cos( x / 2 );
				var c2 = cos( y / 2 );
				var c3 = cos( z / 2 );
	
				var s1 = sin( x / 2 );
				var s2 = sin( y / 2 );
				var s3 = sin( z / 2 );
	
				if ( order === 'XYZ' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'YXZ' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				} else if ( order === 'ZXY' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'ZYX' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				} else if ( order === 'YZX' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'XZY' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				}
	
				if ( update !== false ) this.onChangeCallback();
	
				return this;
	
			},
	
			setFromAxisAngle: function ( axis, angle ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
	
				// assumes axis is normalized
	
				var halfAngle = angle / 2, s = Math.sin( halfAngle );
	
				this._x = axis.x * s;
				this._y = axis.y * s;
				this._z = axis.z * s;
				this._w = Math.cos( halfAngle );
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromRotationMatrix: function ( m ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var te = m.elements,
	
					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
	
					trace = m11 + m22 + m33,
					s;
	
				if ( trace > 0 ) {
	
					s = 0.5 / Math.sqrt( trace + 1.0 );
	
					this._w = 0.25 / s;
					this._x = ( m32 - m23 ) * s;
					this._y = ( m13 - m31 ) * s;
					this._z = ( m21 - m12 ) * s;
	
				} else if ( m11 > m22 && m11 > m33 ) {
	
					s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
	
					this._w = ( m32 - m23 ) / s;
					this._x = 0.25 * s;
					this._y = ( m12 + m21 ) / s;
					this._z = ( m13 + m31 ) / s;
	
				} else if ( m22 > m33 ) {
	
					s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
	
					this._w = ( m13 - m31 ) / s;
					this._x = ( m12 + m21 ) / s;
					this._y = 0.25 * s;
					this._z = ( m23 + m32 ) / s;
	
				} else {
	
					s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
	
					this._w = ( m21 - m12 ) / s;
					this._x = ( m13 + m31 ) / s;
					this._y = ( m23 + m32 ) / s;
					this._z = 0.25 * s;
	
				}
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromUnitVectors: function () {
	
				// assumes direction vectors vFrom and vTo are normalized
	
				var v1 = new Vector3();
				var r;
	
				var EPS = 0.000001;
	
				return function setFromUnitVectors( vFrom, vTo ) {
	
					if ( v1 === undefined ) v1 = new Vector3();
	
					r = vFrom.dot( vTo ) + 1;
	
					if ( r < EPS ) {
	
						r = 0;
	
						if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
	
							v1.set( - vFrom.y, vFrom.x, 0 );
	
						} else {
	
							v1.set( 0, - vFrom.z, vFrom.y );
	
						}
	
					} else {
	
						v1.crossVectors( vFrom, vTo );
	
					}
	
					this._x = v1.x;
					this._y = v1.y;
					this._z = v1.z;
					this._w = r;
	
					return this.normalize();
	
				};
	
			}(),
	
			inverse: function () {
	
				return this.conjugate().normalize();
	
			},
	
			conjugate: function () {
	
				this._x *= - 1;
				this._y *= - 1;
				this._z *= - 1;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
	
			},
	
			lengthSq: function () {
	
				return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
	
			},
	
			length: function () {
	
				return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
	
			},
	
			normalize: function () {
	
				var l = this.length();
	
				if ( l === 0 ) {
	
					this._x = 0;
					this._y = 0;
					this._z = 0;
					this._w = 1;
	
				} else {
	
					l = 1 / l;
	
					this._x = this._x * l;
					this._y = this._y * l;
					this._z = this._z * l;
					this._w = this._w * l;
	
				}
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			multiply: function ( q, p ) {
	
				if ( p !== undefined ) {
	
					console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
					return this.multiplyQuaternions( q, p );
	
				}
	
				return this.multiplyQuaternions( this, q );
	
			},
	
			premultiply: function ( q ) {
	
				return this.multiplyQuaternions( q, this );
	
			},
	
			multiplyQuaternions: function ( a, b ) {
	
				// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
	
				var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
				var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
	
				this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
				this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
				this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
				this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			slerp: function ( qb, t ) {
	
				if ( t === 0 ) return this;
				if ( t === 1 ) return this.copy( qb );
	
				var x = this._x, y = this._y, z = this._z, w = this._w;
	
				// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
	
				var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
	
				if ( cosHalfTheta < 0 ) {
	
					this._w = - qb._w;
					this._x = - qb._x;
					this._y = - qb._y;
					this._z = - qb._z;
	
					cosHalfTheta = - cosHalfTheta;
	
				} else {
	
					this.copy( qb );
	
				}
	
				if ( cosHalfTheta >= 1.0 ) {
	
					this._w = w;
					this._x = x;
					this._y = y;
					this._z = z;
	
					return this;
	
				}
	
				var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );
	
				if ( Math.abs( sinHalfTheta ) < 0.001 ) {
	
					this._w = 0.5 * ( w + this._w );
					this._x = 0.5 * ( x + this._x );
					this._y = 0.5 * ( y + this._y );
					this._z = 0.5 * ( z + this._z );
	
					return this;
	
				}
	
				var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
				var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
					ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
	
				this._w = ( w * ratioA + this._w * ratioB );
				this._x = ( x * ratioA + this._x * ratioB );
				this._y = ( y * ratioA + this._y * ratioB );
				this._z = ( z * ratioA + this._z * ratioB );
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			equals: function ( quaternion ) {
	
				return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this._x = array[ offset ];
				this._y = array[ offset + 1 ];
				this._z = array[ offset + 2 ];
				this._w = array[ offset + 3 ];
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._w;
	
				return array;
	
			},
	
			onChange: function ( callback ) {
	
				this.onChangeCallback = callback;
	
				return this;
	
			},
	
			onChangeCallback: function () {}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Vector3( x, y, z ) {
	
			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
	
		}
	
		Object.assign( Vector3.prototype, {
	
			isVector3: true,
	
			set: function ( x, y, z ) {
	
				this.x = x;
				this.y = y;
				this.z = z;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setZ: function ( z ) {
	
				this.z = z;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y, this.z );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
				this.z += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
				this.z -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
	
				return this;
	
			},
	
			multiply: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
					return this.multiplyVectors( v, w );
	
				}
	
				this.x *= v.x;
				this.y *= v.y;
				this.z *= v.z;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
	
				return this;
	
			},
	
			multiplyVectors: function ( a, b ) {
	
				this.x = a.x * b.x;
				this.y = a.y * b.y;
				this.z = a.z * b.z;
	
				return this;
	
			},
	
			applyEuler: function () {
	
				var quaternion = new Quaternion();
	
				return function applyEuler( euler ) {
	
					if ( ! ( euler && euler.isEuler ) ) {
	
						console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );
	
					}
	
					return this.applyQuaternion( quaternion.setFromEuler( euler ) );
	
				};
	
			}(),
	
			applyAxisAngle: function () {
	
				var quaternion = new Quaternion();
	
				return function applyAxisAngle( axis, angle ) {
	
					return this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );
	
				};
	
			}(),
	
			applyMatrix3: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
				this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
				this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
	
				return this;
	
			},
	
			applyMatrix4: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );
	
				this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
				this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
				this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;
	
				return this;
	
			},
	
			applyQuaternion: function ( q ) {
	
				var x = this.x, y = this.y, z = this.z;
				var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
	
				// calculate quat * vector
	
				var ix = qw * x + qy * z - qz * y;
				var iy = qw * y + qz * x - qx * z;
				var iz = qw * z + qx * y - qy * x;
				var iw = - qx * x - qy * y - qz * z;
	
				// calculate result * inverse quat
	
				this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
				this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
				this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
	
				return this;
	
			},
	
			project: function () {
	
				var matrix = new Matrix4();
	
				return function project( camera ) {
	
					matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
					return this.applyMatrix4( matrix );
	
				};
	
			}(),
	
			unproject: function () {
	
				var matrix = new Matrix4();
	
				return function unproject( camera ) {
	
					matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
					return this.applyMatrix4( matrix );
	
				};
	
			}(),
	
			transformDirection: function ( m ) {
	
				// input: THREE.Matrix4 affine matrix
				// vector interpreted as a direction
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
	
				return this.normalize();
	
			},
	
			divide: function ( v ) {
	
				this.x /= v.x;
				this.y /= v.y;
				this.z /= v.z;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// assumes min < max, componentwise
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
	
				return this;
	
			},
	
			clampScalar: function () {
	
				var min = new Vector3();
				var max = new Vector3();
	
				return function clampScalar( minVal, maxVal ) {
	
					min.set( minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal );
	
					return this.clamp( min, max );
	
				};
	
			}(),
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y + this.z * v.z;
	
			},
	
			// TODO lengthSquared?
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y + this.z * this.z;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
	
			},
	
			manhattanLength: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() || 1 );
	
			},
	
			setLength: function ( length ) {
	
				return this.normalize().multiplyScalar( length );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			cross: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
					return this.crossVectors( v, w );
	
				}
	
				return this.crossVectors( this, v );
	
			},
	
			crossVectors: function ( a, b ) {
	
				var ax = a.x, ay = a.y, az = a.z;
				var bx = b.x, by = b.y, bz = b.z;
	
				this.x = ay * bz - az * by;
				this.y = az * bx - ax * bz;
				this.z = ax * by - ay * bx;
	
				return this;
	
			},
	
			projectOnVector: function ( vector ) {
	
				var scalar = vector.dot( this ) / vector.lengthSq();
	
				return this.copy( vector ).multiplyScalar( scalar );
	
			},
	
			projectOnPlane: function () {
	
				var v1 = new Vector3();
	
				return function projectOnPlane( planeNormal ) {
	
					v1.copy( this ).projectOnVector( planeNormal );
	
					return this.sub( v1 );
	
				};
	
			}(),
	
			reflect: function () {
	
				// reflect incident vector off plane orthogonal to normal
				// normal is assumed to have unit length
	
				var v1 = new Vector3();
	
				return function reflect( normal ) {
	
					return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
	
				};
	
			}(),
	
			angleTo: function ( v ) {
	
				var theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );
	
				// clamp, to handle numerical problems
	
				return Math.acos( _Math.clamp( theta, - 1, 1 ) );
	
			},
	
			distanceTo: function ( v ) {
	
				return Math.sqrt( this.distanceToSquared( v ) );
	
			},
	
			distanceToSquared: function ( v ) {
	
				var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
	
				return dx * dx + dy * dy + dz * dz;
	
			},
	
			manhattanDistanceTo: function ( v ) {
	
				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
	
			},
	
			setFromSpherical: function ( s ) {
	
				var sinPhiRadius = Math.sin( s.phi ) * s.radius;
	
				this.x = sinPhiRadius * Math.sin( s.theta );
				this.y = Math.cos( s.phi ) * s.radius;
				this.z = sinPhiRadius * Math.cos( s.theta );
	
				return this;
	
			},
	
			setFromCylindrical: function ( c ) {
	
				this.x = c.radius * Math.sin( c.theta );
				this.y = c.y;
				this.z = c.radius * Math.cos( c.theta );
	
				return this;
	
			},
	
			setFromMatrixPosition: function ( m ) {
	
				var e = m.elements;
	
				this.x = e[ 12 ];
				this.y = e[ 13 ];
				this.z = e[ 14 ];
	
				return this;
	
			},
	
			setFromMatrixScale: function ( m ) {
	
				var sx = this.setFromMatrixColumn( m, 0 ).length();
				var sy = this.setFromMatrixColumn( m, 1 ).length();
				var sz = this.setFromMatrixColumn( m, 2 ).length();
	
				this.x = sx;
				this.y = sy;
				this.z = sz;
	
				return this;
	
			},
	
			setFromMatrixColumn: function ( m, index ) {
	
				return this.fromArray( m.elements, index * 4 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
	
				return array;
	
			},
	
			fromBufferAttribute: function ( attribute, index, offset ) {
	
				if ( offset !== undefined ) {
	
					console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );
	
				}
	
				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
				this.z = attribute.getZ( index );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 * @author tschw
		 */
	
		function Matrix3() {
	
			this.elements = [
	
				1, 0, 0,
				0, 1, 0,
				0, 0, 1
	
			];
	
			if ( arguments.length > 0 ) {
	
				console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
	
			}
	
		}
	
		Object.assign( Matrix3.prototype, {
	
			isMatrix3: true,
	
			set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
	
				var te = this.elements;
	
				te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
				te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
				te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
	
				return this;
	
			},
	
			identity: function () {
	
				this.set(
	
					1, 0, 0,
					0, 1, 0,
					0, 0, 1
	
				);
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().fromArray( this.elements );
	
			},
	
			copy: function ( m ) {
	
				var te = this.elements;
				var me = m.elements;
	
				te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
				te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
				te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];
	
				return this;
	
			},
	
			setFromMatrix4: function ( m ) {
	
				var me = m.elements;
	
				this.set(
	
					me[ 0 ], me[ 4 ], me[ 8 ],
					me[ 1 ], me[ 5 ], me[ 9 ],
					me[ 2 ], me[ 6 ], me[ 10 ]
	
				);
	
				return this;
	
			},
	
			applyToBufferAttribute: function () {
	
				var v1 = new Vector3();
	
				return function applyToBufferAttribute( attribute ) {
	
					for ( var i = 0, l = attribute.count; i < l; i ++ ) {
	
						v1.x = attribute.getX( i );
						v1.y = attribute.getY( i );
						v1.z = attribute.getZ( i );
	
						v1.applyMatrix3( this );
	
						attribute.setXYZ( i, v1.x, v1.y, v1.z );
	
					}
	
					return attribute;
	
				};
	
			}(),
	
			multiply: function ( m ) {
	
				return this.multiplyMatrices( this, m );
	
			},
	
			premultiply: function ( m ) {
	
				return this.multiplyMatrices( m, this );
	
			},
	
			multiplyMatrices: function ( a, b ) {
	
				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;
	
				var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
				var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
				var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];
	
				var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
				var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
				var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];
	
				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
				te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
				te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;
	
				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
				te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
				te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;
	
				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
				te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
				te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				var te = this.elements;
	
				te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
				te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
				te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
	
				return this;
	
			},
	
			determinant: function () {
	
				var te = this.elements;
	
				var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
					d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
					g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
	
				return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
	
			},
	
			getInverse: function ( matrix, throwOnDegenerate ) {
	
				if ( matrix && matrix.isMatrix4 ) {
	
					console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );
	
				}
	
				var me = matrix.elements,
					te = this.elements,
	
					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
					n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
					n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],
	
					t11 = n33 * n22 - n32 * n23,
					t12 = n32 * n13 - n33 * n12,
					t13 = n23 * n12 - n22 * n13,
	
					det = n11 * t11 + n21 * t12 + n31 * t13;
	
				if ( det === 0 ) {
	
					var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
	
					if ( throwOnDegenerate === true ) {
	
						throw new Error( msg );
	
					} else {
	
						console.warn( msg );
	
					}
	
					return this.identity();
	
				}
	
				var detInv = 1 / det;
	
				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
				te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
	
				te[ 3 ] = t12 * detInv;
				te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
				te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
	
				te[ 6 ] = t13 * detInv;
				te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
				te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
	
				return this;
	
			},
	
			transpose: function () {
	
				var tmp, m = this.elements;
	
				tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
				tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
				tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
	
				return this;
	
			},
	
			getNormalMatrix: function ( matrix4 ) {
	
				return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();
	
			},
	
			transposeIntoArray: function ( r ) {
	
				var m = this.elements;
	
				r[ 0 ] = m[ 0 ];
				r[ 1 ] = m[ 3 ];
				r[ 2 ] = m[ 6 ];
				r[ 3 ] = m[ 1 ];
				r[ 4 ] = m[ 4 ];
				r[ 5 ] = m[ 7 ];
				r[ 6 ] = m[ 2 ];
				r[ 7 ] = m[ 5 ];
				r[ 8 ] = m[ 8 ];
	
				return this;
	
			},
	
			setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {
	
				var c = Math.cos( rotation );
				var s = Math.sin( rotation );
	
				this.set(
					sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
					- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
					0, 0, 1
				);
	
			},
	
			scale: function ( sx, sy ) {
	
				var te = this.elements;
	
				te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
				te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;
	
				return this;
	
			},
	
			rotate: function ( theta ) {
	
				var c = Math.cos( theta );
				var s = Math.sin( theta );
	
				var te = this.elements;
	
				var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
				var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];
	
				te[ 0 ] = c * a11 + s * a21;
				te[ 3 ] = c * a12 + s * a22;
				te[ 6 ] = c * a13 + s * a23;
	
				te[ 1 ] = - s * a11 + c * a21;
				te[ 4 ] = - s * a12 + c * a22;
				te[ 7 ] = - s * a13 + c * a23;
	
				return this;
	
			},
	
			translate: function ( tx, ty ) {
	
				var te = this.elements;
	
				te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
				te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];
	
				return this;
	
			},
	
			equals: function ( matrix ) {
	
				var te = this.elements;
				var me = matrix.elements;
	
				for ( var i = 0; i < 9; i ++ ) {
	
					if ( te[ i ] !== me[ i ] ) return false;
	
				}
	
				return true;
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				for ( var i = 0; i < 9; i ++ ) {
	
					this.elements[ i ] = array[ i + offset ];
	
				}
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				var te = this.elements;
	
				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
	
				array[ offset + 3 ] = te[ 3 ];
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
	
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
				array[ offset + 8 ] = te[ 8 ];
	
				return array;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 */
	
		var textureId = 0;
	
		function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
	
			Object.defineProperty( this, 'id', { value: textureId ++ } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
	
			this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
			this.mipmaps = [];
	
			this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
	
			this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
			this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
	
			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
			this.minFilter = minFilter !== undefined ? minFilter : LinearMipMapLinearFilter;
	
			this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
	
			this.format = format !== undefined ? format : RGBAFormat;
			this.type = type !== undefined ? type : UnsignedByteType;
	
			this.offset = new Vector2( 0, 0 );
			this.repeat = new Vector2( 1, 1 );
			this.center = new Vector2( 0, 0 );
			this.rotation = 0;
	
			this.matrixAutoUpdate = true;
			this.matrix = new Matrix3();
	
			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
	
			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
			//
			// Also changing the encoding after already used by a Material will not automatically make the Material
			// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.
			this.encoding = encoding !== undefined ? encoding : LinearEncoding;
	
			this.version = 0;
			this.onUpdate = null;
	
		}
	
		Texture.DEFAULT_IMAGE = undefined;
		Texture.DEFAULT_MAPPING = UVMapping;
	
		Object.defineProperty( Texture.prototype, "needsUpdate", {
	
			set: function ( value ) {
	
				if ( value === true ) this.version ++;
	
			}
	
		} );
	
		Object.assign( Texture.prototype, EventDispatcher.prototype, {
	
			constructor: Texture,
	
			isTexture: true,
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.name = source.name;
	
				this.image = source.image;
				this.mipmaps = source.mipmaps.slice( 0 );
	
				this.mapping = source.mapping;
	
				this.wrapS = source.wrapS;
				this.wrapT = source.wrapT;
	
				this.magFilter = source.magFilter;
				this.minFilter = source.minFilter;
	
				this.anisotropy = source.anisotropy;
	
				this.format = source.format;
				this.type = source.type;
	
				this.offset.copy( source.offset );
				this.repeat.copy( source.repeat );
				this.center.copy( source.center );
				this.rotation = source.rotation;
	
				this.matrixAutoUpdate = source.matrixAutoUpdate;
				this.matrix.copy( source.matrix );
	
				this.generateMipmaps = source.generateMipmaps;
				this.premultiplyAlpha = source.premultiplyAlpha;
				this.flipY = source.flipY;
				this.unpackAlignment = source.unpackAlignment;
				this.encoding = source.encoding;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var isRootObject = ( meta === undefined || typeof meta === 'string' );
	
				if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {
	
					return meta.textures[ this.uuid ];
	
				}
	
				function getDataURL( image ) {
	
					var canvas;
	
					if ( image instanceof HTMLCanvasElement ) {
	
						canvas = image;
	
					} else {
	
						canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
						canvas.width = image.width;
						canvas.height = image.height;
	
						var context = canvas.getContext( '2d' );
	
						if ( image instanceof ImageData ) {
	
							context.putImageData( image, 0, 0 );
	
						} else {
	
							context.drawImage( image, 0, 0, image.width, image.height );
	
						}
	
					}
	
					if ( canvas.width > 2048 || canvas.height > 2048 ) {
	
						return canvas.toDataURL( 'image/jpeg', 0.6 );
	
					} else {
	
						return canvas.toDataURL( 'image/png' );
	
					}
	
				}
	
				var output = {
					metadata: {
						version: 4.5,
						type: 'Texture',
						generator: 'Texture.toJSON'
					},
	
					uuid: this.uuid,
					name: this.name,
	
					mapping: this.mapping,
	
					repeat: [ this.repeat.x, this.repeat.y ],
					offset: [ this.offset.x, this.offset.y ],
					center: [ this.center.x, this.center.y ],
					rotation: this.rotation,
	
					wrap: [ this.wrapS, this.wrapT ],
	
					minFilter: this.minFilter,
					magFilter: this.magFilter,
					anisotropy: this.anisotropy,
	
					flipY: this.flipY
				};
	
				if ( this.image !== undefined ) {
	
					// TODO: Move to THREE.Image
	
					var image = this.image;
	
					if ( image.uuid === undefined ) {
	
						image.uuid = _Math.generateUUID(); // UGH
	
					}
	
					if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {
	
						meta.images[ image.uuid ] = {
							uuid: image.uuid,
							url: getDataURL( image )
						};
	
					}
	
					output.image = image.uuid;
	
				}
	
				if ( ! isRootObject ) {
	
					meta.textures[ this.uuid ] = output;
	
				}
	
				return output;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			},
	
			transformUv: function ( uv ) {
	
				if ( this.mapping !== UVMapping ) return;
	
				uv.applyMatrix3( this.matrix );
	
				if ( uv.x < 0 || uv.x > 1 ) {
	
					switch ( this.wrapS ) {
	
						case RepeatWrapping:
	
							uv.x = uv.x - Math.floor( uv.x );
							break;
	
						case ClampToEdgeWrapping:
	
							uv.x = uv.x < 0 ? 0 : 1;
							break;
	
						case MirroredRepeatWrapping:
	
							if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
	
								uv.x = Math.ceil( uv.x ) - uv.x;
	
							} else {
	
								uv.x = uv.x - Math.floor( uv.x );
	
							}
							break;
	
					}
	
				}
	
				if ( uv.y < 0 || uv.y > 1 ) {
	
					switch ( this.wrapT ) {
	
						case RepeatWrapping:
	
							uv.y = uv.y - Math.floor( uv.y );
							break;
	
						case ClampToEdgeWrapping:
	
							uv.y = uv.y < 0 ? 0 : 1;
							break;
	
						case MirroredRepeatWrapping:
	
							if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
	
								uv.y = Math.ceil( uv.y ) - uv.y;
	
							} else {
	
								uv.y = uv.y - Math.floor( uv.y );
	
							}
							break;
	
					}
	
				}
	
				if ( this.flipY ) {
	
					uv.y = 1 - uv.y;
	
				}
	
			}
	
		} );
	
		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Vector4( x, y, z, w ) {
	
			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
			this.w = ( w !== undefined ) ? w : 1;
	
		}
	
		Object.assign( Vector4.prototype, {
	
			isVector4: true,
	
			set: function ( x, y, z, w ) {
	
				this.x = x;
				this.y = y;
				this.z = z;
				this.w = w;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
				this.w = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setZ: function ( z ) {
	
				this.z = z;
	
				return this;
	
			},
	
			setW: function ( w ) {
	
				this.w = w;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					case 3: this.w = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					case 3: return this.w;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y, this.z, this.w );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
				this.w = ( v.w !== undefined ) ? v.w : 1;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
				this.w += v.w;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
				this.z += s;
				this.w += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
				this.w = a.w + b.w;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
				this.w += v.w * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
				this.w -= v.w;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
				this.z -= s;
				this.w -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
				this.w = a.w - b.w;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;
	
				return this;
	
			},
	
			applyMatrix4: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z, w = this.w;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
				this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			setAxisAngleFromQuaternion: function ( q ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
	
				// q is assumed to be normalized
	
				this.w = 2 * Math.acos( q.w );
	
				var s = Math.sqrt( 1 - q.w * q.w );
	
				if ( s < 0.0001 ) {
	
					this.x = 1;
					this.y = 0;
					this.z = 0;
	
				} else {
	
					this.x = q.x / s;
					this.y = q.y / s;
					this.z = q.z / s;
	
				}
	
				return this;
	
			},
	
			setAxisAngleFromRotationMatrix: function ( m ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var angle, x, y, z,		// variables for result
					epsilon = 0.01,		// margin to allow for rounding errors
					epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
	
					te = m.elements,
	
					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
				if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
				     ( Math.abs( m13 - m31 ) < epsilon ) &&
				     ( Math.abs( m23 - m32 ) < epsilon ) ) {
	
					// singularity found
					// first check for identity matrix which must have +1 for all terms
					// in leading diagonal and zero in other terms
	
					if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
					     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
					     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
					     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
	
						// this singularity is identity matrix so angle = 0
	
						this.set( 1, 0, 0, 0 );
	
						return this; // zero angle, arbitrary axis
	
					}
	
					// otherwise this singularity is angle = 180
	
					angle = Math.PI;
	
					var xx = ( m11 + 1 ) / 2;
					var yy = ( m22 + 1 ) / 2;
					var zz = ( m33 + 1 ) / 2;
					var xy = ( m12 + m21 ) / 4;
					var xz = ( m13 + m31 ) / 4;
					var yz = ( m23 + m32 ) / 4;
	
					if ( ( xx > yy ) && ( xx > zz ) ) {
	
						// m11 is the largest diagonal term
	
						if ( xx < epsilon ) {
	
							x = 0;
							y = 0.707106781;
							z = 0.707106781;
	
						} else {
	
							x = Math.sqrt( xx );
							y = xy / x;
							z = xz / x;
	
						}
	
					} else if ( yy > zz ) {
	
						// m22 is the largest diagonal term
	
						if ( yy < epsilon ) {
	
							x = 0.707106781;
							y = 0;
							z = 0.707106781;
	
						} else {
	
							y = Math.sqrt( yy );
							x = xy / y;
							z = yz / y;
	
						}
	
					} else {
	
						// m33 is the largest diagonal term so base result on this
	
						if ( zz < epsilon ) {
	
							x = 0.707106781;
							y = 0.707106781;
							z = 0;
	
						} else {
	
							z = Math.sqrt( zz );
							x = xz / z;
							y = yz / z;
	
						}
	
					}
	
					this.set( x, y, z, angle );
	
					return this; // return 180 deg rotation
	
				}
	
				// as we have reached here there are no singularities so we can handle normally
	
				var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
				                   ( m13 - m31 ) * ( m13 - m31 ) +
				                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
	
				if ( Math.abs( s ) < 0.001 ) s = 1;
	
				// prevent divide by zero, should not happen if matrix is orthogonal and should be
				// caught by singularity test above, but I've left it in just in case
	
				this.x = ( m32 - m23 ) / s;
				this.y = ( m13 - m31 ) / s;
				this.z = ( m21 - m12 ) / s;
				this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
	
				return this;
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
				this.w = Math.min( this.w, v.w );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
				this.w = Math.max( this.w, v.w );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// assumes min < max, componentwise
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
				this.w = Math.max( min.w, Math.min( max.w, this.w ) );
	
				return this;
	
			},
	
			clampScalar: function () {
	
				var min, max;
	
				return function clampScalar( minVal, maxVal ) {
	
					if ( min === undefined ) {
	
						min = new Vector4();
						max = new Vector4();
	
					}
	
					min.set( minVal, minVal, minVal, minVal );
					max.set( maxVal, maxVal, maxVal, maxVal );
	
					return this.clamp( min, max );
	
				};
	
			}(),
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
				this.w = Math.floor( this.w );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
				this.w = Math.ceil( this.w );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
				this.w = Math.round( this.w );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
				this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
				this.w = - this.w;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	
			},
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
	
			},
	
			manhattanLength: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() || 1 );
	
			},
	
			setLength: function ( length ) {
	
				return this.normalize().multiplyScalar( length );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
				this.w += ( v.w - this.w ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
				this.w = array[ offset + 3 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
				array[ offset + 3 ] = this.w;
	
				return array;
	
			},
	
			fromBufferAttribute: function ( attribute, index, offset ) {
	
				if ( offset !== undefined ) {
	
					console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );
	
				}
	
				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
				this.z = attribute.getZ( index );
				this.w = attribute.getW( index );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author szimek / https://github.com/szimek/
		 * @author alteredq / http://alteredqualia.com/
		 * @author Marius Kintel / https://github.com/kintel
		 */
	
		/*
		 In options, we can specify:
		 * Texture parameters for an auto-generated target texture
		 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
		*/
		function WebGLRenderTarget( width, height, options ) {
	
			this.uuid = _Math.generateUUID();
	
			this.width = width;
			this.height = height;
	
			this.scissor = new Vector4( 0, 0, width, height );
			this.scissorTest = false;
	
			this.viewport = new Vector4( 0, 0, width, height );
	
			options = options || {};
	
			if ( options.minFilter === undefined ) options.minFilter = LinearFilter;
	
			this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
	
			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
	
		}
	
		Object.assign( WebGLRenderTarget.prototype, EventDispatcher.prototype, {
	
			isWebGLRenderTarget: true,
	
			setSize: function ( width, height ) {
	
				if ( this.width !== width || this.height !== height ) {
	
					this.width = width;
					this.height = height;
	
					this.dispose();
	
				}
	
				this.viewport.set( 0, 0, width, height );
				this.scissor.set( 0, 0, width, height );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.width = source.width;
				this.height = source.height;
	
				this.viewport.copy( source.viewport );
	
				this.texture = source.texture.clone();
	
				this.depthBuffer = source.depthBuffer;
				this.stencilBuffer = source.stencilBuffer;
				this.depthTexture = source.depthTexture;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com
		 */
	
		function WebGLRenderTargetCube( width, height, options ) {
	
			WebGLRenderTarget.call( this, width, height, options );
	
			this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
			this.activeMipMapLevel = 0;
	
		}
	
		WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
		WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;
	
		WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.image = { data: data, width: width, height: height };
	
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
	
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
	
		}
	
		DataTexture.prototype = Object.create( Texture.prototype );
		DataTexture.prototype.constructor = DataTexture;
	
		DataTexture.prototype.isDataTexture = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
	
			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
	
			Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.flipY = false;
	
		}
	
		CubeTexture.prototype = Object.create( Texture.prototype );
		CubeTexture.prototype.constructor = CubeTexture;
	
		CubeTexture.prototype.isCubeTexture = true;
	
		Object.defineProperty( CubeTexture.prototype, 'images', {
	
			get: function () {
	
				return this.image;
	
			},
	
			set: function ( value ) {
	
				this.image = value;
	
			}
	
		} );
	
		/**
		 * @author tschw
		 *
		 * Uniforms of a program.
		 * Those form a tree structure with a special top-level container for the root,
		 * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.
		 *
		 *
		 * Properties of inner nodes including the top-level container:
		 *
		 * .seq - array of nested uniforms
		 * .map - nested uniforms by name
		 *
		 *
		 * Methods of all nodes except the top-level container:
		 *
		 * .setValue( gl, value, [renderer] )
		 *
		 * 		uploads a uniform value(s)
		 *  	the 'renderer' parameter is needed for sampler uniforms
		 *
		 *
		 * Static methods of the top-level container (renderer factorizations):
		 *
		 * .upload( gl, seq, values, renderer )
		 *
		 * 		sets uniforms in 'seq' to 'values[id].value'
		 *
		 * .seqWithValue( seq, values ) : filteredSeq
		 *
		 * 		filters 'seq' entries with corresponding entry in values
		 *
		 *
		 * Methods of the top-level container (renderer factorizations):
		 *
		 * .setValue( gl, name, value )
		 *
		 * 		sets uniform with  name 'name' to 'value'
		 *
		 * .set( gl, obj, prop )
		 *
		 * 		sets uniform from object and property with same name than uniform
		 *
		 * .setOptional( gl, obj, prop )
		 *
		 * 		like .set for an optional property of the object
		 *
		 */
	
		var emptyTexture = new Texture();
		var emptyCubeTexture = new CubeTexture();
	
		// --- Base for inner nodes (including the root) ---
	
		function UniformContainer() {
	
			this.seq = [];
			this.map = {};
	
		}
	
		// --- Utilities ---
	
		// Array Caches (provide typed arrays for temporary by size)
	
		var arrayCacheF32 = [];
		var arrayCacheI32 = [];
	
		// Float32Array caches used for uploading Matrix uniforms
	
		var mat4array = new Float32Array( 16 );
		var mat3array = new Float32Array( 9 );
	
		// Flattening for arrays of vectors and matrices
	
		function flatten( array, nBlocks, blockSize ) {
	
			var firstElem = array[ 0 ];
	
			if ( firstElem <= 0 || firstElem > 0 ) return array;
			// unoptimized: ! isNaN( firstElem )
			// see http://jacksondunstan.com/articles/983
	
			var n = nBlocks * blockSize,
				r = arrayCacheF32[ n ];
	
			if ( r === undefined ) {
	
				r = new Float32Array( n );
				arrayCacheF32[ n ] = r;
	
			}
	
			if ( nBlocks !== 0 ) {
	
				firstElem.toArray( r, 0 );
	
				for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {
	
					offset += blockSize;
					array[ i ].toArray( r, offset );
	
				}
	
			}
	
			return r;
	
		}
	
		// Texture unit allocation
	
		function allocTexUnits( renderer, n ) {
	
			var r = arrayCacheI32[ n ];
	
			if ( r === undefined ) {
	
				r = new Int32Array( n );
				arrayCacheI32[ n ] = r;
	
			}
	
			for ( var i = 0; i !== n; ++ i )
				r[ i ] = renderer.allocTextureUnit();
	
			return r;
	
		}
	
		// --- Setters ---
	
		// Note: Defining these methods externally, because they come in a bunch
		// and this way their names minify.
	
		// Single scalar
	
		function setValue1f( gl, v ) {
	
			gl.uniform1f( this.addr, v );
	
		}
	
		function setValue1i( gl, v ) {
	
			gl.uniform1i( this.addr, v );
	
		}
	
		// Single float vector (from flat array or THREE.VectorN)
	
		function setValue2fv( gl, v ) {
	
			if ( v.x === undefined ) {
	
				gl.uniform2fv( this.addr, v );
	
			} else {
	
				gl.uniform2f( this.addr, v.x, v.y );
	
			}
	
		}
	
		function setValue3fv( gl, v ) {
	
			if ( v.x !== undefined ) {
	
				gl.uniform3f( this.addr, v.x, v.y, v.z );
	
			} else if ( v.r !== undefined ) {
	
				gl.uniform3f( this.addr, v.r, v.g, v.b );
	
			} else {
	
				gl.uniform3fv( this.addr, v );
	
			}
	
		}
	
		function setValue4fv( gl, v ) {
	
			if ( v.x === undefined ) {
	
				gl.uniform4fv( this.addr, v );
	
			} else {
	
				 gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
	
			}
	
		}
	
		// Single matrix (from flat array or MatrixN)
	
		function setValue2fm( gl, v ) {
	
			gl.uniformMatrix2fv( this.addr, false, v.elements || v );
	
		}
	
		function setValue3fm( gl, v ) {
	
			if ( v.elements === undefined ) {
	
				gl.uniformMatrix3fv( this.addr, false, v );
	
			} else {
	
				mat3array.set( v.elements );
				gl.uniformMatrix3fv( this.addr, false, mat3array );
	
			}
	
		}
	
		function setValue4fm( gl, v ) {
	
			if ( v.elements === undefined ) {
	
				gl.uniformMatrix4fv( this.addr, false, v );
	
			} else {
	
				mat4array.set( v.elements );
				gl.uniformMatrix4fv( this.addr, false, mat4array );
	
			}
	
		}
	
		// Single texture (2D / Cube)
	
		function setValueT1( gl, v, renderer ) {
	
			var unit = renderer.allocTextureUnit();
			gl.uniform1i( this.addr, unit );
			renderer.setTexture2D( v || emptyTexture, unit );
	
		}
	
		function setValueT6( gl, v, renderer ) {
	
			var unit = renderer.allocTextureUnit();
			gl.uniform1i( this.addr, unit );
			renderer.setTextureCube( v || emptyCubeTexture, unit );
	
		}
	
		// Integer / Boolean vectors or arrays thereof (always flat arrays)
	
		function setValue2iv( gl, v ) {
	
			gl.uniform2iv( this.addr, v );
	
		}
	
		function setValue3iv( gl, v ) {
	
			gl.uniform3iv( this.addr, v );
	
		}
	
		function setValue4iv( gl, v ) {
	
			gl.uniform4iv( this.addr, v );
	
		}
	
		// Helper to pick the right setter for the singular case
	
		function getSingularSetter( type ) {
	
			switch ( type ) {
	
				case 0x1406: return setValue1f; // FLOAT
				case 0x8b50: return setValue2fv; // _VEC2
				case 0x8b51: return setValue3fv; // _VEC3
				case 0x8b52: return setValue4fv; // _VEC4
	
				case 0x8b5a: return setValue2fm; // _MAT2
				case 0x8b5b: return setValue3fm; // _MAT3
				case 0x8b5c: return setValue4fm; // _MAT4
	
				case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
				case 0x8b60: return setValueT6; // SAMPLER_CUBE
	
				case 0x1404: case 0x8b56: return setValue1i; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
				case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
				case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4
	
			}
	
		}
	
		// Array of scalars
	
		function setValue1fv( gl, v ) {
	
			gl.uniform1fv( this.addr, v );
	
		}
		function setValue1iv( gl, v ) {
	
			gl.uniform1iv( this.addr, v );
	
		}
	
		// Array of vectors (flat or from THREE classes)
	
		function setValueV2a( gl, v ) {
	
			gl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );
	
		}
	
		function setValueV3a( gl, v ) {
	
			gl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );
	
		}
	
		function setValueV4a( gl, v ) {
	
			gl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );
	
		}
	
		// Array of matrices (flat or from THREE clases)
	
		function setValueM2a( gl, v ) {
	
			gl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );
	
		}
	
		function setValueM3a( gl, v ) {
	
			gl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );
	
		}
	
		function setValueM4a( gl, v ) {
	
			gl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );
	
		}
	
		// Array of textures (2D / Cube)
	
		function setValueT1a( gl, v, renderer ) {
	
			var n = v.length,
				units = allocTexUnits( renderer, n );
	
			gl.uniform1iv( this.addr, units );
	
			for ( var i = 0; i !== n; ++ i ) {
	
				renderer.setTexture2D( v[ i ] || emptyTexture, units[ i ] );
	
			}
	
		}
	
		function setValueT6a( gl, v, renderer ) {
	
			var n = v.length,
				units = allocTexUnits( renderer, n );
	
			gl.uniform1iv( this.addr, units );
	
			for ( var i = 0; i !== n; ++ i ) {
	
				renderer.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
	
			}
	
		}
	
		// Helper to pick the right setter for a pure (bottom-level) array
	
		function getPureArraySetter( type ) {
	
			switch ( type ) {
	
				case 0x1406: return setValue1fv; // FLOAT
				case 0x8b50: return setValueV2a; // _VEC2
				case 0x8b51: return setValueV3a; // _VEC3
				case 0x8b52: return setValueV4a; // _VEC4
	
				case 0x8b5a: return setValueM2a; // _MAT2
				case 0x8b5b: return setValueM3a; // _MAT3
				case 0x8b5c: return setValueM4a; // _MAT4
	
				case 0x8b5e: return setValueT1a; // SAMPLER_2D
				case 0x8b60: return setValueT6a; // SAMPLER_CUBE
	
				case 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValue2iv; // _VEC2
				case 0x8b54: case 0x8b58: return setValue3iv; // _VEC3
				case 0x8b55: case 0x8b59: return setValue4iv; // _VEC4
	
			}
	
		}
	
		// --- Uniform Classes ---
	
		function SingleUniform( id, activeInfo, addr ) {
	
			this.id = id;
			this.addr = addr;
			this.setValue = getSingularSetter( activeInfo.type );
	
			// this.path = activeInfo.name; // DEBUG
	
		}
	
		function PureArrayUniform( id, activeInfo, addr ) {
	
			this.id = id;
			this.addr = addr;
			this.size = activeInfo.size;
			this.setValue = getPureArraySetter( activeInfo.type );
	
			// this.path = activeInfo.name; // DEBUG
	
		}
	
		function StructuredUniform( id ) {
	
			this.id = id;
	
			UniformContainer.call( this ); // mix-in
	
		}
	
		StructuredUniform.prototype.setValue = function ( gl, value ) {
	
			// Note: Don't need an extra 'renderer' parameter, since samplers
			// are not allowed in structured uniforms.
	
			var seq = this.seq;
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ];
				u.setValue( gl, value[ u.id ] );
	
			}
	
		};
	
		// --- Top-level ---
	
		// Parser - builds up the property tree from the path strings
	
		var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
	
		// extracts
		// 	- the identifier (member name or array index)
		//  - followed by an optional right bracket (found when array index)
		//  - followed by an optional left bracket or dot (type of subscript)
		//
		// Note: These portions can be read in a non-overlapping fashion and
		// allow straightforward parsing of the hierarchy that WebGL encodes
		// in the uniform names.
	
		function addUniform( container, uniformObject ) {
	
			container.seq.push( uniformObject );
			container.map[ uniformObject.id ] = uniformObject;
	
		}
	
		function parseUniform( activeInfo, addr, container ) {
	
			var path = activeInfo.name,
				pathLength = path.length;
	
			// reset RegExp object, because of the early exit of a previous run
			RePathPart.lastIndex = 0;
	
			for ( ; ; ) {
	
				var match = RePathPart.exec( path ),
					matchEnd = RePathPart.lastIndex,
	
					id = match[ 1 ],
					idIsIndex = match[ 2 ] === ']',
					subscript = match[ 3 ];
	
				if ( idIsIndex ) id = id | 0; // convert to integer
	
				if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {
	
					// bare name or "pure" bottom-level array "[0]" suffix
	
					addUniform( container, subscript === undefined ?
						new SingleUniform( id, activeInfo, addr ) :
						new PureArrayUniform( id, activeInfo, addr ) );
	
					break;
	
				} else {
	
					// step into inner node / create it in case it doesn't exist
	
					var map = container.map, next = map[ id ];
	
					if ( next === undefined ) {
	
						next = new StructuredUniform( id );
						addUniform( container, next );
	
					}
	
					container = next;
	
				}
	
			}
	
		}
	
		// Root Container
	
		function WebGLUniforms( gl, program, renderer ) {
	
			UniformContainer.call( this );
	
			this.renderer = renderer;
	
			var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );
	
			for ( var i = 0; i < n; ++ i ) {
	
				var info = gl.getActiveUniform( program, i ),
					path = info.name,
					addr = gl.getUniformLocation( program, path );
	
				parseUniform( info, addr, this );
	
			}
	
		}
	
		WebGLUniforms.prototype.setValue = function ( gl, name, value ) {
	
			var u = this.map[ name ];
	
			if ( u !== undefined ) u.setValue( gl, value, this.renderer );
	
		};
	
		WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {
	
			var v = object[ name ];
	
			if ( v !== undefined ) this.setValue( gl, name, v );
	
		};
	
	
		// Static interface
	
		WebGLUniforms.upload = function ( gl, seq, values, renderer ) {
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ],
					v = values[ u.id ];
	
				if ( v.needsUpdate !== false ) {
	
					// note: always updating when .needsUpdate is undefined
					u.setValue( gl, v.value, renderer );
	
				}
	
			}
	
		};
	
		WebGLUniforms.seqWithValue = function ( seq, values ) {
	
			var r = [];
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ];
				if ( u.id in values ) r.push( u );
	
			}
	
			return r;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
			'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
			'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
			'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
			'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
			'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
			'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
			'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
			'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
			'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
			'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
			'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
			'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
			'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
			'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
			'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
			'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
			'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
			'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
			'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
			'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
			'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
			'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
			'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
	
		function Color( r, g, b ) {
	
			if ( g === undefined && b === undefined ) {
	
				// r is THREE.Color, hex or string
				return this.set( r );
	
			}
	
			return this.setRGB( r, g, b );
	
		}
	
		Object.assign( Color.prototype, {
	
			isColor: true,
	
			r: 1, g: 1, b: 1,
	
			set: function ( value ) {
	
				if ( value && value.isColor ) {
	
					this.copy( value );
	
				} else if ( typeof value === 'number' ) {
	
					this.setHex( value );
	
				} else if ( typeof value === 'string' ) {
	
					this.setStyle( value );
	
				}
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.r = scalar;
				this.g = scalar;
				this.b = scalar;
	
				return this;
	
			},
	
			setHex: function ( hex ) {
	
				hex = Math.floor( hex );
	
				this.r = ( hex >> 16 & 255 ) / 255;
				this.g = ( hex >> 8 & 255 ) / 255;
				this.b = ( hex & 255 ) / 255;
	
				return this;
	
			},
	
			setRGB: function ( r, g, b ) {
	
				this.r = r;
				this.g = g;
				this.b = b;
	
				return this;
	
			},
	
			setHSL: function () {
	
				function hue2rgb( p, q, t ) {
	
					if ( t < 0 ) t += 1;
					if ( t > 1 ) t -= 1;
					if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
					if ( t < 1 / 2 ) return q;
					if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
					return p;
	
				}
	
				return function setHSL( h, s, l ) {
	
					// h,s,l ranges are in 0.0 - 1.0
					h = _Math.euclideanModulo( h, 1 );
					s = _Math.clamp( s, 0, 1 );
					l = _Math.clamp( l, 0, 1 );
	
					if ( s === 0 ) {
	
						this.r = this.g = this.b = l;
	
					} else {
	
						var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
						var q = ( 2 * l ) - p;
	
						this.r = hue2rgb( q, p, h + 1 / 3 );
						this.g = hue2rgb( q, p, h );
						this.b = hue2rgb( q, p, h - 1 / 3 );
	
					}
	
					return this;
	
				};
	
			}(),
	
			setStyle: function ( style ) {
	
				function handleAlpha( string ) {
	
					if ( string === undefined ) return;
	
					if ( parseFloat( string ) < 1 ) {
	
						console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
	
					}
	
				}
	
	
				var m;
	
				if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {
	
					// rgb / hsl
	
					var color;
					var name = m[ 1 ];
					var components = m[ 2 ];
	
					switch ( name ) {
	
						case 'rgb':
						case 'rgba':
	
							if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// rgb(255,0,0) rgba(255,0,0,0.5)
								this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
								this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
								this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
	
								handleAlpha( color[ 5 ] );
	
								return this;
	
							}
	
							if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
								this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
								this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
								this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
	
								handleAlpha( color[ 5 ] );
	
								return this;
	
							}
	
							break;
	
						case 'hsl':
						case 'hsla':
	
							if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
								var h = parseFloat( color[ 1 ] ) / 360;
								var s = parseInt( color[ 2 ], 10 ) / 100;
								var l = parseInt( color[ 3 ], 10 ) / 100;
	
								handleAlpha( color[ 5 ] );
	
								return this.setHSL( h, s, l );
	
							}
	
							break;
	
					}
	
				} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {
	
					// hex color
	
					var hex = m[ 1 ];
					var size = hex.length;
	
					if ( size === 3 ) {
	
						// #ff0
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
	
						return this;
	
					} else if ( size === 6 ) {
	
						// #ff0000
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
	
						return this;
	
					}
	
				}
	
				if ( style && style.length > 0 ) {
	
					// color keywords
					var hex = ColorKeywords[ style ];
	
					if ( hex !== undefined ) {
	
						// red
						this.setHex( hex );
	
					} else {
	
						// unknown color
						console.warn( 'THREE.Color: Unknown color ' + style );
	
					}
	
				}
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this.r, this.g, this.b );
	
			},
	
			copy: function ( color ) {
	
				this.r = color.r;
				this.g = color.g;
				this.b = color.b;
	
				return this;
	
			},
	
			copyGammaToLinear: function ( color, gammaFactor ) {
	
				if ( gammaFactor === undefined ) gammaFactor = 2.0;
	
				this.r = Math.pow( color.r, gammaFactor );
				this.g = Math.pow( color.g, gammaFactor );
				this.b = Math.pow( color.b, gammaFactor );
	
				return this;
	
			},
	
			copyLinearToGamma: function ( color, gammaFactor ) {
	
				if ( gammaFactor === undefined ) gammaFactor = 2.0;
	
				var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;
	
				this.r = Math.pow( color.r, safeInverse );
				this.g = Math.pow( color.g, safeInverse );
				this.b = Math.pow( color.b, safeInverse );
	
				return this;
	
			},
	
			convertGammaToLinear: function () {
	
				var r = this.r, g = this.g, b = this.b;
	
				this.r = r * r;
				this.g = g * g;
				this.b = b * b;
	
				return this;
	
			},
	
			convertLinearToGamma: function () {
	
				this.r = Math.sqrt( this.r );
				this.g = Math.sqrt( this.g );
				this.b = Math.sqrt( this.b );
	
				return this;
	
			},
	
			getHex: function () {
	
				return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
	
			},
	
			getHexString: function () {
	
				return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
	
			},
	
			getHSL: function ( optionalTarget ) {
	
				// h,s,l ranges are in 0.0 - 1.0
	
				var hsl = optionalTarget || { h: 0, s: 0, l: 0 };
	
				var r = this.r, g = this.g, b = this.b;
	
				var max = Math.max( r, g, b );
				var min = Math.min( r, g, b );
	
				var hue, saturation;
				var lightness = ( min + max ) / 2.0;
	
				if ( min === max ) {
	
					hue = 0;
					saturation = 0;
	
				} else {
	
					var delta = max - min;
	
					saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
	
					switch ( max ) {
	
						case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
						case g: hue = ( b - r ) / delta + 2; break;
						case b: hue = ( r - g ) / delta + 4; break;
	
					}
	
					hue /= 6;
	
				}
	
				hsl.h = hue;
				hsl.s = saturation;
				hsl.l = lightness;
	
				return hsl;
	
			},
	
			getStyle: function () {
	
				return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
	
			},
	
			offsetHSL: function ( h, s, l ) {
	
				var hsl = this.getHSL();
	
				hsl.h += h; hsl.s += s; hsl.l += l;
	
				this.setHSL( hsl.h, hsl.s, hsl.l );
	
				return this;
	
			},
	
			add: function ( color ) {
	
				this.r += color.r;
				this.g += color.g;
				this.b += color.b;
	
				return this;
	
			},
	
			addColors: function ( color1, color2 ) {
	
				this.r = color1.r + color2.r;
				this.g = color1.g + color2.g;
				this.b = color1.b + color2.b;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.r += s;
				this.g += s;
				this.b += s;
	
				return this;
	
			},
	
			sub: function ( color ) {
	
				this.r = Math.max( 0, this.r - color.r );
				this.g = Math.max( 0, this.g - color.g );
				this.b = Math.max( 0, this.b - color.b );
	
				return this;
	
			},
	
			multiply: function ( color ) {
	
				this.r *= color.r;
				this.g *= color.g;
				this.b *= color.b;
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				this.r *= s;
				this.g *= s;
				this.b *= s;
	
				return this;
	
			},
	
			lerp: function ( color, alpha ) {
	
				this.r += ( color.r - this.r ) * alpha;
				this.g += ( color.g - this.g ) * alpha;
				this.b += ( color.b - this.b ) * alpha;
	
				return this;
	
			},
	
			equals: function ( c ) {
	
				return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.r = array[ offset ];
				this.g = array[ offset + 1 ];
				this.b = array[ offset + 2 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this.r;
				array[ offset + 1 ] = this.g;
				array[ offset + 2 ] = this.b;
	
				return array;
	
			},
	
			toJSON: function () {
	
				return this.getHex();
	
			}
	
		} );
	
		/**
		 * Uniforms library for shared webgl shaders
		 */
	
		var UniformsLib = {
	
			common: {
	
				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
	
				map: { value: null },
				uvTransform: { value: new Matrix3() },
	
				alphaMap: { value: null },
	
			},
	
			specularmap: {
	
				specularMap: { value: null },
	
			},
	
			envmap: {
	
				envMap: { value: null },
				flipEnvMap: { value: - 1 },
				reflectivity: { value: 1.0 },
				refractionRatio: { value: 0.98 }
	
			},
	
			aomap: {
	
				aoMap: { value: null },
				aoMapIntensity: { value: 1 }
	
			},
	
			lightmap: {
	
				lightMap: { value: null },
				lightMapIntensity: { value: 1 }
	
			},
	
			emissivemap: {
	
				emissiveMap: { value: null }
	
			},
	
			bumpmap: {
	
				bumpMap: { value: null },
				bumpScale: { value: 1 }
	
			},
	
			normalmap: {
	
				normalMap: { value: null },
				normalScale: { value: new Vector2( 1, 1 ) }
	
			},
	
			displacementmap: {
	
				displacementMap: { value: null },
				displacementScale: { value: 1 },
				displacementBias: { value: 0 }
	
			},
	
			roughnessmap: {
	
				roughnessMap: { value: null }
	
			},
	
			metalnessmap: {
	
				metalnessMap: { value: null }
	
			},
	
			gradientmap: {
	
				gradientMap: { value: null }
	
			},
	
			fog: {
	
				fogDensity: { value: 0.00025 },
				fogNear: { value: 1 },
				fogFar: { value: 2000 },
				fogColor: { value: new Color( 0xffffff ) }
	
			},
	
			lights: {
	
				ambientLightColor: { value: [] },
	
				directionalLights: { value: [], properties: {
					direction: {},
					color: {},
	
					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },
	
				directionalShadowMap: { value: [] },
				directionalShadowMatrix: { value: [] },
	
				spotLights: { value: [], properties: {
					color: {},
					position: {},
					direction: {},
					distance: {},
					coneCos: {},
					penumbraCos: {},
					decay: {},
	
					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },
	
				spotShadowMap: { value: [] },
				spotShadowMatrix: { value: [] },
	
				pointLights: { value: [], properties: {
					color: {},
					position: {},
					decay: {},
					distance: {},
	
					shadow: {},
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {},
					shadowCameraNear: {},
					shadowCameraFar: {}
				} },
	
				pointShadowMap: { value: [] },
				pointShadowMatrix: { value: [] },
	
				hemisphereLights: { value: [], properties: {
					direction: {},
					skyColor: {},
					groundColor: {}
				} },
	
				// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
				rectAreaLights: { value: [], properties: {
					color: {},
					position: {},
					width: {},
					height: {}
				} }
	
			},
	
			points: {
	
				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
				size: { value: 1.0 },
				scale: { value: 1.0 },
				map: { value: null },
				uvTransform: { value: new Matrix3() }
	
			}
	
		};
	
		/**
		 * Uniform Utilities
		 */
	
		var UniformsUtils = {
	
			merge: function ( uniforms ) {
	
				var merged = {};
	
				for ( var u = 0; u < uniforms.length; u ++ ) {
	
					var tmp = this.clone( uniforms[ u ] );
	
					for ( var p in tmp ) {
	
						merged[ p ] = tmp[ p ];
	
					}
	
				}
	
				return merged;
	
			},
	
			clone: function ( uniforms_src ) {
	
				var uniforms_dst = {};
	
				for ( var u in uniforms_src ) {
	
					uniforms_dst[ u ] = {};
	
					for ( var p in uniforms_src[ u ] ) {
	
						var parameter_src = uniforms_src[ u ][ p ];
	
						if ( parameter_src && ( parameter_src.isColor ||
							parameter_src.isMatrix3 || parameter_src.isMatrix4 ||
							parameter_src.isVector2 || parameter_src.isVector3 || parameter_src.isVector4 ||
							parameter_src.isTexture ) ) {
	
							uniforms_dst[ u ][ p ] = parameter_src.clone();
	
						} else if ( Array.isArray( parameter_src ) ) {
	
							uniforms_dst[ u ][ p ] = parameter_src.slice();
	
						} else {
	
							uniforms_dst[ u ][ p ] = parameter_src;
	
						}
	
					}
	
				}
	
				return uniforms_dst;
	
			}
	
		};
	
		var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n";
	
		var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n";
	
		var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n";
	
		var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n";
	
		var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
	
		var begin_vertex = "\nvec3 transformed = vec3( position );\n";
	
		var beginnormal_vertex = "\nvec3 objectNormal = vec3( normal );\n";
	
		var bsdfs = "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n";
	
		var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n";
	
		var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n";
	
		var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n";
	
		var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n";
	
		var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n";
	
		var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
	
		var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n";
	
		var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
	
		var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
	
		var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n";
	
		var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n";
	
		var defaultnormal_vertex = "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n";
	
		var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n";
	
		var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n";
	
		var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n";
	
		var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n";
	
		var encodings_fragment = "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n";
	
		var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n";
	
		var envmap_fragment = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n";
	
		var envmap_pars_fragment = "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n";
	
		var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n";
	
		var envmap_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n";
	
		var fog_vertex = "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif";
	
		var fog_pars_vertex = "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n";
	
		var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n";
	
		var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n";
	
		var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n";
	
		var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n";
	
		var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
	
		var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n";
	
		var lights_pars = "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n";
	
		var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n";
	
		var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n";
	
		var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n";
	
		var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n";
	
		var lights_template = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n";
	
		var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
	
		var logdepthbuf_pars_fragment = "#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n";
	
		var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif";
	
		var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n";
	
		var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n";
	
		var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n";
	
		var map_particle_fragment = "#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n";
	
		var map_particle_pars_fragment = "#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n";
	
		var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n";
	
		var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
	
		var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n";
	
		var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
	
		var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n";
	
		var normal_fragment = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n";
	
		var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n";
	
		var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n";
	
		var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n";
	
		var project_vertex = "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n";
	
		var dithering_fragment = "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n";
	
		var dithering_pars_fragment = "#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n";
	
		var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n";
	
		var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
	
		var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n";
	
		var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n";
	
		var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n";
	
		var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n";
	
		var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
	
		var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n";
	
		var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n";
	
		var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n";
	
		var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
	
		var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
	
		var tonemapping_fragment = "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n";
	
		var tonemapping_pars_fragment = "#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n";
	
		var uv_pars_fragment = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif";
	
		var uv_pars_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n";
	
		var uv_vertex = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
	
		var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
	
		var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";
	
		var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";
	
		var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n";
	
		var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n";
	
		var cube_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n";
	
		var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n";
	
		var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n";
	
		var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n";
	
		var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n";
	
		var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n";
	
		var equirect_vert = "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n";
	
		var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n";
	
		var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n";
	
		var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";
	
		var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
	
		var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";
	
		var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
	
		var meshphysical_frag = "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n";
	
		var meshphysical_vert = "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
	
		var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n";
	
		var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n";
	
		var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n";
	
		var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
	
		var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n";
	
		var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n";
	
		var ShaderChunk = {
			alphamap_fragment: alphamap_fragment,
			alphamap_pars_fragment: alphamap_pars_fragment,
			alphatest_fragment: alphatest_fragment,
			aomap_fragment: aomap_fragment,
			aomap_pars_fragment: aomap_pars_fragment,
			begin_vertex: begin_vertex,
			beginnormal_vertex: beginnormal_vertex,
			bsdfs: bsdfs,
			bumpmap_pars_fragment: bumpmap_pars_fragment,
			clipping_planes_fragment: clipping_planes_fragment,
			clipping_planes_pars_fragment: clipping_planes_pars_fragment,
			clipping_planes_pars_vertex: clipping_planes_pars_vertex,
			clipping_planes_vertex: clipping_planes_vertex,
			color_fragment: color_fragment,
			color_pars_fragment: color_pars_fragment,
			color_pars_vertex: color_pars_vertex,
			color_vertex: color_vertex,
			common: common,
			cube_uv_reflection_fragment: cube_uv_reflection_fragment,
			defaultnormal_vertex: defaultnormal_vertex,
			displacementmap_pars_vertex: displacementmap_pars_vertex,
			displacementmap_vertex: displacementmap_vertex,
			emissivemap_fragment: emissivemap_fragment,
			emissivemap_pars_fragment: emissivemap_pars_fragment,
			encodings_fragment: encodings_fragment,
			encodings_pars_fragment: encodings_pars_fragment,
			envmap_fragment: envmap_fragment,
			envmap_pars_fragment: envmap_pars_fragment,
			envmap_pars_vertex: envmap_pars_vertex,
			envmap_vertex: envmap_vertex,
			fog_vertex: fog_vertex,
			fog_pars_vertex: fog_pars_vertex,
			fog_fragment: fog_fragment,
			fog_pars_fragment: fog_pars_fragment,
			gradientmap_pars_fragment: gradientmap_pars_fragment,
			lightmap_fragment: lightmap_fragment,
			lightmap_pars_fragment: lightmap_pars_fragment,
			lights_lambert_vertex: lights_lambert_vertex,
			lights_pars: lights_pars,
			lights_phong_fragment: lights_phong_fragment,
			lights_phong_pars_fragment: lights_phong_pars_fragment,
			lights_physical_fragment: lights_physical_fragment,
			lights_physical_pars_fragment: lights_physical_pars_fragment,
			lights_template: lights_template,
			logdepthbuf_fragment: logdepthbuf_fragment,
			logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
			logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
			logdepthbuf_vertex: logdepthbuf_vertex,
			map_fragment: map_fragment,
			map_pars_fragment: map_pars_fragment,
			map_particle_fragment: map_particle_fragment,
			map_particle_pars_fragment: map_particle_pars_fragment,
			metalnessmap_fragment: metalnessmap_fragment,
			metalnessmap_pars_fragment: metalnessmap_pars_fragment,
			morphnormal_vertex: morphnormal_vertex,
			morphtarget_pars_vertex: morphtarget_pars_vertex,
			morphtarget_vertex: morphtarget_vertex,
			normal_fragment: normal_fragment,
			normalmap_pars_fragment: normalmap_pars_fragment,
			packing: packing,
			premultiplied_alpha_fragment: premultiplied_alpha_fragment,
			project_vertex: project_vertex,
			dithering_fragment: dithering_fragment,
			dithering_pars_fragment: dithering_pars_fragment,
			roughnessmap_fragment: roughnessmap_fragment,
			roughnessmap_pars_fragment: roughnessmap_pars_fragment,
			shadowmap_pars_fragment: shadowmap_pars_fragment,
			shadowmap_pars_vertex: shadowmap_pars_vertex,
			shadowmap_vertex: shadowmap_vertex,
			shadowmask_pars_fragment: shadowmask_pars_fragment,
			skinbase_vertex: skinbase_vertex,
			skinning_pars_vertex: skinning_pars_vertex,
			skinning_vertex: skinning_vertex,
			skinnormal_vertex: skinnormal_vertex,
			specularmap_fragment: specularmap_fragment,
			specularmap_pars_fragment: specularmap_pars_fragment,
			tonemapping_fragment: tonemapping_fragment,
			tonemapping_pars_fragment: tonemapping_pars_fragment,
			uv_pars_fragment: uv_pars_fragment,
			uv_pars_vertex: uv_pars_vertex,
			uv_vertex: uv_vertex,
			uv2_pars_fragment: uv2_pars_fragment,
			uv2_pars_vertex: uv2_pars_vertex,
			uv2_vertex: uv2_vertex,
			worldpos_vertex: worldpos_vertex,
	
			cube_frag: cube_frag,
			cube_vert: cube_vert,
			depth_frag: depth_frag,
			depth_vert: depth_vert,
			distanceRGBA_frag: distanceRGBA_frag,
			distanceRGBA_vert: distanceRGBA_vert,
			equirect_frag: equirect_frag,
			equirect_vert: equirect_vert,
			linedashed_frag: linedashed_frag,
			linedashed_vert: linedashed_vert,
			meshbasic_frag: meshbasic_frag,
			meshbasic_vert: meshbasic_vert,
			meshlambert_frag: meshlambert_frag,
			meshlambert_vert: meshlambert_vert,
			meshphong_frag: meshphong_frag,
			meshphong_vert: meshphong_vert,
			meshphysical_frag: meshphysical_frag,
			meshphysical_vert: meshphysical_vert,
			normal_frag: normal_frag,
			normal_vert: normal_vert,
			points_frag: points_frag,
			points_vert: points_vert,
			shadow_frag: shadow_frag,
			shadow_vert: shadow_vert
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 */
	
		var ShaderLib = {
	
			basic: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.specularmap,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.fog
				] ),
	
				vertexShader: ShaderChunk.meshbasic_vert,
				fragmentShader: ShaderChunk.meshbasic_frag
	
			},
	
			lambert: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.specularmap,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) }
					}
				] ),
	
				vertexShader: ShaderChunk.meshlambert_vert,
				fragmentShader: ShaderChunk.meshlambert_frag
	
			},
	
			phong: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.specularmap,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.gradientmap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) },
						specular: { value: new Color( 0x111111 ) },
						shininess: { value: 30 }
					}
				] ),
	
				vertexShader: ShaderChunk.meshphong_vert,
				fragmentShader: ShaderChunk.meshphong_frag
	
			},
	
			standard: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.roughnessmap,
					UniformsLib.metalnessmap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) },
						roughness: { value: 0.5 },
						metalness: { value: 0.5 },
						envMapIntensity: { value: 1 } // temporary
					}
				] ),
	
				vertexShader: ShaderChunk.meshphysical_vert,
				fragmentShader: ShaderChunk.meshphysical_frag
	
			},
	
			points: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.points,
					UniformsLib.fog
				] ),
	
				vertexShader: ShaderChunk.points_vert,
				fragmentShader: ShaderChunk.points_frag
	
			},
	
			dashed: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.fog,
					{
						scale: { value: 1 },
						dashSize: { value: 1 },
						totalSize: { value: 2 }
					}
				] ),
	
				vertexShader: ShaderChunk.linedashed_vert,
				fragmentShader: ShaderChunk.linedashed_frag
	
			},
	
			depth: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.displacementmap
				] ),
	
				vertexShader: ShaderChunk.depth_vert,
				fragmentShader: ShaderChunk.depth_frag
	
			},
	
			normal: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					{
						opacity: { value: 1.0 }
					}
				] ),
	
				vertexShader: ShaderChunk.normal_vert,
				fragmentShader: ShaderChunk.normal_frag
	
			},
	
			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */
	
			cube: {
	
				uniforms: {
					tCube: { value: null },
					tFlip: { value: - 1 },
					opacity: { value: 1.0 }
				},
	
				vertexShader: ShaderChunk.cube_vert,
				fragmentShader: ShaderChunk.cube_frag
	
			},
	
			equirect: {
	
				uniforms: {
					tEquirect: { value: null },
				},
	
				vertexShader: ShaderChunk.equirect_vert,
				fragmentShader: ShaderChunk.equirect_frag
	
			},
	
			distanceRGBA: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.common,
					UniformsLib.displacementmap,
					{
						referencePosition: { value: new Vector3() },
						nearDistance: { value: 1 },
						farDistance: { value: 1000 }
					}
				] ),
	
				vertexShader: ShaderChunk.distanceRGBA_vert,
				fragmentShader: ShaderChunk.distanceRGBA_frag
	
			},
	
			shadow: {
	
				uniforms: UniformsUtils.merge( [
					UniformsLib.lights,
					UniformsLib.fog,
					{
						color: { value: new Color( 0x00000 ) },
						opacity: { value: 1.0 }
					},
				] ),
	
				vertexShader: ShaderChunk.shadow_vert,
				fragmentShader: ShaderChunk.shadow_frag
	
			}
	
		};
	
		ShaderLib.physical = {
	
			uniforms: UniformsUtils.merge( [
				ShaderLib.standard.uniforms,
				{
					clearCoat: { value: 0 },
					clearCoatRoughness: { value: 0 }
				}
			] ),
	
			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Box2( min, max ) {
	
			this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );
	
		}
	
		Object.assign( Box2.prototype, {
	
			set: function ( min, max ) {
	
				this.min.copy( min );
				this.max.copy( max );
	
				return this;
	
			},
	
			setFromPoints: function ( points ) {
	
				this.makeEmpty();
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					this.expandByPoint( points[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromCenterAndSize: function () {
	
				var v1 = new Vector2();
	
				return function setFromCenterAndSize( center, size ) {
	
					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );
	
					return this;
	
				};
	
			}(),
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( box ) {
	
				this.min.copy( box.min );
				this.max.copy( box.max );
	
				return this;
	
			},
	
			makeEmpty: function () {
	
				this.min.x = this.min.y = + Infinity;
				this.max.x = this.max.y = - Infinity;
	
				return this;
	
			},
	
			isEmpty: function () {
	
				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
	
			},
	
			getCenter: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector2();
				return this.isEmpty() ? result.set( 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
			},
	
			getSize: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector2();
				return this.isEmpty() ? result.set( 0, 0 ) : result.subVectors( this.max, this.min );
	
			},
	
			expandByPoint: function ( point ) {
	
				this.min.min( point );
				this.max.max( point );
	
				return this;
	
			},
	
			expandByVector: function ( vector ) {
	
				this.min.sub( vector );
				this.max.add( vector );
	
				return this;
	
			},
	
			expandByScalar: function ( scalar ) {
	
				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );
	
				return this;
	
			},
	
			containsPoint: function ( point ) {
	
				return point.x < this.min.x || point.x > this.max.x ||
					point.y < this.min.y || point.y > this.max.y ? false : true;
	
			},
	
			containsBox: function ( box ) {
	
				return this.min.x <= box.min.x && box.max.x <= this.max.x &&
					this.min.y <= box.min.y && box.max.y <= this.max.y;
	
			},
	
			getParameter: function ( point, optionalTarget ) {
	
				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.
	
				var result = optionalTarget || new Vector2();
	
				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y )
				);
	
			},
	
			intersectsBox: function ( box ) {
	
				// using 4 splitting planes to rule out intersections
	
				return box.max.x < this.min.x || box.min.x > this.max.x ||
					box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
	
			},
	
			clampPoint: function ( point, optionalTarget ) {
	
				var result = optionalTarget || new Vector2();
				return result.copy( point ).clamp( this.min, this.max );
	
			},
	
			distanceToPoint: function () {
	
				var v1 = new Vector2();
	
				return function distanceToPoint( point ) {
	
					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();
	
				};
	
			}(),
	
			intersect: function ( box ) {
	
				this.min.max( box.min );
				this.max.min( box.max );
	
				return this;
	
			},
	
			union: function ( box ) {
	
				this.min.min( box.min );
				this.max.max( box.max );
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.min.add( offset );
				this.max.add( offset );
	
				return this;
	
			},
	
			equals: function ( box ) {
	
				return box.min.equals( this.min ) && box.max.equals( this.max );
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function WebGLFlareRenderer( renderer, gl, state, textures, capabilities ) {
	
			var vertexBuffer, elementBuffer;
			var shader, program, attributes, uniforms;
	
			var tempTexture, occlusionTexture;
	
			function init() {
	
				var vertices = new Float32Array( [
					- 1, - 1, 0, 0,
					  1, - 1, 1, 0,
					  1, 1, 1, 1,
					- 1, 1, 0, 1
				] );
	
				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );
	
				// buffers
	
				vertexBuffer = gl.createBuffer();
				elementBuffer = gl.createBuffer();
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
	
				// textures
	
				tempTexture = gl.createTexture();
				occlusionTexture = gl.createTexture();
	
				state.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	
				state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
				gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	
				shader = {
	
					vertexShader: [
	
						'uniform lowp int renderType;',
	
						'uniform vec3 screenPosition;',
						'uniform vec2 scale;',
						'uniform float rotation;',
	
						'uniform sampler2D occlusionMap;',
	
						'attribute vec2 position;',
						'attribute vec2 uv;',
	
						'varying vec2 vUV;',
						'varying float vVisibility;',
	
						'void main() {',
	
						'	vUV = uv;',
	
						'	vec2 pos = position;',
	
						'	if ( renderType == 2 ) {',
	
						'		vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',
						'		visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',
	
						'		vVisibility =        visibility.r / 9.0;',
						'		vVisibility *= 1.0 - visibility.g / 9.0;',
						'		vVisibility *=       visibility.b / 9.0;',
						'		vVisibility *= 1.0 - visibility.a / 9.0;',
	
						'		pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',
						'		pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',
	
						'	}',
	
						'	gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',
	
						'}'
	
					].join( '\n' ),
	
					fragmentShader: [
	
						'uniform lowp int renderType;',
	
						'uniform sampler2D map;',
						'uniform float opacity;',
						'uniform vec3 color;',
	
						'varying vec2 vUV;',
						'varying float vVisibility;',
	
						'void main() {',
	
						// pink square
	
						'	if ( renderType == 0 ) {',
	
						'		gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',
	
						// restore
	
						'	} else if ( renderType == 1 ) {',
	
						'		gl_FragColor = texture2D( map, vUV );',
	
						// flare
	
						'	} else {',
	
						'		vec4 texture = texture2D( map, vUV );',
						'		texture.a *= opacity * vVisibility;',
						'		gl_FragColor = texture;',
						'		gl_FragColor.rgb *= color;',
	
						'	}',
	
						'}'
	
					].join( '\n' )
	
				};
	
				program = createProgram( shader );
	
				attributes = {
					vertex: gl.getAttribLocation( program, 'position' ),
					uv: gl.getAttribLocation( program, 'uv' )
				};
	
				uniforms = {
					renderType: gl.getUniformLocation( program, 'renderType' ),
					map: gl.getUniformLocation( program, 'map' ),
					occlusionMap: gl.getUniformLocation( program, 'occlusionMap' ),
					opacity: gl.getUniformLocation( program, 'opacity' ),
					color: gl.getUniformLocation( program, 'color' ),
					scale: gl.getUniformLocation( program, 'scale' ),
					rotation: gl.getUniformLocation( program, 'rotation' ),
					screenPosition: gl.getUniformLocation( program, 'screenPosition' )
				};
	
			}
	
			/*
			 * Render lens flares
			 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
			 *         reads these back and calculates occlusion.
			 */
	
			this.render = function ( flares, scene, camera, viewport ) {
	
				if ( flares.length === 0 ) return;
	
				var tempPosition = new Vector3();
	
				var invAspect = viewport.w / viewport.z,
					halfViewportWidth = viewport.z * 0.5,
					halfViewportHeight = viewport.w * 0.5;
	
				var size = 16 / viewport.w,
					scale = new Vector2( size * invAspect, size );
	
				var screenPosition = new Vector3( 1, 1, 0 ),
					screenPositionPixels = new Vector2( 1, 1 );
	
				var validArea = new Box2();
	
				validArea.min.set( viewport.x, viewport.y );
				validArea.max.set( viewport.x + ( viewport.z - 16 ), viewport.y + ( viewport.w - 16 ) );
	
				if ( program === undefined ) {
	
					init();
	
				}
	
				state.useProgram( program );
	
				state.initAttributes();
				state.enableAttribute( attributes.vertex );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();
	
				// loop through all lens flares to update their occlusion and positions
				// setup gl and common used attribs/uniforms
	
				gl.uniform1i( uniforms.occlusionMap, 0 );
				gl.uniform1i( uniforms.map, 1 );
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	
				state.disable( gl.CULL_FACE );
				state.buffers.depth.setMask( false );
	
				for ( var i = 0, l = flares.length; i < l; i ++ ) {
	
					size = 16 / viewport.w;
					scale.set( size * invAspect, size );
	
					// calc object screen position
	
					var flare = flares[ i ];
	
					tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );
	
					tempPosition.applyMatrix4( camera.matrixWorldInverse );
					tempPosition.applyMatrix4( camera.projectionMatrix );
	
					// setup arrays for gl programs
	
					screenPosition.copy( tempPosition );
	
					// horizontal and vertical coordinate of the lower left corner of the pixels to copy
	
					screenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;
					screenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;
	
					// screen cull
	
					if ( validArea.containsPoint( screenPositionPixels ) === true ) {
	
						// save current RGB to temp texture
	
						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, null );
						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );
	
	
						// render pink quad
	
						gl.uniform1i( uniforms.renderType, 0 );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
	
						state.disable( gl.BLEND );
						state.enable( gl.DEPTH_TEST );
	
						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
	
						// copy result to occlusionMap
	
						state.activeTexture( gl.TEXTURE0 );
						state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
						gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );
	
	
						// restore graphics
	
						gl.uniform1i( uniforms.renderType, 1 );
						state.disable( gl.DEPTH_TEST );
	
						state.activeTexture( gl.TEXTURE1 );
						state.bindTexture( gl.TEXTURE_2D, tempTexture );
						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
	
						// update object positions
	
						flare.positionScreen.copy( screenPosition );
	
						if ( flare.customUpdateCallback ) {
	
							flare.customUpdateCallback( flare );
	
						} else {
	
							flare.updateLensFlares();
	
						}
	
						// render flares
	
						gl.uniform1i( uniforms.renderType, 2 );
						state.enable( gl.BLEND );
	
						for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {
	
							var sprite = flare.lensFlares[ j ];
	
							if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {
	
								screenPosition.x = sprite.x;
								screenPosition.y = sprite.y;
								screenPosition.z = sprite.z;
	
								size = sprite.size * sprite.scale / viewport.w;
	
								scale.x = size * invAspect;
								scale.y = size;
	
								gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
								gl.uniform2f( uniforms.scale, scale.x, scale.y );
								gl.uniform1f( uniforms.rotation, sprite.rotation );
	
								gl.uniform1f( uniforms.opacity, sprite.opacity );
								gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );
	
								state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
	
								textures.setTexture2D( sprite.texture, 1 );
	
								gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
							}
	
						}
	
					}
	
				}
	
				// restore gl
	
				state.enable( gl.CULL_FACE );
				state.enable( gl.DEPTH_TEST );
				state.buffers.depth.setMask( true );
	
				state.reset();
	
			};
	
			function createProgram( shader ) {
	
				var program = gl.createProgram();
	
				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
				var vertexShader = gl.createShader( gl.VERTEX_SHADER );
	
				var prefix = 'precision ' + capabilities.precision + ' float;\n';
	
				gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
				gl.shaderSource( vertexShader, prefix + shader.vertexShader );
	
				gl.compileShader( fragmentShader );
				gl.compileShader( vertexShader );
	
				gl.attachShader( program, fragmentShader );
				gl.attachShader( program, vertexShader );
	
				gl.linkProgram( program );
	
				return program;
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
			Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.needsUpdate = true;
	
		}
	
		CanvasTexture.prototype = Object.create( Texture.prototype );
		CanvasTexture.prototype.constructor = CanvasTexture;
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function WebGLSpriteRenderer( renderer, gl, state, textures, capabilities ) {
	
			var vertexBuffer, elementBuffer;
			var program, attributes, uniforms;
	
			var texture;
	
			// decompose matrixWorld
	
			var spritePosition = new Vector3();
			var spriteRotation = new Quaternion();
			var spriteScale = new Vector3();
	
			function init() {
	
				var vertices = new Float32Array( [
					- 0.5, - 0.5, 0, 0,
					  0.5, - 0.5, 1, 0,
					  0.5, 0.5, 1, 1,
					- 0.5, 0.5, 0, 1
				] );
	
				var faces = new Uint16Array( [
					0, 1, 2,
					0, 2, 3
				] );
	
				vertexBuffer = gl.createBuffer();
				elementBuffer = gl.createBuffer();
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
				gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
	
				program = createProgram();
	
				attributes = {
					position: gl.getAttribLocation( program, 'position' ),
					uv: gl.getAttribLocation( program, 'uv' )
				};
	
				uniforms = {
					uvOffset: gl.getUniformLocation( program, 'uvOffset' ),
					uvScale: gl.getUniformLocation( program, 'uvScale' ),
	
					rotation: gl.getUniformLocation( program, 'rotation' ),
					scale: gl.getUniformLocation( program, 'scale' ),
	
					color: gl.getUniformLocation( program, 'color' ),
					map: gl.getUniformLocation( program, 'map' ),
					opacity: gl.getUniformLocation( program, 'opacity' ),
	
					modelViewMatrix: gl.getUniformLocation( program, 'modelViewMatrix' ),
					projectionMatrix: gl.getUniformLocation( program, 'projectionMatrix' ),
	
					fogType: gl.getUniformLocation( program, 'fogType' ),
					fogDensity: gl.getUniformLocation( program, 'fogDensity' ),
					fogNear: gl.getUniformLocation( program, 'fogNear' ),
					fogFar: gl.getUniformLocation( program, 'fogFar' ),
					fogColor: gl.getUniformLocation( program, 'fogColor' ),
					fogDepth: gl.getUniformLocation( program, 'fogDepth' ),
	
					alphaTest: gl.getUniformLocation( program, 'alphaTest' )
				};
	
				var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
				canvas.width = 8;
				canvas.height = 8;
	
				var context = canvas.getContext( '2d' );
				context.fillStyle = 'white';
				context.fillRect( 0, 0, 8, 8 );
	
				texture = new CanvasTexture( canvas );
	
			}
	
			this.render = function ( sprites, scene, camera ) {
	
				if ( sprites.length === 0 ) return;
	
				// setup gl
	
				if ( program === undefined ) {
	
					init();
	
				}
	
				state.useProgram( program );
	
				state.initAttributes();
				state.enableAttribute( attributes.position );
				state.enableAttribute( attributes.uv );
				state.disableUnusedAttributes();
	
				state.disable( gl.CULL_FACE );
				state.enable( gl.BLEND );
	
				gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
				gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
				gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
	
				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	
				gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );
	
				state.activeTexture( gl.TEXTURE0 );
				gl.uniform1i( uniforms.map, 0 );
	
				var oldFogType = 0;
				var sceneFogType = 0;
				var fog = scene.fog;
	
				if ( fog ) {
	
					gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );
	
					if ( fog.isFog ) {
	
						gl.uniform1f( uniforms.fogNear, fog.near );
						gl.uniform1f( uniforms.fogFar, fog.far );
	
						gl.uniform1i( uniforms.fogType, 1 );
						oldFogType = 1;
						sceneFogType = 1;
	
					} else if ( fog.isFogExp2 ) {
	
						gl.uniform1f( uniforms.fogDensity, fog.density );
	
						gl.uniform1i( uniforms.fogType, 2 );
						oldFogType = 2;
						sceneFogType = 2;
	
					}
	
				} else {
	
					gl.uniform1i( uniforms.fogType, 0 );
					oldFogType = 0;
					sceneFogType = 0;
	
				}
	
	
				// update positions and sort
	
				for ( var i = 0, l = sprites.length; i < l; i ++ ) {
	
					var sprite = sprites[ i ];
	
					sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
					sprite.z = - sprite.modelViewMatrix.elements[ 14 ];
	
				}
	
				sprites.sort( painterSortStable );
	
				// render all sprites
	
				var scale = [];
	
				for ( var i = 0, l = sprites.length; i < l; i ++ ) {
	
					var sprite = sprites[ i ];
					var material = sprite.material;
	
					if ( material.visible === false ) continue;
	
					sprite.onBeforeRender( renderer, scene, camera, undefined, material, undefined );
	
					gl.uniform1f( uniforms.alphaTest, material.alphaTest );
					gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );
	
					sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );
	
					scale[ 0 ] = spriteScale.x;
					scale[ 1 ] = spriteScale.y;
	
					var fogType = 0;
	
					if ( scene.fog && material.fog ) {
	
						fogType = sceneFogType;
	
					}
	
					if ( oldFogType !== fogType ) {
	
						gl.uniform1i( uniforms.fogType, fogType );
						oldFogType = fogType;
	
					}
	
					if ( material.map !== null ) {
	
						gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
						gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );
	
					} else {
	
						gl.uniform2f( uniforms.uvOffset, 0, 0 );
						gl.uniform2f( uniforms.uvScale, 1, 1 );
	
					}
	
					gl.uniform1f( uniforms.opacity, material.opacity );
					gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );
	
					gl.uniform1f( uniforms.rotation, material.rotation );
					gl.uniform2fv( uniforms.scale, scale );
	
					state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
					state.buffers.depth.setTest( material.depthTest );
					state.buffers.depth.setMask( material.depthWrite );
					state.buffers.color.setMask( material.colorWrite );
	
					textures.setTexture2D( material.map || texture, 0 );
	
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
					sprite.onAfterRender( renderer, scene, camera, undefined, material, undefined );
	
				}
	
				// restore gl
	
				state.enable( gl.CULL_FACE );
	
				state.reset();
	
			};
	
			function createProgram() {
	
				var program = gl.createProgram();
	
				var vertexShader = gl.createShader( gl.VERTEX_SHADER );
				var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
	
				gl.shaderSource( vertexShader, [
	
					'precision ' + capabilities.precision + ' float;',
	
					'#define SHADER_NAME ' + 'SpriteMaterial',
	
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform float rotation;',
					'uniform vec2 scale;',
					'uniform vec2 uvOffset;',
					'uniform vec2 uvScale;',
	
					'attribute vec2 position;',
					'attribute vec2 uv;',
	
					'varying vec2 vUV;',
					'varying float fogDepth;',
	
					'void main() {',
	
					'	vUV = uvOffset + uv * uvScale;',
	
					'	vec2 alignedPosition = position * scale;',
	
					'	vec2 rotatedPosition;',
					'	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',
	
					'	vec4 mvPosition;',
	
					'	mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'	mvPosition.xy += rotatedPosition;',
	
					'	gl_Position = projectionMatrix * mvPosition;',
	
					'	fogDepth = - mvPosition.z;',
	
					'}'
	
				].join( '\n' ) );
	
				gl.shaderSource( fragmentShader, [
	
					'precision ' + capabilities.precision + ' float;',
	
					'#define SHADER_NAME ' + 'SpriteMaterial',
	
					'uniform vec3 color;',
					'uniform sampler2D map;',
					'uniform float opacity;',
	
					'uniform int fogType;',
					'uniform vec3 fogColor;',
					'uniform float fogDensity;',
					'uniform float fogNear;',
					'uniform float fogFar;',
					'uniform float alphaTest;',
	
					'varying vec2 vUV;',
					'varying float fogDepth;',
	
					'void main() {',
	
					'	vec4 texture = texture2D( map, vUV );',
	
					'	gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',
	
					'	if ( gl_FragColor.a < alphaTest ) discard;',
	
					'	if ( fogType > 0 ) {',
	
					'		float fogFactor = 0.0;',
	
					'		if ( fogType == 1 ) {',
	
					'			fogFactor = smoothstep( fogNear, fogFar, fogDepth );',
	
					'		} else {',
	
					'			const float LOG2 = 1.442695;',
					'			fogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );',
					'			fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',
	
					'		}',
	
					'		gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );',
	
					'	}',
	
					'}'
	
				].join( '\n' ) );
	
				gl.compileShader( vertexShader );
				gl.compileShader( fragmentShader );
	
				gl.attachShader( program, vertexShader );
				gl.attachShader( program, fragmentShader );
	
				gl.linkProgram( program );
	
				return program;
	
			}
	
			function painterSortStable( a, b ) {
	
				if ( a.renderOrder !== b.renderOrder ) {
	
					return a.renderOrder - b.renderOrder;
	
				} else if ( a.z !== b.z ) {
	
					return b.z - a.z;
	
				} else {
	
					return b.id - a.id;
	
				}
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		var materialId = 0;
	
		function Material() {
	
			Object.defineProperty( this, 'id', { value: materialId ++ } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'Material';
	
			this.fog = true;
			this.lights = true;
	
			this.blending = NormalBlending;
			this.side = FrontSide;
			this.flatShading = false;
			this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors
	
			this.opacity = 1;
			this.transparent = false;
	
			this.blendSrc = SrcAlphaFactor;
			this.blendDst = OneMinusSrcAlphaFactor;
			this.blendEquation = AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;
	
			this.depthFunc = LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;
	
			this.clippingPlanes = null;
			this.clipIntersection = false;
			this.clipShadows = false;
	
			this.colorWrite = true;
	
			this.precision = null; // override the renderer's default precision for this material
	
			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;
	
			this.dithering = false;
	
			this.alphaTest = 0;
			this.premultipliedAlpha = false;
	
			this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer
	
			this.visible = true;
	
			this.userData = {};
	
			this.needsUpdate = true;
	
		}
	
		Object.assign( Material.prototype, EventDispatcher.prototype, {
	
			isMaterial: true,
	
			onBeforeCompile: function () {},
	
			setValues: function ( values ) {
	
				if ( values === undefined ) return;
	
				for ( var key in values ) {
	
					var newValue = values[ key ];
	
					if ( newValue === undefined ) {
	
						console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
						continue;
	
					}
	
					// for backward compatability if shading is set in the constructor
					if ( key === 'shading' ) {
	
						console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
						this.flatShading = ( newValue === FlatShading ) ? true : false;
						continue;
	
					}
	
					var currentValue = this[ key ];
	
					if ( currentValue === undefined ) {
	
						console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
						continue;
	
					}
	
					if ( currentValue && currentValue.isColor ) {
	
						currentValue.set( newValue );
	
					} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {
	
						currentValue.copy( newValue );
	
					} else if ( key === 'overdraw' ) {
	
						// ensure overdraw is backwards-compatible with legacy boolean type
						this[ key ] = Number( newValue );
	
					} else {
	
						this[ key ] = newValue;
	
					}
	
				}
	
			},
	
			toJSON: function ( meta ) {
	
				var isRoot = ( meta === undefined || typeof meta === 'string' );
	
				if ( isRoot ) {
	
					meta = {
						textures: {},
						images: {}
					};
	
				}
	
				var data = {
					metadata: {
						version: 4.5,
						type: 'Material',
						generator: 'Material.toJSON'
					}
				};
	
				// standard Material serialization
				data.uuid = this.uuid;
				data.type = this.type;
	
				if ( this.name !== '' ) data.name = this.name;
	
				if ( this.color && this.color.isColor ) data.color = this.color.getHex();
	
				if ( this.roughness !== undefined ) data.roughness = this.roughness;
				if ( this.metalness !== undefined ) data.metalness = this.metalness;
	
				if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
				if ( this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;
	
				if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
				if ( this.shininess !== undefined ) data.shininess = this.shininess;
				if ( this.clearCoat !== undefined ) data.clearCoat = this.clearCoat;
				if ( this.clearCoatRoughness !== undefined ) data.clearCoatRoughness = this.clearCoatRoughness;
	
				if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
				if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
				if ( this.lightMap && this.lightMap.isTexture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
				if ( this.bumpMap && this.bumpMap.isTexture ) {
	
					data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
					data.bumpScale = this.bumpScale;
	
				}
				if ( this.normalMap && this.normalMap.isTexture ) {
	
					data.normalMap = this.normalMap.toJSON( meta ).uuid;
					data.normalScale = this.normalScale.toArray();
	
				}
				if ( this.displacementMap && this.displacementMap.isTexture ) {
	
					data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
					data.displacementScale = this.displacementScale;
					data.displacementBias = this.displacementBias;
	
				}
				if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
				if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;
	
				if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
				if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
	
				if ( this.envMap && this.envMap.isTexture ) {
	
					data.envMap = this.envMap.toJSON( meta ).uuid;
					data.reflectivity = this.reflectivity; // Scale behind envMap
	
				}
	
				if ( this.gradientMap && this.gradientMap.isTexture ) {
	
					data.gradientMap = this.gradientMap.toJSON( meta ).uuid;
	
				}
	
				if ( this.size !== undefined ) data.size = this.size;
				if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
	
				if ( this.blending !== NormalBlending ) data.blending = this.blending;
				if ( this.flatShading === true ) data.flatShading = this.flatShading;
				if ( this.side !== FrontSide ) data.side = this.side;
				if ( this.vertexColors !== NoColors ) data.vertexColors = this.vertexColors;
	
				if ( this.opacity < 1 ) data.opacity = this.opacity;
				if ( this.transparent === true ) data.transparent = this.transparent;
	
				data.depthFunc = this.depthFunc;
				data.depthTest = this.depthTest;
				data.depthWrite = this.depthWrite;
	
				// rotation (SpriteMaterial)
				if ( this.rotation !== 0 ) data.rotation = this.rotation;
	
				if ( this.linewidth !== 1 ) data.linewidth = this.linewidth;
				if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
				if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
				if ( this.scale !== undefined ) data.scale = this.scale;
	
				if ( this.dithering === true ) data.dithering = true;
	
				if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
				if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
	
				if ( this.wireframe === true ) data.wireframe = this.wireframe;
				if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
				if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
				if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;
	
				if ( this.morphTargets === true ) data.morphTargets = true;
				if ( this.skinning === true ) data.skinning = true;
	
				if ( this.visible === false ) data.visible = false;
				if ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;
	
				// TODO: Copied from Object3D.toJSON
	
				function extractFromCache( cache ) {
	
					var values = [];
	
					for ( var key in cache ) {
	
						var data = cache[ key ];
						delete data.metadata;
						values.push( data );
	
					}
	
					return values;
	
				}
	
				if ( isRoot ) {
	
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );
	
					if ( textures.length > 0 ) data.textures = textures;
					if ( images.length > 0 ) data.images = images;
	
				}
	
				return data;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.name = source.name;
	
				this.fog = source.fog;
				this.lights = source.lights;
	
				this.blending = source.blending;
				this.side = source.side;
				this.flatShading = source.flatShading;
				this.vertexColors = source.vertexColors;
	
				this.opacity = source.opacity;
				this.transparent = source.transparent;
	
				this.blendSrc = source.blendSrc;
				this.blendDst = source.blendDst;
				this.blendEquation = source.blendEquation;
				this.blendSrcAlpha = source.blendSrcAlpha;
				this.blendDstAlpha = source.blendDstAlpha;
				this.blendEquationAlpha = source.blendEquationAlpha;
	
				this.depthFunc = source.depthFunc;
				this.depthTest = source.depthTest;
				this.depthWrite = source.depthWrite;
	
				this.colorWrite = source.colorWrite;
	
				this.precision = source.precision;
	
				this.polygonOffset = source.polygonOffset;
				this.polygonOffsetFactor = source.polygonOffsetFactor;
				this.polygonOffsetUnits = source.polygonOffsetUnits;
	
				this.dithering = source.dithering;
	
				this.alphaTest = source.alphaTest;
				this.premultipliedAlpha = source.premultipliedAlpha;
	
				this.overdraw = source.overdraw;
	
				this.visible = source.visible;
				this.userData = JSON.parse( JSON.stringify( source.userData ) );
	
				this.clipShadows = source.clipShadows;
				this.clipIntersection = source.clipIntersection;
	
				var srcPlanes = source.clippingPlanes,
					dstPlanes = null;
	
				if ( srcPlanes !== null ) {
	
					var n = srcPlanes.length;
					dstPlanes = new Array( n );
	
					for ( var i = 0; i !== n; ++ i )
						dstPlanes[ i ] = srcPlanes[ i ].clone();
	
				}
	
				this.clippingPlanes = dstPlanes;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / https://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 * }
		 */
	
		function MeshDepthMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshDepthMaterial';
	
			this.depthPacking = BasicDepthPacking;
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.map = null;
	
			this.alphaMap = null;
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false;
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		MeshDepthMaterial.prototype = Object.create( Material.prototype );
		MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
	
		MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
	
		MeshDepthMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.depthPacking = source.depthPacking;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			this.map = source.map;
	
			this.alphaMap = source.alphaMap;
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			return this;
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *
		 *  referencePosition: <float>,
		 *  nearDistance: <float>,
		 *  farDistance: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>
		 *
		 * }
		 */
	
		function MeshDistanceMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshDistanceMaterial';
	
			this.referencePosition = new Vector3();
			this.nearDistance = 1;
			this.farDistance = 1000;
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.map = null;
	
			this.alphaMap = null;
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.fog = false;
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		MeshDistanceMaterial.prototype = Object.create( Material.prototype );
		MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
	
		MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
	
		MeshDistanceMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.referencePosition.copy( source.referencePosition );
			this.nearDistance = source.nearDistance;
			this.farDistance = source.farDistance;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			this.map = source.map;
	
			this.alphaMap = source.alphaMap;
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			return this;
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Box3( min, max ) {
	
			this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );
	
		}
	
		Object.assign( Box3.prototype, {
	
			isBox3: true,
	
			set: function ( min, max ) {
	
				this.min.copy( min );
				this.max.copy( max );
	
				return this;
	
			},
	
			setFromArray: function ( array ) {
	
				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;
	
				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;
	
				for ( var i = 0, l = array.length; i < l; i += 3 ) {
	
					var x = array[ i ];
					var y = array[ i + 1 ];
					var z = array[ i + 2 ];
	
					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( z < minZ ) minZ = z;
	
					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;
					if ( z > maxZ ) maxZ = z;
	
				}
	
				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );
	
				return this;
	
			},
	
			setFromBufferAttribute: function ( attribute ) {
	
				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;
	
				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;
	
				for ( var i = 0, l = attribute.count; i < l; i ++ ) {
	
					var x = attribute.getX( i );
					var y = attribute.getY( i );
					var z = attribute.getZ( i );
	
					if ( x < minX ) minX = x;
					if ( y < minY ) minY = y;
					if ( z < minZ ) minZ = z;
	
					if ( x > maxX ) maxX = x;
					if ( y > maxY ) maxY = y;
					if ( z > maxZ ) maxZ = z;
	
				}
	
				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );
	
				return this;
	
			},
	
			setFromPoints: function ( points ) {
	
				this.makeEmpty();
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					this.expandByPoint( points[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromCenterAndSize: function () {
	
				var v1 = new Vector3();
	
				return function setFromCenterAndSize( center, size ) {
	
					var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
	
					this.min.copy( center ).sub( halfSize );
					this.max.copy( center ).add( halfSize );
	
					return this;
	
				};
	
			}(),
	
			setFromObject: function ( object ) {
	
				this.makeEmpty();
	
				return this.expandByObject( object );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( box ) {
	
				this.min.copy( box.min );
				this.max.copy( box.max );
	
				return this;
	
			},
	
			makeEmpty: function () {
	
				this.min.x = this.min.y = this.min.z = + Infinity;
				this.max.x = this.max.y = this.max.z = - Infinity;
	
				return this;
	
			},
	
			isEmpty: function () {
	
				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
	
			},
	
			getCenter: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return this.isEmpty() ? result.set( 0, 0, 0 ) : result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
			},
	
			getSize: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return this.isEmpty() ? result.set( 0, 0, 0 ) : result.subVectors( this.max, this.min );
	
			},
	
			expandByPoint: function ( point ) {
	
				this.min.min( point );
				this.max.max( point );
	
				return this;
	
			},
	
			expandByVector: function ( vector ) {
	
				this.min.sub( vector );
				this.max.add( vector );
	
				return this;
	
			},
	
			expandByScalar: function ( scalar ) {
	
				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );
	
				return this;
	
			},
	
			expandByObject: function () {
	
				// Computes the world-axis-aligned bounding box of an object (including its children),
				// accounting for both the object's, and children's, world transforms
	
				var scope, i, l;
	
				var v1 = new Vector3();
	
				function traverse( node ) {
	
					var geometry = node.geometry;
	
					if ( geometry !== undefined ) {
	
						if ( geometry.isGeometry ) {
	
							var vertices = geometry.vertices;
	
							for ( i = 0, l = vertices.length; i < l; i ++ ) {
	
								v1.copy( vertices[ i ] );
								v1.applyMatrix4( node.matrixWorld );
	
								scope.expandByPoint( v1 );
	
							}
	
						} else if ( geometry.isBufferGeometry ) {
	
							var attribute = geometry.attributes.position;
	
							if ( attribute !== undefined ) {
	
								for ( i = 0, l = attribute.count; i < l; i ++ ) {
	
									v1.fromBufferAttribute( attribute, i ).applyMatrix4( node.matrixWorld );
	
									scope.expandByPoint( v1 );
	
								}
	
							}
	
						}
	
					}
	
				}
	
				return function expandByObject( object ) {
	
					scope = this;
	
					object.updateMatrixWorld( true );
	
					object.traverse( traverse );
	
					return this;
	
				};
	
			}(),
	
			containsPoint: function ( point ) {
	
				return point.x < this.min.x || point.x > this.max.x ||
					point.y < this.min.y || point.y > this.max.y ||
					point.z < this.min.z || point.z > this.max.z ? false : true;
	
			},
	
			containsBox: function ( box ) {
	
				return this.min.x <= box.min.x && box.max.x <= this.max.x &&
					this.min.y <= box.min.y && box.max.y <= this.max.y &&
					this.min.z <= box.min.z && box.max.z <= this.max.z;
	
			},
	
			getParameter: function ( point, optionalTarget ) {
	
				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.
	
				var result = optionalTarget || new Vector3();
	
				return result.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y ),
					( point.z - this.min.z ) / ( this.max.z - this.min.z )
				);
	
			},
	
			intersectsBox: function ( box ) {
	
				// using 6 splitting planes to rule out intersections.
				return box.max.x < this.min.x || box.min.x > this.max.x ||
					box.max.y < this.min.y || box.min.y > this.max.y ||
					box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
	
			},
	
			intersectsSphere: ( function () {
	
				var closestPoint = new Vector3();
	
				return function intersectsSphere( sphere ) {
	
					// Find the point on the AABB closest to the sphere center.
					this.clampPoint( sphere.center, closestPoint );
	
					// If that point is inside the sphere, the AABB and sphere intersect.
					return closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
	
				};
	
			} )(),
	
			intersectsPlane: function ( plane ) {
	
				// We compute the minimum and maximum dot product values. If those values
				// are on the same side (back or front) of the plane, then there is no intersection.
	
				var min, max;
	
				if ( plane.normal.x > 0 ) {
	
					min = plane.normal.x * this.min.x;
					max = plane.normal.x * this.max.x;
	
				} else {
	
					min = plane.normal.x * this.max.x;
					max = plane.normal.x * this.min.x;
	
				}
	
				if ( plane.normal.y > 0 ) {
	
					min += plane.normal.y * this.min.y;
					max += plane.normal.y * this.max.y;
	
				} else {
	
					min += plane.normal.y * this.max.y;
					max += plane.normal.y * this.min.y;
	
				}
	
				if ( plane.normal.z > 0 ) {
	
					min += plane.normal.z * this.min.z;
					max += plane.normal.z * this.max.z;
	
				} else {
	
					min += plane.normal.z * this.max.z;
					max += plane.normal.z * this.min.z;
	
				}
	
				return ( min <= plane.constant && max >= plane.constant );
	
			},
	
			clampPoint: function ( point, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.copy( point ).clamp( this.min, this.max );
	
			},
	
			distanceToPoint: function () {
	
				var v1 = new Vector3();
	
				return function distanceToPoint( point ) {
	
					var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
					return clampedPoint.sub( point ).length();
	
				};
	
			}(),
	
			getBoundingSphere: function () {
	
				var v1 = new Vector3();
	
				return function getBoundingSphere( optionalTarget ) {
	
					var result = optionalTarget || new Sphere();
	
					this.getCenter( result.center );
	
					result.radius = this.getSize( v1 ).length() * 0.5;
	
					return result;
	
				};
	
			}(),
	
			intersect: function ( box ) {
	
				this.min.max( box.min );
				this.max.min( box.max );
	
				// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
				if ( this.isEmpty() ) this.makeEmpty();
	
				return this;
	
			},
	
			union: function ( box ) {
	
				this.min.min( box.min );
				this.max.max( box.max );
	
				return this;
	
			},
	
			applyMatrix4: function () {
	
				var points = [
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3(),
					new Vector3()
				];
	
				return function applyMatrix4( matrix ) {
	
					// transform of empty box is an empty box.
					if ( this.isEmpty() ) return this;
	
					// NOTE: I am using a binary pattern to specify all 2^3 combinations below
					points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
					points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
					points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
					points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
					points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
					points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
					points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
					points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );	// 111
	
					this.setFromPoints( points );
	
					return this;
	
				};
	
			}(),
	
			translate: function ( offset ) {
	
				this.min.add( offset );
				this.max.add( offset );
	
				return this;
	
			},
	
			equals: function ( box ) {
	
				return box.min.equals( this.min ) && box.max.equals( this.max );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Sphere( center, radius ) {
	
			this.center = ( center !== undefined ) ? center : new Vector3();
			this.radius = ( radius !== undefined ) ? radius : 0;
	
		}
	
		Object.assign( Sphere.prototype, {
	
			set: function ( center, radius ) {
	
				this.center.copy( center );
				this.radius = radius;
	
				return this;
	
			},
	
			setFromPoints: function () {
	
				var box = new Box3();
	
				return function setFromPoints( points, optionalCenter ) {
	
					var center = this.center;
	
					if ( optionalCenter !== undefined ) {
	
						center.copy( optionalCenter );
	
					} else {
	
						box.setFromPoints( points ).getCenter( center );
	
					}
	
					var maxRadiusSq = 0;
	
					for ( var i = 0, il = points.length; i < il; i ++ ) {
	
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
	
					}
	
					this.radius = Math.sqrt( maxRadiusSq );
	
					return this;
	
				};
	
			}(),
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( sphere ) {
	
				this.center.copy( sphere.center );
				this.radius = sphere.radius;
	
				return this;
	
			},
	
			empty: function () {
	
				return ( this.radius <= 0 );
	
			},
	
			containsPoint: function ( point ) {
	
				return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
	
			},
	
			distanceToPoint: function ( point ) {
	
				return ( point.distanceTo( this.center ) - this.radius );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				var radiusSum = this.radius + sphere.radius;
	
				return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
	
			},
	
			intersectsBox: function ( box ) {
	
				return box.intersectsSphere( this );
	
			},
	
			intersectsPlane: function ( plane ) {
	
				return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;
	
			},
	
			clampPoint: function ( point, optionalTarget ) {
	
				var deltaLengthSq = this.center.distanceToSquared( point );
	
				var result = optionalTarget || new Vector3();
	
				result.copy( point );
	
				if ( deltaLengthSq > ( this.radius * this.radius ) ) {
	
					result.sub( this.center ).normalize();
					result.multiplyScalar( this.radius ).add( this.center );
	
				}
	
				return result;
	
			},
	
			getBoundingBox: function ( optionalTarget ) {
	
				var box = optionalTarget || new Box3();
	
				box.set( this.center, this.center );
				box.expandByScalar( this.radius );
	
				return box;
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				this.center.applyMatrix4( matrix );
				this.radius = this.radius * matrix.getMaxScaleOnAxis();
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.center.add( offset );
	
				return this;
	
			},
	
			equals: function ( sphere ) {
	
				return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Plane( normal, constant ) {
	
			// normal is assumed to be normalized
	
			this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
			this.constant = ( constant !== undefined ) ? constant : 0;
	
		}
	
		Object.assign( Plane.prototype, {
	
			set: function ( normal, constant ) {
	
				this.normal.copy( normal );
				this.constant = constant;
	
				return this;
	
			},
	
			setComponents: function ( x, y, z, w ) {
	
				this.normal.set( x, y, z );
				this.constant = w;
	
				return this;
	
			},
	
			setFromNormalAndCoplanarPoint: function ( normal, point ) {
	
				this.normal.copy( normal );
				this.constant = - point.dot( this.normal );
	
				return this;
	
			},
	
			setFromCoplanarPoints: function () {
	
				var v1 = new Vector3();
				var v2 = new Vector3();
	
				return function setFromCoplanarPoints( a, b, c ) {
	
					var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();
	
					// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
	
					this.setFromNormalAndCoplanarPoint( normal, a );
	
					return this;
	
				};
	
			}(),
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( plane ) {
	
				this.normal.copy( plane.normal );
				this.constant = plane.constant;
	
				return this;
	
			},
	
			normalize: function () {
	
				// Note: will lead to a divide by zero if the plane is invalid.
	
				var inverseNormalLength = 1.0 / this.normal.length();
				this.normal.multiplyScalar( inverseNormalLength );
				this.constant *= inverseNormalLength;
	
				return this;
	
			},
	
			negate: function () {
	
				this.constant *= - 1;
				this.normal.negate();
	
				return this;
	
			},
	
			distanceToPoint: function ( point ) {
	
				return this.normal.dot( point ) + this.constant;
	
			},
	
			distanceToSphere: function ( sphere ) {
	
				return this.distanceToPoint( sphere.center ) - sphere.radius;
	
			},
	
			projectPoint: function ( point, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				return result.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );
	
			},
	
			intersectLine: function () {
	
				var v1 = new Vector3();
	
				return function intersectLine( line, optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					var direction = line.delta( v1 );
	
					var denominator = this.normal.dot( direction );
	
					if ( denominator === 0 ) {
	
						// line is coplanar, return origin
						if ( this.distanceToPoint( line.start ) === 0 ) {
	
							return result.copy( line.start );
	
						}
	
						// Unsure if this is the correct method to handle this case.
						return undefined;
	
					}
	
					var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
	
					if ( t < 0 || t > 1 ) {
	
						return undefined;
	
					}
	
					return result.copy( direction ).multiplyScalar( t ).add( line.start );
	
				};
	
			}(),
	
			intersectsLine: function ( line ) {
	
				// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
	
				var startSign = this.distanceToPoint( line.start );
				var endSign = this.distanceToPoint( line.end );
	
				return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
	
			},
	
			intersectsBox: function ( box ) {
	
				return box.intersectsPlane( this );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				return sphere.intersectsPlane( this );
	
			},
	
			coplanarPoint: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				return result.copy( this.normal ).multiplyScalar( - this.constant );
	
			},
	
			applyMatrix4: function () {
	
				var v1 = new Vector3();
				var m1 = new Matrix3();
	
				return function applyMatrix4( matrix, optionalNormalMatrix ) {
	
					var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
	
					var referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );
	
					var normal = this.normal.applyMatrix3( normalMatrix ).normalize();
	
					this.constant = - referencePoint.dot( normal );
	
					return this;
	
				};
	
			}(),
	
			translate: function ( offset ) {
	
				this.constant -= offset.dot( this.normal );
	
				return this;
	
			},
	
			equals: function ( plane ) {
	
				return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / http://clara.io
		 */
	
		function Frustum( p0, p1, p2, p3, p4, p5 ) {
	
			this.planes = [
	
				( p0 !== undefined ) ? p0 : new Plane(),
				( p1 !== undefined ) ? p1 : new Plane(),
				( p2 !== undefined ) ? p2 : new Plane(),
				( p3 !== undefined ) ? p3 : new Plane(),
				( p4 !== undefined ) ? p4 : new Plane(),
				( p5 !== undefined ) ? p5 : new Plane()
	
			];
	
		}
	
		Object.assign( Frustum.prototype, {
	
			set: function ( p0, p1, p2, p3, p4, p5 ) {
	
				var planes = this.planes;
	
				planes[ 0 ].copy( p0 );
				planes[ 1 ].copy( p1 );
				planes[ 2 ].copy( p2 );
				planes[ 3 ].copy( p3 );
				planes[ 4 ].copy( p4 );
				planes[ 5 ].copy( p5 );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( frustum ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					planes[ i ].copy( frustum.planes[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromMatrix: function ( m ) {
	
				var planes = this.planes;
				var me = m.elements;
				var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
				var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
				var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
				var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
	
				planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
				planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
				planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
				planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
				planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
				planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
	
				return this;
	
			},
	
			intersectsObject: function () {
	
				var sphere = new Sphere();
	
				return function intersectsObject( object ) {
	
					var geometry = object.geometry;
	
					if ( geometry.boundingSphere === null )
						geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere )
						.applyMatrix4( object.matrixWorld );
	
					return this.intersectsSphere( sphere );
	
				};
	
			}(),
	
			intersectsSprite: function () {
	
				var sphere = new Sphere();
	
				return function intersectsSprite( sprite ) {
	
					sphere.center.set( 0, 0, 0 );
					sphere.radius = 0.7071067811865476;
					sphere.applyMatrix4( sprite.matrixWorld );
	
					return this.intersectsSphere( sphere );
	
				};
	
			}(),
	
			intersectsSphere: function ( sphere ) {
	
				var planes = this.planes;
				var center = sphere.center;
				var negRadius = - sphere.radius;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					var distance = planes[ i ].distanceToPoint( center );
	
					if ( distance < negRadius ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			},
	
			intersectsBox: function () {
	
				var p1 = new Vector3(),
					p2 = new Vector3();
	
				return function intersectsBox( box ) {
	
					var planes = this.planes;
	
					for ( var i = 0; i < 6; i ++ ) {
	
						var plane = planes[ i ];
	
						p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
						p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
						p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
						p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
						p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
						p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;
	
						var d1 = plane.distanceToPoint( p1 );
						var d2 = plane.distanceToPoint( p2 );
	
						// if both outside plane, no intersection
	
						if ( d1 < 0 && d2 < 0 ) {
	
							return false;
	
						}
	
					}
	
					return true;
	
				};
	
			}(),
	
			containsPoint: function ( point ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					if ( planes[ i ].distanceToPoint( point ) < 0 ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {
	
			var _frustum = new Frustum(),
				_projScreenMatrix = new Matrix4(),
	
				_shadowMapSize = new Vector2(),
				_maxShadowMapSize = new Vector2( maxTextureSize, maxTextureSize ),
	
				_lookTarget = new Vector3(),
				_lightPositionWorld = new Vector3(),
	
				_MorphingFlag = 1,
				_SkinningFlag = 2,
	
				_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,
	
				_depthMaterials = new Array( _NumberOfMaterialVariants ),
				_distanceMaterials = new Array( _NumberOfMaterialVariants ),
	
				_materialCache = {};
	
			var cubeDirections = [
				new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
				new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
			];
	
			var cubeUps = [
				new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
				new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
			];
	
			var cube2DViewPorts = [
				new Vector4(), new Vector4(), new Vector4(),
				new Vector4(), new Vector4(), new Vector4()
			];
	
			// init
	
			for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {
	
				var useMorphing = ( i & _MorphingFlag ) !== 0;
				var useSkinning = ( i & _SkinningFlag ) !== 0;
	
				var depthMaterial = new MeshDepthMaterial( {
	
					depthPacking: RGBADepthPacking,
	
					morphTargets: useMorphing,
					skinning: useSkinning
	
				} );
	
				_depthMaterials[ i ] = depthMaterial;
	
				//
	
				var distanceMaterial = new MeshDistanceMaterial( {
	
					morphTargets: useMorphing,
					skinning: useSkinning
	
				} );
	
				_distanceMaterials[ i ] = distanceMaterial;
	
			}
	
			//
	
			var scope = this;
	
			this.enabled = false;
	
			this.autoUpdate = true;
			this.needsUpdate = false;
	
			this.type = PCFShadowMap;
	
			this.renderReverseSided = true;
			this.renderSingleSided = true;
	
			this.render = function ( lights, scene, camera ) {
	
				if ( scope.enabled === false ) return;
				if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
	
				if ( lights.length === 0 ) return;
	
				// TODO Clean up (needed in case of contextlost)
				var _gl = _renderer.context;
				var _state = _renderer.state;
	
				// Set GL state for depth map.
				_state.disable( _gl.BLEND );
				_state.buffers.color.setClear( 1, 1, 1, 1 );
				_state.buffers.depth.setTest( true );
				_state.setScissorTest( false );
	
				// render depth map
	
				var faceCount;
	
				for ( var i = 0, il = lights.length; i < il; i ++ ) {
	
					var light = lights[ i ];
					var shadow = light.shadow;
					var isPointLight = light && light.isPointLight;
	
					if ( shadow === undefined ) {
	
						console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
						continue;
	
					}
	
					var shadowCamera = shadow.camera;
	
					_shadowMapSize.copy( shadow.mapSize );
					_shadowMapSize.min( _maxShadowMapSize );
	
					if ( isPointLight ) {
	
						var vpWidth = _shadowMapSize.x;
						var vpHeight = _shadowMapSize.y;
	
						// These viewports map a cube-map onto a 2D texture with the
						// following orientation:
						//
						//  xzXZ
						//   y Y
						//
						// X - Positive x direction
						// x - Negative x direction
						// Y - Positive y direction
						// y - Negative y direction
						// Z - Positive z direction
						// z - Negative z direction
	
						// positive X
						cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
						// negative X
						cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
						// positive Z
						cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
						// negative Z
						cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
						// positive Y
						cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
						// negative Y
						cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );
	
						_shadowMapSize.x *= 4.0;
						_shadowMapSize.y *= 2.0;
	
					}
	
					if ( shadow.map === null ) {
	
						var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
	
						shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
						shadow.map.texture.name = light.name + ".shadowMap";
	
						shadowCamera.updateProjectionMatrix();
	
					}
	
					if ( shadow.isSpotLightShadow ) {
	
						shadow.update( light );
	
					}
	
					var shadowMap = shadow.map;
					var shadowMatrix = shadow.matrix;
	
					_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
					shadowCamera.position.copy( _lightPositionWorld );
	
					if ( isPointLight ) {
	
						faceCount = 6;
	
						// for point lights we set the shadow matrix to be a translation-only matrix
						// equal to inverse of the light's position
	
						shadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );
	
					} else {
	
						faceCount = 1;
	
						_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
						shadowCamera.lookAt( _lookTarget );
						shadowCamera.updateMatrixWorld();
	
						// compute shadow matrix
	
						shadowMatrix.set(
							0.5, 0.0, 0.0, 0.5,
							0.0, 0.5, 0.0, 0.5,
							0.0, 0.0, 0.5, 0.5,
							0.0, 0.0, 0.0, 1.0
						);
	
						shadowMatrix.multiply( shadowCamera.projectionMatrix );
						shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
	
					}
	
					_renderer.setRenderTarget( shadowMap );
					_renderer.clear();
	
					// render shadow map for each cube face (if omni-directional) or
					// run a single pass if not
	
					for ( var face = 0; face < faceCount; face ++ ) {
	
						if ( isPointLight ) {
	
							_lookTarget.copy( shadowCamera.position );
							_lookTarget.add( cubeDirections[ face ] );
							shadowCamera.up.copy( cubeUps[ face ] );
							shadowCamera.lookAt( _lookTarget );
							shadowCamera.updateMatrixWorld();
	
							var vpDimensions = cube2DViewPorts[ face ];
							_state.viewport( vpDimensions );
	
						}
	
						// update camera matrices and frustum
	
						_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
						_frustum.setFromMatrix( _projScreenMatrix );
	
						// set object matrices & frustum culling
	
						renderObject( scene, camera, shadowCamera, isPointLight );
	
					}
	
				}
	
				scope.needsUpdate = false;
	
			};
	
			function getDepthMaterial( object, material, isPointLight, lightPositionWorld, shadowCameraNear, shadowCameraFar ) {
	
				var geometry = object.geometry;
	
				var result = null;
	
				var materialVariants = _depthMaterials;
				var customMaterial = object.customDepthMaterial;
	
				if ( isPointLight ) {
	
					materialVariants = _distanceMaterials;
					customMaterial = object.customDistanceMaterial;
	
				}
	
				if ( ! customMaterial ) {
	
					var useMorphing = false;
	
					if ( material.morphTargets ) {
	
						if ( geometry && geometry.isBufferGeometry ) {
	
							useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
	
						} else if ( geometry && geometry.isGeometry ) {
	
							useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;
	
						}
	
					}
	
					if ( object.isSkinnedMesh && material.skinning === false ) {
	
						console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );
	
					}
	
					var useSkinning = object.isSkinnedMesh && material.skinning;
	
					var variantIndex = 0;
	
					if ( useMorphing ) variantIndex |= _MorphingFlag;
					if ( useSkinning ) variantIndex |= _SkinningFlag;
	
					result = materialVariants[ variantIndex ];
	
				} else {
	
					result = customMaterial;
	
				}
	
				if ( _renderer.localClippingEnabled &&
						material.clipShadows === true &&
						material.clippingPlanes.length !== 0 ) {
	
					// in this case we need a unique material instance reflecting the
					// appropriate state
	
					var keyA = result.uuid, keyB = material.uuid;
	
					var materialsForVariant = _materialCache[ keyA ];
	
					if ( materialsForVariant === undefined ) {
	
						materialsForVariant = {};
						_materialCache[ keyA ] = materialsForVariant;
	
					}
	
					var cachedMaterial = materialsForVariant[ keyB ];
	
					if ( cachedMaterial === undefined ) {
	
						cachedMaterial = result.clone();
						materialsForVariant[ keyB ] = cachedMaterial;
	
					}
	
					result = cachedMaterial;
	
				}
	
				result.visible = material.visible;
				result.wireframe = material.wireframe;
	
				var side = material.side;
	
				if ( scope.renderSingleSided && side == DoubleSide ) {
	
					side = FrontSide;
	
				}
	
				if ( scope.renderReverseSided ) {
	
					if ( side === FrontSide ) side = BackSide;
					else if ( side === BackSide ) side = FrontSide;
	
				}
	
				result.side = side;
	
				result.clipShadows = material.clipShadows;
				result.clippingPlanes = material.clippingPlanes;
				result.clipIntersection = material.clipIntersection;
	
				result.wireframeLinewidth = material.wireframeLinewidth;
				result.linewidth = material.linewidth;
	
				if ( isPointLight && result.isMeshDistanceMaterial ) {
	
					result.referencePosition.copy( lightPositionWorld );
					result.nearDistance = shadowCameraNear;
					result.farDistance = shadowCameraFar;
	
				}
	
				return result;
	
			}
	
			function renderObject( object, camera, shadowCamera, isPointLight ) {
	
				if ( object.visible === false ) return;
	
				var visible = object.layers.test( camera.layers );
	
				if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
	
					if ( object.castShadow && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {
	
						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
	
						var geometry = _objects.update( object );
						var material = object.material;
	
						if ( Array.isArray( material ) ) {
	
							var groups = geometry.groups;
	
							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {
	
								var group = groups[ k ];
								var groupMaterial = material[ group.materialIndex ];
	
								if ( groupMaterial && groupMaterial.visible ) {
	
									var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
	
								}
	
							}
	
						} else if ( material.visible ) {
	
							var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld, shadowCamera.near, shadowCamera.far );
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
	
						}
	
					}
	
				}
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					renderObject( children[ i ], camera, shadowCamera, isPointLight );
	
				}
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLAttributes( gl ) {
	
			var buffers = {};
	
			function createBuffer( attribute, bufferType ) {
	
				var array = attribute.array;
				var usage = attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
	
				var buffer = gl.createBuffer();
	
				gl.bindBuffer( bufferType, buffer );
				gl.bufferData( bufferType, array, usage );
	
				attribute.onUploadCallback();
	
				var type = gl.FLOAT;
	
				if ( array instanceof Float32Array ) {
	
					type = gl.FLOAT;
	
				} else if ( array instanceof Float64Array ) {
	
					console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );
	
				} else if ( array instanceof Uint16Array ) {
	
					type = gl.UNSIGNED_SHORT;
	
				} else if ( array instanceof Int16Array ) {
	
					type = gl.SHORT;
	
				} else if ( array instanceof Uint32Array ) {
	
					type = gl.UNSIGNED_INT;
	
				} else if ( array instanceof Int32Array ) {
	
					type = gl.INT;
	
				} else if ( array instanceof Int8Array ) {
	
					type = gl.BYTE;
	
				} else if ( array instanceof Uint8Array ) {
	
					type = gl.UNSIGNED_BYTE;
	
				}
	
				return {
					buffer: buffer,
					type: type,
					bytesPerElement: array.BYTES_PER_ELEMENT,
					version: attribute.version
				};
	
			}
	
			function updateBuffer( buffer, attribute, bufferType ) {
	
				var array = attribute.array;
				var updateRange = attribute.updateRange;
	
				gl.bindBuffer( bufferType, buffer );
	
				if ( attribute.dynamic === false ) {
	
					gl.bufferData( bufferType, array, gl.STATIC_DRAW );
	
				} else if ( updateRange.count === - 1 ) {
	
					// Not using update ranges
	
					gl.bufferSubData( bufferType, 0, array );
	
				} else if ( updateRange.count === 0 ) {
	
					console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );
	
				} else {
	
					gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
						array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );
	
					updateRange.count = - 1; // reset range
	
				}
	
			}
	
			//
	
			function get( attribute ) {
	
				if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
	
				return buffers[ attribute.uuid ];
	
			}
	
			function remove( attribute ) {
	
				if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
	
				var data = buffers[ attribute.uuid ];
	
				if ( data ) {
	
					gl.deleteBuffer( data.buffer );
	
					delete buffers[ attribute.uuid ];
	
				}
	
			}
	
			function update( attribute, bufferType ) {
	
				if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;
	
				var data = buffers[ attribute.uuid ];
	
				if ( data === undefined ) {
	
					buffers[ attribute.uuid ] = createBuffer( attribute, bufferType );
	
				} else if ( data.version < attribute.version ) {
	
					updateBuffer( data.buffer, attribute, bufferType );
	
					data.version = attribute.version;
	
				}
	
			}
	
			return {
	
				get: get,
				remove: remove,
				update: update
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */
	
		function Euler( x, y, z, order ) {
	
			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._order = order || Euler.DefaultOrder;
	
		}
	
		Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
	
		Euler.DefaultOrder = 'XYZ';
	
		Object.defineProperties( Euler.prototype, {
	
			x: {
	
				get: function () {
	
					return this._x;
	
				},
	
				set: function ( value ) {
	
					this._x = value;
					this.onChangeCallback();
	
				}
	
			},
	
			y: {
	
				get: function () {
	
					return this._y;
	
				},
	
				set: function ( value ) {
	
					this._y = value;
					this.onChangeCallback();
	
				}
	
			},
	
			z: {
	
				get: function () {
	
					return this._z;
	
				},
	
				set: function ( value ) {
	
					this._z = value;
					this.onChangeCallback();
	
				}
	
			},
	
			order: {
	
				get: function () {
	
					return this._order;
	
				},
	
				set: function ( value ) {
	
					this._order = value;
					this.onChangeCallback();
	
				}
	
			}
	
		} );
	
		Object.assign( Euler.prototype, {
	
			isEuler: true,
	
			set: function ( x, y, z, order ) {
	
				this._x = x;
				this._y = y;
				this._z = z;
				this._order = order || this._order;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this._x, this._y, this._z, this._order );
	
			},
	
			copy: function ( euler ) {
	
				this._x = euler._x;
				this._y = euler._y;
				this._z = euler._z;
				this._order = euler._order;
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			setFromRotationMatrix: function ( m, order, update ) {
	
				var clamp = _Math.clamp;
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var te = m.elements;
				var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
				var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
				var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
				order = order || this._order;
	
				if ( order === 'XYZ' ) {
	
					this._y = Math.asin( clamp( m13, - 1, 1 ) );
	
					if ( Math.abs( m13 ) < 0.99999 ) {
	
						this._x = Math.atan2( - m23, m33 );
						this._z = Math.atan2( - m12, m11 );
	
					} else {
	
						this._x = Math.atan2( m32, m22 );
						this._z = 0;
	
					}
	
				} else if ( order === 'YXZ' ) {
	
					this._x = Math.asin( - clamp( m23, - 1, 1 ) );
	
					if ( Math.abs( m23 ) < 0.99999 ) {
	
						this._y = Math.atan2( m13, m33 );
						this._z = Math.atan2( m21, m22 );
	
					} else {
	
						this._y = Math.atan2( - m31, m11 );
						this._z = 0;
	
					}
	
				} else if ( order === 'ZXY' ) {
	
					this._x = Math.asin( clamp( m32, - 1, 1 ) );
	
					if ( Math.abs( m32 ) < 0.99999 ) {
	
						this._y = Math.atan2( - m31, m33 );
						this._z = Math.atan2( - m12, m22 );
	
					} else {
	
						this._y = 0;
						this._z = Math.atan2( m21, m11 );
	
					}
	
				} else if ( order === 'ZYX' ) {
	
					this._y = Math.asin( - clamp( m31, - 1, 1 ) );
	
					if ( Math.abs( m31 ) < 0.99999 ) {
	
						this._x = Math.atan2( m32, m33 );
						this._z = Math.atan2( m21, m11 );
	
					} else {
	
						this._x = 0;
						this._z = Math.atan2( - m12, m22 );
	
					}
	
				} else if ( order === 'YZX' ) {
	
					this._z = Math.asin( clamp( m21, - 1, 1 ) );
	
					if ( Math.abs( m21 ) < 0.99999 ) {
	
						this._x = Math.atan2( - m23, m22 );
						this._y = Math.atan2( - m31, m11 );
	
					} else {
	
						this._x = 0;
						this._y = Math.atan2( m13, m33 );
	
					}
	
				} else if ( order === 'XZY' ) {
	
					this._z = Math.asin( - clamp( m12, - 1, 1 ) );
	
					if ( Math.abs( m12 ) < 0.99999 ) {
	
						this._x = Math.atan2( m32, m22 );
						this._y = Math.atan2( m13, m11 );
	
					} else {
	
						this._x = Math.atan2( - m23, m33 );
						this._y = 0;
	
					}
	
				} else {
	
					console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );
	
				}
	
				this._order = order;
	
				if ( update !== false ) this.onChangeCallback();
	
				return this;
	
			},
	
			setFromQuaternion: function () {
	
				var matrix = new Matrix4();
	
				return function setFromQuaternion( q, order, update ) {
	
					matrix.makeRotationFromQuaternion( q );
	
					return this.setFromRotationMatrix( matrix, order, update );
	
				};
	
			}(),
	
			setFromVector3: function ( v, order ) {
	
				return this.set( v.x, v.y, v.z, order || this._order );
	
			},
	
			reorder: function () {
	
				// WARNING: this discards revolution information -bhouston
	
				var q = new Quaternion();
	
				return function reorder( newOrder ) {
	
					q.setFromEuler( this );
	
					return this.setFromQuaternion( q, newOrder );
	
				};
	
			}(),
	
			equals: function ( euler ) {
	
				return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
	
			},
	
			fromArray: function ( array ) {
	
				this._x = array[ 0 ];
				this._y = array[ 1 ];
				this._z = array[ 2 ];
				if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
	
				this.onChangeCallback();
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) array = [];
				if ( offset === undefined ) offset = 0;
	
				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._order;
	
				return array;
	
			},
	
			toVector3: function ( optionalResult ) {
	
				if ( optionalResult ) {
	
					return optionalResult.set( this._x, this._y, this._z );
	
				} else {
	
					return new Vector3( this._x, this._y, this._z );
	
				}
	
			},
	
			onChange: function ( callback ) {
	
				this.onChangeCallback = callback;
	
				return this;
	
			},
	
			onChangeCallback: function () {}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Layers() {
	
			this.mask = 1 | 0;
	
		}
	
		Object.assign( Layers.prototype, {
	
			set: function ( channel ) {
	
				this.mask = 1 << channel | 0;
	
			},
	
			enable: function ( channel ) {
	
				this.mask |= 1 << channel | 0;
	
			},
	
			toggle: function ( channel ) {
	
				this.mask ^= 1 << channel | 0;
	
			},
	
			disable: function ( channel ) {
	
				this.mask &= ~ ( 1 << channel | 0 );
	
			},
	
			test: function ( layers ) {
	
				return ( this.mask & layers.mask ) !== 0;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author elephantatwork / www.elephantatwork.ch
		 */
	
		var object3DId = 0;
	
		function Object3D() {
	
			Object.defineProperty( this, 'id', { value: object3DId ++ } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'Object3D';
	
			this.parent = null;
			this.children = [];
	
			this.up = Object3D.DefaultUp.clone();
	
			var position = new Vector3();
			var rotation = new Euler();
			var quaternion = new Quaternion();
			var scale = new Vector3( 1, 1, 1 );
	
			function onRotationChange() {
	
				quaternion.setFromEuler( rotation, false );
	
			}
	
			function onQuaternionChange() {
	
				rotation.setFromQuaternion( quaternion, undefined, false );
	
			}
	
			rotation.onChange( onRotationChange );
			quaternion.onChange( onQuaternionChange );
	
			Object.defineProperties( this, {
				position: {
					enumerable: true,
					value: position
				},
				rotation: {
					enumerable: true,
					value: rotation
				},
				quaternion: {
					enumerable: true,
					value: quaternion
				},
				scale: {
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			} );
	
			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();
	
			this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
			this.matrixWorldNeedsUpdate = false;
	
			this.layers = new Layers();
			this.visible = true;
	
			this.castShadow = false;
			this.receiveShadow = false;
	
			this.frustumCulled = true;
			this.renderOrder = 0;
	
			this.userData = {};
	
		}
	
		Object3D.DefaultUp = new Vector3( 0, 1, 0 );
		Object3D.DefaultMatrixAutoUpdate = true;
	
		Object.assign( Object3D.prototype, EventDispatcher.prototype, {
	
			isObject3D: true,
	
			onBeforeRender: function () {},
			onAfterRender: function () {},
	
			applyMatrix: function ( matrix ) {
	
				this.matrix.multiplyMatrices( matrix, this.matrix );
	
				this.matrix.decompose( this.position, this.quaternion, this.scale );
	
			},
	
			applyQuaternion: function ( q ) {
	
				this.quaternion.premultiply( q );
	
				return this;
	
			},
	
			setRotationFromAxisAngle: function ( axis, angle ) {
	
				// assumes axis is normalized
	
				this.quaternion.setFromAxisAngle( axis, angle );
	
			},
	
			setRotationFromEuler: function ( euler ) {
	
				this.quaternion.setFromEuler( euler, true );
	
			},
	
			setRotationFromMatrix: function ( m ) {
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				this.quaternion.setFromRotationMatrix( m );
	
			},
	
			setRotationFromQuaternion: function ( q ) {
	
				// assumes q is normalized
	
				this.quaternion.copy( q );
	
			},
	
			rotateOnAxis: function () {
	
				// rotate object on axis in object space
				// axis is assumed to be normalized
	
				var q1 = new Quaternion();
	
				return function rotateOnAxis( axis, angle ) {
	
					q1.setFromAxisAngle( axis, angle );
	
					this.quaternion.multiply( q1 );
	
					return this;
	
				};
	
			}(),
	
			rotateOnWorldAxis: function () {
	
				// rotate object on axis in world space
				// axis is assumed to be normalized
				// method assumes no rotated parent
	
				var q1 = new Quaternion();
	
				return function rotateOnWorldAxis( axis, angle ) {
	
					q1.setFromAxisAngle( axis, angle );
	
					this.quaternion.premultiply( q1 );
	
					return this;
	
				};
	
			}(),
	
			rotateX: function () {
	
				var v1 = new Vector3( 1, 0, 0 );
	
				return function rotateX( angle ) {
	
					return this.rotateOnAxis( v1, angle );
	
				};
	
			}(),
	
			rotateY: function () {
	
				var v1 = new Vector3( 0, 1, 0 );
	
				return function rotateY( angle ) {
	
					return this.rotateOnAxis( v1, angle );
	
				};
	
			}(),
	
			rotateZ: function () {
	
				var v1 = new Vector3( 0, 0, 1 );
	
				return function rotateZ( angle ) {
	
					return this.rotateOnAxis( v1, angle );
	
				};
	
			}(),
	
			translateOnAxis: function () {
	
				// translate object by distance along axis in object space
				// axis is assumed to be normalized
	
				var v1 = new Vector3();
	
				return function translateOnAxis( axis, distance ) {
	
					v1.copy( axis ).applyQuaternion( this.quaternion );
	
					this.position.add( v1.multiplyScalar( distance ) );
	
					return this;
	
				};
	
			}(),
	
			translateX: function () {
	
				var v1 = new Vector3( 1, 0, 0 );
	
				return function translateX( distance ) {
	
					return this.translateOnAxis( v1, distance );
	
				};
	
			}(),
	
			translateY: function () {
	
				var v1 = new Vector3( 0, 1, 0 );
	
				return function translateY( distance ) {
	
					return this.translateOnAxis( v1, distance );
	
				};
	
			}(),
	
			translateZ: function () {
	
				var v1 = new Vector3( 0, 0, 1 );
	
				return function translateZ( distance ) {
	
					return this.translateOnAxis( v1, distance );
	
				};
	
			}(),
	
			localToWorld: function ( vector ) {
	
				return vector.applyMatrix4( this.matrixWorld );
	
			},
	
			worldToLocal: function () {
	
				var m1 = new Matrix4();
	
				return function worldToLocal( vector ) {
	
					return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );
	
				};
	
			}(),
	
			lookAt: function () {
	
				// This method does not support objects with rotated and/or translated parent(s)
	
				var m1 = new Matrix4();
				var vector = new Vector3();
	
				return function lookAt( x, y, z ) {
	
					if ( x.isVector3 ) {
	
						vector.copy( x );
	
					} else {
	
						vector.set( x, y, z );
	
					}
	
					if ( this.isCamera ) {
	
						m1.lookAt( this.position, vector, this.up );
	
					} else {
	
						m1.lookAt( vector, this.position, this.up );
	
					}
	
					this.quaternion.setFromRotationMatrix( m1 );
	
				};
	
			}(),
	
			add: function ( object ) {
	
				if ( arguments.length > 1 ) {
	
					for ( var i = 0; i < arguments.length; i ++ ) {
	
						this.add( arguments[ i ] );
	
					}
	
					return this;
	
				}
	
				if ( object === this ) {
	
					console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
					return this;
	
				}
	
				if ( ( object && object.isObject3D ) ) {
	
					if ( object.parent !== null ) {
	
						object.parent.remove( object );
	
					}
	
					object.parent = this;
					object.dispatchEvent( { type: 'added' } );
	
					this.children.push( object );
	
				} else {
	
					console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );
	
				}
	
				return this;
	
			},
	
			remove: function ( object ) {
	
				if ( arguments.length > 1 ) {
	
					for ( var i = 0; i < arguments.length; i ++ ) {
	
						this.remove( arguments[ i ] );
	
					}
	
					return this;
	
				}
	
				var index = this.children.indexOf( object );
	
				if ( index !== - 1 ) {
	
					object.parent = null;
	
					object.dispatchEvent( { type: 'removed' } );
	
					this.children.splice( index, 1 );
	
				}
	
				return this;
	
			},
	
			getObjectById: function ( id ) {
	
				return this.getObjectByProperty( 'id', id );
	
			},
	
			getObjectByName: function ( name ) {
	
				return this.getObjectByProperty( 'name', name );
	
			},
	
			getObjectByProperty: function ( name, value ) {
	
				if ( this[ name ] === value ) return this;
	
				for ( var i = 0, l = this.children.length; i < l; i ++ ) {
	
					var child = this.children[ i ];
					var object = child.getObjectByProperty( name, value );
	
					if ( object !== undefined ) {
	
						return object;
	
					}
	
				}
	
				return undefined;
	
			},
	
			getWorldPosition: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				this.updateMatrixWorld( true );
	
				return result.setFromMatrixPosition( this.matrixWorld );
	
			},
	
			getWorldQuaternion: function () {
	
				var position = new Vector3();
				var scale = new Vector3();
	
				return function getWorldQuaternion( optionalTarget ) {
	
					var result = optionalTarget || new Quaternion();
	
					this.updateMatrixWorld( true );
	
					this.matrixWorld.decompose( position, result, scale );
	
					return result;
	
				};
	
			}(),
	
			getWorldRotation: function () {
	
				var quaternion = new Quaternion();
	
				return function getWorldRotation( optionalTarget ) {
	
					var result = optionalTarget || new Euler();
	
					this.getWorldQuaternion( quaternion );
	
					return result.setFromQuaternion( quaternion, this.rotation.order, false );
	
				};
	
			}(),
	
			getWorldScale: function () {
	
				var position = new Vector3();
				var quaternion = new Quaternion();
	
				return function getWorldScale( optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					this.updateMatrixWorld( true );
	
					this.matrixWorld.decompose( position, quaternion, result );
	
					return result;
	
				};
	
			}(),
	
			getWorldDirection: function () {
	
				var quaternion = new Quaternion();
	
				return function getWorldDirection( optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					this.getWorldQuaternion( quaternion );
	
					return result.set( 0, 0, 1 ).applyQuaternion( quaternion );
	
				};
	
			}(),
	
			raycast: function () {},
	
			traverse: function ( callback ) {
	
				callback( this );
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].traverse( callback );
	
				}
	
			},
	
			traverseVisible: function ( callback ) {
	
				if ( this.visible === false ) return;
	
				callback( this );
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].traverseVisible( callback );
	
				}
	
			},
	
			traverseAncestors: function ( callback ) {
	
				var parent = this.parent;
	
				if ( parent !== null ) {
	
					callback( parent );
	
					parent.traverseAncestors( callback );
	
				}
	
			},
	
			updateMatrix: function () {
	
				this.matrix.compose( this.position, this.quaternion, this.scale );
	
				this.matrixWorldNeedsUpdate = true;
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				if ( this.matrixAutoUpdate ) this.updateMatrix();
	
				if ( this.matrixWorldNeedsUpdate || force ) {
	
					if ( this.parent === null ) {
	
						this.matrixWorld.copy( this.matrix );
	
					} else {
	
						this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
	
					}
	
					this.matrixWorldNeedsUpdate = false;
	
					force = true;
	
				}
	
				// update children
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].updateMatrixWorld( force );
	
				}
	
			},
	
			toJSON: function ( meta ) {
	
				// meta is a string when called from JSON.stringify
				var isRootObject = ( meta === undefined || typeof meta === 'string' );
	
				var output = {};
	
				// meta is a hash used to collect geometries, materials.
				// not providing it implies that this is the root object
				// being serialized.
				if ( isRootObject ) {
	
					// initialize meta obj
					meta = {
						geometries: {},
						materials: {},
						textures: {},
						images: {}
					};
	
					output.metadata = {
						version: 4.5,
						type: 'Object',
						generator: 'Object3D.toJSON'
					};
	
				}
	
				// standard Object3D serialization
	
				var object = {};
	
				object.uuid = this.uuid;
				object.type = this.type;
	
				if ( this.name !== '' ) object.name = this.name;
				if ( this.castShadow === true ) object.castShadow = true;
				if ( this.receiveShadow === true ) object.receiveShadow = true;
				if ( this.visible === false ) object.visible = false;
				if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
	
				object.matrix = this.matrix.toArray();
	
				//
	
				function serialize( library, element ) {
	
					if ( library[ element.uuid ] === undefined ) {
	
						library[ element.uuid ] = element.toJSON( meta );
	
					}
	
					return element.uuid;
	
				}
	
				if ( this.geometry !== undefined ) {
	
					object.geometry = serialize( meta.geometries, this.geometry );
	
				}
	
				if ( this.material !== undefined ) {
	
					if ( Array.isArray( this.material ) ) {
	
						var uuids = [];
	
						for ( var i = 0, l = this.material.length; i < l; i ++ ) {
	
							uuids.push( serialize( meta.materials, this.material[ i ] ) );
	
						}
	
						object.material = uuids;
	
					} else {
	
						object.material = serialize( meta.materials, this.material );
	
					}
	
				}
	
				//
	
				if ( this.children.length > 0 ) {
	
					object.children = [];
	
					for ( var i = 0; i < this.children.length; i ++ ) {
	
						object.children.push( this.children[ i ].toJSON( meta ).object );
	
					}
	
				}
	
				if ( isRootObject ) {
	
					var geometries = extractFromCache( meta.geometries );
					var materials = extractFromCache( meta.materials );
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );
	
					if ( geometries.length > 0 ) output.geometries = geometries;
					if ( materials.length > 0 ) output.materials = materials;
					if ( textures.length > 0 ) output.textures = textures;
					if ( images.length > 0 ) output.images = images;
	
				}
	
				output.object = object;
	
				return output;
	
				// extract data from the cache hash
				// remove metadata on each item
				// and return as array
				function extractFromCache( cache ) {
	
					var values = [];
					for ( var key in cache ) {
	
						var data = cache[ key ];
						delete data.metadata;
						values.push( data );
	
					}
					return values;
	
				}
	
			},
	
			clone: function ( recursive ) {
	
				return new this.constructor().copy( this, recursive );
	
			},
	
			copy: function ( source, recursive ) {
	
				if ( recursive === undefined ) recursive = true;
	
				this.name = source.name;
	
				this.up.copy( source.up );
	
				this.position.copy( source.position );
				this.quaternion.copy( source.quaternion );
				this.scale.copy( source.scale );
	
				this.matrix.copy( source.matrix );
				this.matrixWorld.copy( source.matrixWorld );
	
				this.matrixAutoUpdate = source.matrixAutoUpdate;
				this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
	
				this.layers.mask = source.layers.mask;
				this.visible = source.visible;
	
				this.castShadow = source.castShadow;
				this.receiveShadow = source.receiveShadow;
	
				this.frustumCulled = source.frustumCulled;
				this.renderOrder = source.renderOrder;
	
				this.userData = JSON.parse( JSON.stringify( source.userData ) );
	
				if ( recursive === true ) {
	
					for ( var i = 0; i < source.children.length; i ++ ) {
	
						var child = source.children[ i ];
						this.add( child.clone() );
	
					}
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author WestLangley / http://github.com/WestLangley
		*/
	
		function Camera() {
	
			Object3D.call( this );
	
			this.type = 'Camera';
	
			this.matrixWorldInverse = new Matrix4();
			this.projectionMatrix = new Matrix4();
	
		}
	
		Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Camera,
	
			isCamera: true,
	
			copy: function ( source, recursive ) {
	
				Object3D.prototype.copy.call( this, source, recursive );
	
				this.matrixWorldInverse.copy( source.matrixWorldInverse );
				this.projectionMatrix.copy( source.projectionMatrix );
	
				return this;
	
			},
	
			getWorldDirection: function () {
	
				var quaternion = new Quaternion();
	
				return function getWorldDirection( optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					this.getWorldQuaternion( quaternion );
	
					return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );
	
				};
	
			}(),
	
			updateMatrixWorld: function ( force ) {
	
				Object3D.prototype.updateMatrixWorld.call( this, force );
	
				this.matrixWorldInverse.getInverse( this.matrixWorld );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author arose / http://github.com/arose
		 */
	
		function OrthographicCamera( left, right, top, bottom, near, far ) {
	
			Camera.call( this );
	
			this.type = 'OrthographicCamera';
	
			this.zoom = 1;
			this.view = null;
	
			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;
	
			this.near = ( near !== undefined ) ? near : 0.1;
			this.far = ( far !== undefined ) ? far : 2000;
	
			this.updateProjectionMatrix();
	
		}
	
		OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
	
			constructor: OrthographicCamera,
	
			isOrthographicCamera: true,
	
			copy: function ( source, recursive ) {
	
				Camera.prototype.copy.call( this, source, recursive );
	
				this.left = source.left;
				this.right = source.right;
				this.top = source.top;
				this.bottom = source.bottom;
				this.near = source.near;
				this.far = source.far;
	
				this.zoom = source.zoom;
				this.view = source.view === null ? null : Object.assign( {}, source.view );
	
				return this;
	
			},
	
			setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
	
				if ( this.view === null ) {
	
					this.view = {
						enabled: true,
						fullWidth: 1,
						fullHeight: 1,
						offsetX: 0,
						offsetY: 0,
						width: 1,
						height: 1
					};
	
				}
	
				this.view.enabled = true;
				this.view.fullWidth = fullWidth;
				this.view.fullHeight = fullHeight;
				this.view.offsetX = x;
				this.view.offsetY = y;
				this.view.width = width;
				this.view.height = height;
	
				this.updateProjectionMatrix();
	
			},
	
			clearViewOffset: function () {
	
				if ( this.view !== null ) {
	
					this.view.enabled = false;
	
				}
	
				this.updateProjectionMatrix();
	
			},
	
			updateProjectionMatrix: function () {
	
				var dx = ( this.right - this.left ) / ( 2 * this.zoom );
				var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
				var cx = ( this.right + this.left ) / 2;
				var cy = ( this.top + this.bottom ) / 2;
	
				var left = cx - dx;
				var right = cx + dx;
				var top = cy + dy;
				var bottom = cy - dy;
	
				if ( this.view !== null && this.view.enabled ) {
	
					var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
					var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
					var scaleW = ( this.right - this.left ) / this.view.width;
					var scaleH = ( this.top - this.bottom ) / this.view.height;
	
					left += scaleW * ( this.view.offsetX / zoomW );
					right = left + scaleW * ( this.view.width / zoomW );
					top -= scaleH * ( this.view.offsetY / zoomH );
					bottom = top - scaleH * ( this.view.height / zoomH );
	
				}
	
				this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.zoom = this.zoom;
				data.object.left = this.left;
				data.object.right = this.right;
				data.object.top = this.top;
				data.object.bottom = this.bottom;
				data.object.near = this.near;
				data.object.far = this.far;
	
				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Face3( a, b, c, normal, color, materialIndex ) {
	
			this.a = a;
			this.b = b;
			this.c = c;
	
			this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
			this.vertexNormals = Array.isArray( normal ) ? normal : [];
	
			this.color = ( color && color.isColor ) ? color : new Color();
			this.vertexColors = Array.isArray( color ) ? color : [];
	
			this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
	
		}
	
		Object.assign( Face3.prototype, {
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.a = source.a;
				this.b = source.b;
				this.c = source.c;
	
				this.normal.copy( source.normal );
				this.color.copy( source.color );
	
				this.materialIndex = source.materialIndex;
	
				for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {
	
					this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();
	
				}
	
				for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {
	
					this.vertexColors[ i ] = source.vertexColors[ i ].clone();
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author bhouston / http://clara.io
		 */
	
		var geometryId = 0; // Geometry uses even numbers as Id
	
		function Geometry() {
	
			Object.defineProperty( this, 'id', { value: geometryId += 2 } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'Geometry';
	
			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];
	
			this.morphTargets = [];
			this.morphNormals = [];
	
			this.skinWeights = [];
			this.skinIndices = [];
	
			this.lineDistances = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			// update flags
	
			this.elementsNeedUpdate = false;
			this.verticesNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.lineDistancesNeedUpdate = false;
			this.groupsNeedUpdate = false;
	
		}
	
		Object.assign( Geometry.prototype, EventDispatcher.prototype, {
	
			isGeometry: true,
	
			applyMatrix: function ( matrix ) {
	
				var normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
				for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
	
					var vertex = this.vertices[ i ];
					vertex.applyMatrix4( matrix );
	
				}
	
				for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
	
					var face = this.faces[ i ];
					face.normal.applyMatrix3( normalMatrix ).normalize();
	
					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
	
						face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
	
					}
	
				}
	
				if ( this.boundingBox !== null ) {
	
					this.computeBoundingBox();
	
				}
	
				if ( this.boundingSphere !== null ) {
	
					this.computeBoundingSphere();
	
				}
	
				this.verticesNeedUpdate = true;
				this.normalsNeedUpdate = true;
	
				return this;
	
			},
	
			rotateX: function () {
	
				// rotate geometry around world x-axis
	
				var m1 = new Matrix4();
	
				return function rotateX( angle ) {
	
					m1.makeRotationX( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateY: function () {
	
				// rotate geometry around world y-axis
	
				var m1 = new Matrix4();
	
				return function rotateY( angle ) {
	
					m1.makeRotationY( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateZ: function () {
	
				// rotate geometry around world z-axis
	
				var m1 = new Matrix4();
	
				return function rotateZ( angle ) {
	
					m1.makeRotationZ( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			translate: function () {
	
				// translate geometry
	
				var m1 = new Matrix4();
	
				return function translate( x, y, z ) {
	
					m1.makeTranslation( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			scale: function () {
	
				// scale geometry
	
				var m1 = new Matrix4();
	
				return function scale( x, y, z ) {
	
					m1.makeScale( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			lookAt: function () {
	
				var obj = new Object3D();
	
				return function lookAt( vector ) {
	
					obj.lookAt( vector );
	
					obj.updateMatrix();
	
					this.applyMatrix( obj.matrix );
	
				};
	
			}(),
	
			fromBufferGeometry: function ( geometry ) {
	
				var scope = this;
	
				var indices = geometry.index !== null ? geometry.index.array : undefined;
				var attributes = geometry.attributes;
	
				var positions = attributes.position.array;
				var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
				var colors = attributes.color !== undefined ? attributes.color.array : undefined;
				var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
				var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
	
				if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];
	
				var tempNormals = [];
				var tempUVs = [];
				var tempUVs2 = [];
	
				for ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {
	
					scope.vertices.push( new Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );
	
					if ( normals !== undefined ) {
	
						tempNormals.push( new Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );
	
					}
	
					if ( colors !== undefined ) {
	
						scope.colors.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );
	
					}
	
					if ( uvs !== undefined ) {
	
						tempUVs.push( new Vector2( uvs[ j ], uvs[ j + 1 ] ) );
	
					}
	
					if ( uvs2 !== undefined ) {
	
						tempUVs2.push( new Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );
	
					}
	
				}
	
				function addFace( a, b, c, materialIndex ) {
	
					var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
					var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];
	
					var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );
	
					scope.faces.push( face );
	
					if ( uvs !== undefined ) {
	
						scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );
	
					}
	
					if ( uvs2 !== undefined ) {
	
						scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );
	
					}
	
				}
	
				var groups = geometry.groups;
	
				if ( groups.length > 0 ) {
	
					for ( var i = 0; i < groups.length; i ++ ) {
	
						var group = groups[ i ];
	
						var start = group.start;
						var count = group.count;
	
						for ( var j = start, jl = start + count; j < jl; j += 3 ) {
	
							if ( indices !== undefined ) {
	
								addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );
	
							} else {
	
								addFace( j, j + 1, j + 2, group.materialIndex );
	
							}
	
						}
	
					}
	
				} else {
	
					if ( indices !== undefined ) {
	
						for ( var i = 0; i < indices.length; i += 3 ) {
	
							addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
	
						}
	
					} else {
	
						for ( var i = 0; i < positions.length / 3; i += 3 ) {
	
							addFace( i, i + 1, i + 2 );
	
						}
	
					}
	
				}
	
				this.computeFaceNormals();
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				return this;
	
			},
	
			center: function () {
	
				this.computeBoundingBox();
	
				var offset = this.boundingBox.getCenter().negate();
	
				this.translate( offset.x, offset.y, offset.z );
	
				return offset;
	
			},
	
			normalize: function () {
	
				this.computeBoundingSphere();
	
				var center = this.boundingSphere.center;
				var radius = this.boundingSphere.radius;
	
				var s = radius === 0 ? 1 : 1.0 / radius;
	
				var matrix = new Matrix4();
				matrix.set(
					s, 0, 0, - s * center.x,
					0, s, 0, - s * center.y,
					0, 0, s, - s * center.z,
					0, 0, 0, 1
				);
	
				this.applyMatrix( matrix );
	
				return this;
	
			},
	
			computeFaceNormals: function () {
	
				var cb = new Vector3(), ab = new Vector3();
	
				for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					var face = this.faces[ f ];
	
					var vA = this.vertices[ face.a ];
					var vB = this.vertices[ face.b ];
					var vC = this.vertices[ face.c ];
	
					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );
	
					cb.normalize();
	
					face.normal.copy( cb );
	
				}
	
			},
	
			computeVertexNormals: function ( areaWeighted ) {
	
				if ( areaWeighted === undefined ) areaWeighted = true;
	
				var v, vl, f, fl, face, vertices;
	
				vertices = new Array( this.vertices.length );
	
				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
					vertices[ v ] = new Vector3();
	
				}
	
				if ( areaWeighted ) {
	
					// vertex normals weighted by triangle areas
					// http://www.iquilezles.org/www/articles/normals/normals.htm
	
					var vA, vB, vC;
					var cb = new Vector3(), ab = new Vector3();
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						vA = this.vertices[ face.a ];
						vB = this.vertices[ face.b ];
						vC = this.vertices[ face.c ];
	
						cb.subVectors( vC, vB );
						ab.subVectors( vA, vB );
						cb.cross( ab );
	
						vertices[ face.a ].add( cb );
						vertices[ face.b ].add( cb );
						vertices[ face.c ].add( cb );
	
					}
	
				} else {
	
					this.computeFaceNormals();
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						vertices[ face.a ].add( face.normal );
						vertices[ face.b ].add( face.normal );
						vertices[ face.c ].add( face.normal );
	
					}
	
				}
	
				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
					vertices[ v ].normalize();
	
				}
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						vertexNormals[ 0 ].copy( vertices[ face.a ] );
						vertexNormals[ 1 ].copy( vertices[ face.b ] );
						vertexNormals[ 2 ].copy( vertices[ face.c ] );
	
					} else {
	
						vertexNormals[ 0 ] = vertices[ face.a ].clone();
						vertexNormals[ 1 ] = vertices[ face.b ].clone();
						vertexNormals[ 2 ] = vertices[ face.c ].clone();
	
					}
	
				}
	
				if ( this.faces.length > 0 ) {
	
					this.normalsNeedUpdate = true;
	
				}
	
			},
	
			computeFlatVertexNormals: function () {
	
				var f, fl, face;
	
				this.computeFaceNormals();
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						vertexNormals[ 0 ].copy( face.normal );
						vertexNormals[ 1 ].copy( face.normal );
						vertexNormals[ 2 ].copy( face.normal );
	
					} else {
	
						vertexNormals[ 0 ] = face.normal.clone();
						vertexNormals[ 1 ] = face.normal.clone();
						vertexNormals[ 2 ] = face.normal.clone();
	
					}
	
				}
	
				if ( this.faces.length > 0 ) {
	
					this.normalsNeedUpdate = true;
	
				}
	
			},
	
			computeMorphNormals: function () {
	
				var i, il, f, fl, face;
	
				// save original normals
				// - create temp variables on first access
				//   otherwise just copy (for faster repeated calls)
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					if ( ! face.__originalFaceNormal ) {
	
						face.__originalFaceNormal = face.normal.clone();
	
					} else {
	
						face.__originalFaceNormal.copy( face.normal );
	
					}
	
					if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];
	
					for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
	
						if ( ! face.__originalVertexNormals[ i ] ) {
	
							face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
	
						} else {
	
							face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
	
						}
	
					}
	
				}
	
				// use temp geometry to compute face and vertex normals for each morph
	
				var tmpGeo = new Geometry();
				tmpGeo.faces = this.faces;
	
				for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
	
					// create on first access
	
					if ( ! this.morphNormals[ i ] ) {
	
						this.morphNormals[ i ] = {};
						this.morphNormals[ i ].faceNormals = [];
						this.morphNormals[ i ].vertexNormals = [];
	
						var dstNormalsFace = this.morphNormals[ i ].faceNormals;
						var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
	
						var faceNormal, vertexNormals;
	
						for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
							faceNormal = new Vector3();
							vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
	
							dstNormalsFace.push( faceNormal );
							dstNormalsVertex.push( vertexNormals );
	
						}
	
					}
	
					var morphNormals = this.morphNormals[ i ];
	
					// set vertices to morph target
	
					tmpGeo.vertices = this.morphTargets[ i ].vertices;
	
					// compute morph normals
	
					tmpGeo.computeFaceNormals();
					tmpGeo.computeVertexNormals();
	
					// store morph normals
	
					var faceNormal, vertexNormals;
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						faceNormal = morphNormals.faceNormals[ f ];
						vertexNormals = morphNormals.vertexNormals[ f ];
	
						faceNormal.copy( face.normal );
	
						vertexNormals.a.copy( face.vertexNormals[ 0 ] );
						vertexNormals.b.copy( face.vertexNormals[ 1 ] );
						vertexNormals.c.copy( face.vertexNormals[ 2 ] );
	
					}
	
				}
	
				// restore original normals
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					face.normal = face.__originalFaceNormal;
					face.vertexNormals = face.__originalVertexNormals;
	
				}
	
			},
	
			computeLineDistances: function () {
	
				var d = 0;
				var vertices = this.vertices;
	
				for ( var i = 0, il = vertices.length; i < il; i ++ ) {
	
					if ( i > 0 ) {
	
						d += vertices[ i ].distanceTo( vertices[ i - 1 ] );
	
					}
	
					this.lineDistances[ i ] = d;
	
				}
	
			},
	
			computeBoundingBox: function () {
	
				if ( this.boundingBox === null ) {
	
					this.boundingBox = new Box3();
	
				}
	
				this.boundingBox.setFromPoints( this.vertices );
	
			},
	
			computeBoundingSphere: function () {
	
				if ( this.boundingSphere === null ) {
	
					this.boundingSphere = new Sphere();
	
				}
	
				this.boundingSphere.setFromPoints( this.vertices );
	
			},
	
			merge: function ( geometry, matrix, materialIndexOffset ) {
	
				if ( ! ( geometry && geometry.isGeometry ) ) {
	
					console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
					return;
	
				}
	
				var normalMatrix,
					vertexOffset = this.vertices.length,
					vertices1 = this.vertices,
					vertices2 = geometry.vertices,
					faces1 = this.faces,
					faces2 = geometry.faces,
					uvs1 = this.faceVertexUvs[ 0 ],
					uvs2 = geometry.faceVertexUvs[ 0 ],
					colors1 = this.colors,
					colors2 = geometry.colors;
	
				if ( materialIndexOffset === undefined ) materialIndexOffset = 0;
	
				if ( matrix !== undefined ) {
	
					normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
				}
	
				// vertices
	
				for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
	
					var vertex = vertices2[ i ];
	
					var vertexCopy = vertex.clone();
	
					if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );
	
					vertices1.push( vertexCopy );
	
				}
	
				// colors
	
				for ( var i = 0, il = colors2.length; i < il; i ++ ) {
	
					colors1.push( colors2[ i ].clone() );
	
				}
	
				// faces
	
				for ( i = 0, il = faces2.length; i < il; i ++ ) {
	
					var face = faces2[ i ], faceCopy, normal, color,
						faceVertexNormals = face.vertexNormals,
						faceVertexColors = face.vertexColors;
	
					faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
					faceCopy.normal.copy( face.normal );
	
					if ( normalMatrix !== undefined ) {
	
						faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
	
					}
	
					for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
	
						normal = faceVertexNormals[ j ].clone();
	
						if ( normalMatrix !== undefined ) {
	
							normal.applyMatrix3( normalMatrix ).normalize();
	
						}
	
						faceCopy.vertexNormals.push( normal );
	
					}
	
					faceCopy.color.copy( face.color );
	
					for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
	
						color = faceVertexColors[ j ];
						faceCopy.vertexColors.push( color.clone() );
	
					}
	
					faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
	
					faces1.push( faceCopy );
	
				}
	
				// uvs
	
				for ( i = 0, il = uvs2.length; i < il; i ++ ) {
	
					var uv = uvs2[ i ], uvCopy = [];
	
					if ( uv === undefined ) {
	
						continue;
	
					}
	
					for ( var j = 0, jl = uv.length; j < jl; j ++ ) {
	
						uvCopy.push( uv[ j ].clone() );
	
					}
	
					uvs1.push( uvCopy );
	
				}
	
			},
	
			mergeMesh: function ( mesh ) {
	
				if ( ! ( mesh && mesh.isMesh ) ) {
	
					console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
					return;
	
				}
	
				mesh.matrixAutoUpdate && mesh.updateMatrix();
	
				this.merge( mesh.geometry, mesh.matrix );
	
			},
	
			/*
			 * Checks for duplicate vertices with hashmap.
			 * Duplicated vertices are removed
			 * and faces' vertices are updated.
			 */
	
			mergeVertices: function () {
	
				var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
				var unique = [], changes = [];
	
				var v, key;
				var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
				var precision = Math.pow( 10, precisionPoints );
				var i, il, face;
				var indices, j, jl;
	
				for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
	
					v = this.vertices[ i ];
					key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
	
					if ( verticesMap[ key ] === undefined ) {
	
						verticesMap[ key ] = i;
						unique.push( this.vertices[ i ] );
						changes[ i ] = unique.length - 1;
	
					} else {
	
						//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
						changes[ i ] = changes[ verticesMap[ key ] ];
	
					}
	
				}
	
	
				// if faces are completely degenerate after merging vertices, we
				// have to remove them from the geometry.
				var faceIndicesToRemove = [];
	
				for ( i = 0, il = this.faces.length; i < il; i ++ ) {
	
					face = this.faces[ i ];
	
					face.a = changes[ face.a ];
					face.b = changes[ face.b ];
					face.c = changes[ face.c ];
	
					indices = [ face.a, face.b, face.c ];
	
					// if any duplicate vertices are found in a Face3
					// we have to remove the face as nothing can be saved
					for ( var n = 0; n < 3; n ++ ) {
	
						if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {
	
							faceIndicesToRemove.push( i );
							break;
	
						}
	
					}
	
				}
	
				for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
	
					var idx = faceIndicesToRemove[ i ];
	
					this.faces.splice( idx, 1 );
	
					for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
	
						this.faceVertexUvs[ j ].splice( idx, 1 );
	
					}
	
				}
	
				// Use unique set of vertices
	
				var diff = this.vertices.length - unique.length;
				this.vertices = unique;
				return diff;
	
			},
	
			setFromPoints: function ( points ) {
	
				this.vertices = [];
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					var point = points[ i ];
					this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
	
				}
	
				return this;
	
			},
	
			sortFacesByMaterialIndex: function () {
	
				var faces = this.faces;
				var length = faces.length;
	
				// tag faces
	
				for ( var i = 0; i < length; i ++ ) {
	
					faces[ i ]._id = i;
	
				}
	
				// sort faces
	
				function materialIndexSort( a, b ) {
	
					return a.materialIndex - b.materialIndex;
	
				}
	
				faces.sort( materialIndexSort );
	
				// sort uvs
	
				var uvs1 = this.faceVertexUvs[ 0 ];
				var uvs2 = this.faceVertexUvs[ 1 ];
	
				var newUvs1, newUvs2;
	
				if ( uvs1 && uvs1.length === length ) newUvs1 = [];
				if ( uvs2 && uvs2.length === length ) newUvs2 = [];
	
				for ( var i = 0; i < length; i ++ ) {
	
					var id = faces[ i ]._id;
	
					if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
					if ( newUvs2 ) newUvs2.push( uvs2[ id ] );
	
				}
	
				if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
				if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;
	
			},
	
			toJSON: function () {
	
				var data = {
					metadata: {
						version: 4.5,
						type: 'Geometry',
						generator: 'Geometry.toJSON'
					}
				};
	
				// standard Geometry serialization
	
				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;
	
				if ( this.parameters !== undefined ) {
	
					var parameters = this.parameters;
	
					for ( var key in parameters ) {
	
						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
	
					}
	
					return data;
	
				}
	
				var vertices = [];
	
				for ( var i = 0; i < this.vertices.length; i ++ ) {
	
					var vertex = this.vertices[ i ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
				var faces = [];
				var normals = [];
				var normalsHash = {};
				var colors = [];
				var colorsHash = {};
				var uvs = [];
				var uvsHash = {};
	
				for ( var i = 0; i < this.faces.length; i ++ ) {
	
					var face = this.faces[ i ];
	
					var hasMaterial = true;
					var hasFaceUv = false; // deprecated
					var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
					var hasFaceNormal = face.normal.length() > 0;
					var hasFaceVertexNormal = face.vertexNormals.length > 0;
					var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
					var hasFaceVertexColor = face.vertexColors.length > 0;
	
					var faceType = 0;
	
					faceType = setBit( faceType, 0, 0 ); // isQuad
					faceType = setBit( faceType, 1, hasMaterial );
					faceType = setBit( faceType, 2, hasFaceUv );
					faceType = setBit( faceType, 3, hasFaceVertexUv );
					faceType = setBit( faceType, 4, hasFaceNormal );
					faceType = setBit( faceType, 5, hasFaceVertexNormal );
					faceType = setBit( faceType, 6, hasFaceColor );
					faceType = setBit( faceType, 7, hasFaceVertexColor );
	
					faces.push( faceType );
					faces.push( face.a, face.b, face.c );
					faces.push( face.materialIndex );
	
					if ( hasFaceVertexUv ) {
	
						var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
	
						faces.push(
							getUvIndex( faceVertexUvs[ 0 ] ),
							getUvIndex( faceVertexUvs[ 1 ] ),
							getUvIndex( faceVertexUvs[ 2 ] )
						);
	
					}
	
					if ( hasFaceNormal ) {
	
						faces.push( getNormalIndex( face.normal ) );
	
					}
	
					if ( hasFaceVertexNormal ) {
	
						var vertexNormals = face.vertexNormals;
	
						faces.push(
							getNormalIndex( vertexNormals[ 0 ] ),
							getNormalIndex( vertexNormals[ 1 ] ),
							getNormalIndex( vertexNormals[ 2 ] )
						);
	
					}
	
					if ( hasFaceColor ) {
	
						faces.push( getColorIndex( face.color ) );
	
					}
	
					if ( hasFaceVertexColor ) {
	
						var vertexColors = face.vertexColors;
	
						faces.push(
							getColorIndex( vertexColors[ 0 ] ),
							getColorIndex( vertexColors[ 1 ] ),
							getColorIndex( vertexColors[ 2 ] )
						);
	
					}
	
				}
	
				function setBit( value, position, enabled ) {
	
					return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );
	
				}
	
				function getNormalIndex( normal ) {
	
					var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
	
					if ( normalsHash[ hash ] !== undefined ) {
	
						return normalsHash[ hash ];
	
					}
	
					normalsHash[ hash ] = normals.length / 3;
					normals.push( normal.x, normal.y, normal.z );
	
					return normalsHash[ hash ];
	
				}
	
				function getColorIndex( color ) {
	
					var hash = color.r.toString() + color.g.toString() + color.b.toString();
	
					if ( colorsHash[ hash ] !== undefined ) {
	
						return colorsHash[ hash ];
	
					}
	
					colorsHash[ hash ] = colors.length;
					colors.push( color.getHex() );
	
					return colorsHash[ hash ];
	
				}
	
				function getUvIndex( uv ) {
	
					var hash = uv.x.toString() + uv.y.toString();
	
					if ( uvsHash[ hash ] !== undefined ) {
	
						return uvsHash[ hash ];
	
					}
	
					uvsHash[ hash ] = uvs.length / 2;
					uvs.push( uv.x, uv.y );
	
					return uvsHash[ hash ];
	
				}
	
				data.data = {};
	
				data.data.vertices = vertices;
				data.data.normals = normals;
				if ( colors.length > 0 ) data.data.colors = colors;
				if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
				data.data.faces = faces;
	
				return data;
	
			},
	
			clone: function () {
	
				/*
				 // Handle primitives
	
				 var parameters = this.parameters;
	
				 if ( parameters !== undefined ) {
	
				 var values = [];
	
				 for ( var key in parameters ) {
	
				 values.push( parameters[ key ] );
	
				 }
	
				 var geometry = Object.create( this.constructor.prototype );
				 this.constructor.apply( geometry, values );
				 return geometry;
	
				 }
	
				 return new this.constructor().copy( this );
				 */
	
				return new Geometry().copy( this );
	
			},
	
			copy: function ( source ) {
	
				var i, il, j, jl, k, kl;
	
				// reset
	
				this.vertices = [];
				this.colors = [];
				this.faces = [];
				this.faceVertexUvs = [[]];
				this.morphTargets = [];
				this.morphNormals = [];
				this.skinWeights = [];
				this.skinIndices = [];
				this.lineDistances = [];
				this.boundingBox = null;
				this.boundingSphere = null;
	
				// name
	
				this.name = source.name;
	
				// vertices
	
				var vertices = source.vertices;
	
				for ( i = 0, il = vertices.length; i < il; i ++ ) {
	
					this.vertices.push( vertices[ i ].clone() );
	
				}
	
				// colors
	
				var colors = source.colors;
	
				for ( i = 0, il = colors.length; i < il; i ++ ) {
	
					this.colors.push( colors[ i ].clone() );
	
				}
	
				// faces
	
				var faces = source.faces;
	
				for ( i = 0, il = faces.length; i < il; i ++ ) {
	
					this.faces.push( faces[ i ].clone() );
	
				}
	
				// face vertex uvs
	
				for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {
	
					var faceVertexUvs = source.faceVertexUvs[ i ];
	
					if ( this.faceVertexUvs[ i ] === undefined ) {
	
						this.faceVertexUvs[ i ] = [];
	
					}
	
					for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {
	
						var uvs = faceVertexUvs[ j ], uvsCopy = [];
	
						for ( k = 0, kl = uvs.length; k < kl; k ++ ) {
	
							var uv = uvs[ k ];
	
							uvsCopy.push( uv.clone() );
	
						}
	
						this.faceVertexUvs[ i ].push( uvsCopy );
	
					}
	
				}
	
				// morph targets
	
				var morphTargets = source.morphTargets;
	
				for ( i = 0, il = morphTargets.length; i < il; i ++ ) {
	
					var morphTarget = {};
					morphTarget.name = morphTargets[ i ].name;
	
					// vertices
	
					if ( morphTargets[ i ].vertices !== undefined ) {
	
						morphTarget.vertices = [];
	
						for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {
	
							morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );
	
						}
	
					}
	
					// normals
	
					if ( morphTargets[ i ].normals !== undefined ) {
	
						morphTarget.normals = [];
	
						for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {
	
							morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );
	
						}
	
					}
	
					this.morphTargets.push( morphTarget );
	
				}
	
				// morph normals
	
				var morphNormals = source.morphNormals;
	
				for ( i = 0, il = morphNormals.length; i < il; i ++ ) {
	
					var morphNormal = {};
	
					// vertex normals
	
					if ( morphNormals[ i ].vertexNormals !== undefined ) {
	
						morphNormal.vertexNormals = [];
	
						for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {
	
							var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
							var destVertexNormal = {};
	
							destVertexNormal.a = srcVertexNormal.a.clone();
							destVertexNormal.b = srcVertexNormal.b.clone();
							destVertexNormal.c = srcVertexNormal.c.clone();
	
							morphNormal.vertexNormals.push( destVertexNormal );
	
						}
	
					}
	
					// face normals
	
					if ( morphNormals[ i ].faceNormals !== undefined ) {
	
						morphNormal.faceNormals = [];
	
						for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {
	
							morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );
	
						}
	
					}
	
					this.morphNormals.push( morphNormal );
	
				}
	
				// skin weights
	
				var skinWeights = source.skinWeights;
	
				for ( i = 0, il = skinWeights.length; i < il; i ++ ) {
	
					this.skinWeights.push( skinWeights[ i ].clone() );
	
				}
	
				// skin indices
	
				var skinIndices = source.skinIndices;
	
				for ( i = 0, il = skinIndices.length; i < il; i ++ ) {
	
					this.skinIndices.push( skinIndices[ i ].clone() );
	
				}
	
				// line distances
	
				var lineDistances = source.lineDistances;
	
				for ( i = 0, il = lineDistances.length; i < il; i ++ ) {
	
					this.lineDistances.push( lineDistances[ i ] );
	
				}
	
				// bounding box
	
				var boundingBox = source.boundingBox;
	
				if ( boundingBox !== null ) {
	
					this.boundingBox = boundingBox.clone();
	
				}
	
				// bounding sphere
	
				var boundingSphere = source.boundingSphere;
	
				if ( boundingSphere !== null ) {
	
					this.boundingSphere = boundingSphere.clone();
	
				}
	
				// update flags
	
				this.elementsNeedUpdate = source.elementsNeedUpdate;
				this.verticesNeedUpdate = source.verticesNeedUpdate;
				this.uvsNeedUpdate = source.uvsNeedUpdate;
				this.normalsNeedUpdate = source.normalsNeedUpdate;
				this.colorsNeedUpdate = source.colorsNeedUpdate;
				this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
				this.groupsNeedUpdate = source.groupsNeedUpdate;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function BufferAttribute( array, itemSize, normalized ) {
	
			if ( Array.isArray( array ) ) {
	
				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
	
			}
	
			this.uuid = _Math.generateUUID();
			this.name = '';
	
			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized === true;
	
			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };
	
			this.onUploadCallback = function () {};
	
			this.version = 0;
	
		}
	
		Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {
	
			set: function ( value ) {
	
				if ( value === true ) this.version ++;
	
			}
	
		} );
	
		Object.assign( BufferAttribute.prototype, {
	
			isBufferAttribute: true,
	
			setArray: function ( array ) {
	
				if ( Array.isArray( array ) ) {
	
					throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
	
				}
	
				this.count = array !== undefined ? array.length / this.itemSize : 0;
				this.array = array;
	
			},
	
			setDynamic: function ( value ) {
	
				this.dynamic = value;
	
				return this;
	
			},
	
			copy: function ( source ) {
	
				this.array = new source.array.constructor( source.array );
				this.itemSize = source.itemSize;
				this.count = source.count;
				this.normalized = source.normalized;
	
				this.dynamic = source.dynamic;
	
				return this;
	
			},
	
			copyAt: function ( index1, attribute, index2 ) {
	
				index1 *= this.itemSize;
				index2 *= attribute.itemSize;
	
				for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
	
					this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
				}
	
				return this;
	
			},
	
			copyArray: function ( array ) {
	
				this.array.set( array );
	
				return this;
	
			},
	
			copyColorsArray: function ( colors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = colors.length; i < l; i ++ ) {
	
					var color = colors[ i ];
	
					if ( color === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
						color = new Color();
	
					}
	
					array[ offset ++ ] = color.r;
					array[ offset ++ ] = color.g;
					array[ offset ++ ] = color.b;
	
				}
	
				return this;
	
			},
	
			copyIndicesArray: function ( indices ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = indices.length; i < l; i ++ ) {
	
					var index = indices[ i ];
	
					array[ offset ++ ] = index.a;
					array[ offset ++ ] = index.b;
					array[ offset ++ ] = index.c;
	
				}
	
				return this;
	
			},
	
			copyVector2sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
						vector = new Vector2();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
	
				}
	
				return this;
	
			},
	
			copyVector3sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
						vector = new Vector3();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
	
				}
	
				return this;
	
			},
	
			copyVector4sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
						vector = new Vector4();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
					array[ offset ++ ] = vector.w;
	
				}
	
				return this;
	
			},
	
			set: function ( value, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.array.set( value, offset );
	
				return this;
	
			},
	
			getX: function ( index ) {
	
				return this.array[ index * this.itemSize ];
	
			},
	
			setX: function ( index, x ) {
	
				this.array[ index * this.itemSize ] = x;
	
				return this;
	
			},
	
			getY: function ( index ) {
	
				return this.array[ index * this.itemSize + 1 ];
	
			},
	
			setY: function ( index, y ) {
	
				this.array[ index * this.itemSize + 1 ] = y;
	
				return this;
	
			},
	
			getZ: function ( index ) {
	
				return this.array[ index * this.itemSize + 2 ];
	
			},
	
			setZ: function ( index, z ) {
	
				this.array[ index * this.itemSize + 2 ] = z;
	
				return this;
	
			},
	
			getW: function ( index ) {
	
				return this.array[ index * this.itemSize + 3 ];
	
			},
	
			setW: function ( index, w ) {
	
				this.array[ index * this.itemSize + 3 ] = w;
	
				return this;
	
			},
	
			setXY: function ( index, x, y ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
	
				return this;
	
			},
	
			setXYZ: function ( index, x, y, z ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
	
				return this;
	
			},
	
			setXYZW: function ( index, x, y, z, w ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
				this.array[ index + 3 ] = w;
	
				return this;
	
			},
	
			onUpload: function ( callback ) {
	
				this.onUploadCallback = callback;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this.array, this.itemSize ).copy( this );
	
			}
	
		} );
	
		//
	
		function Int8BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );
	
		}
	
		Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
	
	
		function Uint8BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );
	
		}
	
		Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
	
	
		function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );
	
		}
	
		Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
	
	
		function Int16BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );
	
		}
	
		Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
	
	
		function Uint16BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );
	
		}
	
		Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
	
	
		function Int32BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );
	
		}
	
		Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
	
	
		function Uint32BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );
	
		}
	
		Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
	
	
		function Float32BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );
	
		}
	
		Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
	
	
		function Float64BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );
	
		}
	
		Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function DirectGeometry() {
	
			this.indices = [];
			this.vertices = [];
			this.normals = [];
			this.colors = [];
			this.uvs = [];
			this.uvs2 = [];
	
			this.groups = [];
	
			this.morphTargets = {};
	
			this.skinWeights = [];
			this.skinIndices = [];
	
			// this.lineDistances = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			// update flags
	
			this.verticesNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.groupsNeedUpdate = false;
	
		}
	
		Object.assign( DirectGeometry.prototype, {
	
			computeGroups: function ( geometry ) {
	
				var group;
				var groups = [];
				var materialIndex = undefined;
	
				var faces = geometry.faces;
	
				for ( var i = 0; i < faces.length; i ++ ) {
	
					var face = faces[ i ];
	
					// materials
	
					if ( face.materialIndex !== materialIndex ) {
	
						materialIndex = face.materialIndex;
	
						if ( group !== undefined ) {
	
							group.count = ( i * 3 ) - group.start;
							groups.push( group );
	
						}
	
						group = {
							start: i * 3,
							materialIndex: materialIndex
						};
	
					}
	
				}
	
				if ( group !== undefined ) {
	
					group.count = ( i * 3 ) - group.start;
					groups.push( group );
	
				}
	
				this.groups = groups;
	
			},
	
			fromGeometry: function ( geometry ) {
	
				var faces = geometry.faces;
				var vertices = geometry.vertices;
				var faceVertexUvs = geometry.faceVertexUvs;
	
				var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
				var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;
	
				// morphs
	
				var morphTargets = geometry.morphTargets;
				var morphTargetsLength = morphTargets.length;
	
				var morphTargetsPosition;
	
				if ( morphTargetsLength > 0 ) {
	
					morphTargetsPosition = [];
	
					for ( var i = 0; i < morphTargetsLength; i ++ ) {
	
						morphTargetsPosition[ i ] = [];
	
					}
	
					this.morphTargets.position = morphTargetsPosition;
	
				}
	
				var morphNormals = geometry.morphNormals;
				var morphNormalsLength = morphNormals.length;
	
				var morphTargetsNormal;
	
				if ( morphNormalsLength > 0 ) {
	
					morphTargetsNormal = [];
	
					for ( var i = 0; i < morphNormalsLength; i ++ ) {
	
						morphTargetsNormal[ i ] = [];
	
					}
	
					this.morphTargets.normal = morphTargetsNormal;
	
				}
	
				// skins
	
				var skinIndices = geometry.skinIndices;
				var skinWeights = geometry.skinWeights;
	
				var hasSkinIndices = skinIndices.length === vertices.length;
				var hasSkinWeights = skinWeights.length === vertices.length;
	
				//
	
				for ( var i = 0; i < faces.length; i ++ ) {
	
					var face = faces[ i ];
	
					this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );
	
					} else {
	
						var normal = face.normal;
	
						this.normals.push( normal, normal, normal );
	
					}
	
					var vertexColors = face.vertexColors;
	
					if ( vertexColors.length === 3 ) {
	
						this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );
	
					} else {
	
						var color = face.color;
	
						this.colors.push( color, color, color );
	
					}
	
					if ( hasFaceVertexUv === true ) {
	
						var vertexUvs = faceVertexUvs[ 0 ][ i ];
	
						if ( vertexUvs !== undefined ) {
	
							this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
						} else {
	
							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );
	
							this.uvs.push( new Vector2(), new Vector2(), new Vector2() );
	
						}
	
					}
	
					if ( hasFaceVertexUv2 === true ) {
	
						var vertexUvs = faceVertexUvs[ 1 ][ i ];
	
						if ( vertexUvs !== undefined ) {
	
							this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
						} else {
	
							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );
	
							this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );
	
						}
	
					}
	
					// morphs
	
					for ( var j = 0; j < morphTargetsLength; j ++ ) {
	
						var morphTarget = morphTargets[ j ].vertices;
	
						morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );
	
					}
	
					for ( var j = 0; j < morphNormalsLength; j ++ ) {
	
						var morphNormal = morphNormals[ j ].vertexNormals[ i ];
	
						morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );
	
					}
	
					// skins
	
					if ( hasSkinIndices ) {
	
						this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );
	
					}
	
					if ( hasSkinWeights ) {
	
						this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );
	
					}
	
				}
	
				this.computeGroups( geometry );
	
				this.verticesNeedUpdate = geometry.verticesNeedUpdate;
				this.normalsNeedUpdate = geometry.normalsNeedUpdate;
				this.colorsNeedUpdate = geometry.colorsNeedUpdate;
				this.uvsNeedUpdate = geometry.uvsNeedUpdate;
				this.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function arrayMax( array ) {
	
			if ( array.length === 0 ) return - Infinity;
	
			var max = array[ 0 ];
	
			for ( var i = 1, l = array.length; i < l; ++ i ) {
	
				if ( array[ i ] > max ) max = array[ i ];
	
			}
	
			return max;
	
		}
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id
	
		function BufferGeometry() {
	
			Object.defineProperty( this, 'id', { value: bufferGeometryId += 2 } );
	
			this.uuid = _Math.generateUUID();
	
			this.name = '';
			this.type = 'BufferGeometry';
	
			this.index = null;
			this.attributes = {};
	
			this.morphAttributes = {};
	
			this.groups = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			this.drawRange = { start: 0, count: Infinity };
	
		}
	
		Object.assign( BufferGeometry.prototype, EventDispatcher.prototype, {
	
			isBufferGeometry: true,
	
			getIndex: function () {
	
				return this.index;
	
			},
	
			setIndex: function ( index ) {
	
				if ( Array.isArray( index ) ) {
	
					this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );
	
				} else {
	
					this.index = index;
	
				}
	
			},
	
			addAttribute: function ( name, attribute ) {
	
				if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {
	
					console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
	
					this.addAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );
	
					return;
	
				}
	
				if ( name === 'index' ) {
	
					console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
					this.setIndex( attribute );
	
					return;
	
				}
	
				this.attributes[ name ] = attribute;
	
				return this;
	
			},
	
			getAttribute: function ( name ) {
	
				return this.attributes[ name ];
	
			},
	
			removeAttribute: function ( name ) {
	
				delete this.attributes[ name ];
	
				return this;
	
			},
	
			addGroup: function ( start, count, materialIndex ) {
	
				this.groups.push( {
	
					start: start,
					count: count,
					materialIndex: materialIndex !== undefined ? materialIndex : 0
	
				} );
	
			},
	
			clearGroups: function () {
	
				this.groups = [];
	
			},
	
			setDrawRange: function ( start, count ) {
	
				this.drawRange.start = start;
				this.drawRange.count = count;
	
			},
	
			applyMatrix: function ( matrix ) {
	
				var position = this.attributes.position;
	
				if ( position !== undefined ) {
	
					matrix.applyToBufferAttribute( position );
					position.needsUpdate = true;
	
				}
	
				var normal = this.attributes.normal;
	
				if ( normal !== undefined ) {
	
					var normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
					normalMatrix.applyToBufferAttribute( normal );
					normal.needsUpdate = true;
	
				}
	
				if ( this.boundingBox !== null ) {
	
					this.computeBoundingBox();
	
				}
	
				if ( this.boundingSphere !== null ) {
	
					this.computeBoundingSphere();
	
				}
	
				return this;
	
			},
	
			rotateX: function () {
	
				// rotate geometry around world x-axis
	
				var m1 = new Matrix4();
	
				return function rotateX( angle ) {
	
					m1.makeRotationX( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateY: function () {
	
				// rotate geometry around world y-axis
	
				var m1 = new Matrix4();
	
				return function rotateY( angle ) {
	
					m1.makeRotationY( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			rotateZ: function () {
	
				// rotate geometry around world z-axis
	
				var m1 = new Matrix4();
	
				return function rotateZ( angle ) {
	
					m1.makeRotationZ( angle );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			translate: function () {
	
				// translate geometry
	
				var m1 = new Matrix4();
	
				return function translate( x, y, z ) {
	
					m1.makeTranslation( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			scale: function () {
	
				// scale geometry
	
				var m1 = new Matrix4();
	
				return function scale( x, y, z ) {
	
					m1.makeScale( x, y, z );
	
					this.applyMatrix( m1 );
	
					return this;
	
				};
	
			}(),
	
			lookAt: function () {
	
				var obj = new Object3D();
	
				return function lookAt( vector ) {
	
					obj.lookAt( vector );
	
					obj.updateMatrix();
	
					this.applyMatrix( obj.matrix );
	
				};
	
			}(),
	
			center: function () {
	
				this.computeBoundingBox();
	
				var offset = this.boundingBox.getCenter().negate();
	
				this.translate( offset.x, offset.y, offset.z );
	
				return offset;
	
			},
	
			setFromObject: function ( object ) {
	
				// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
	
				var geometry = object.geometry;
	
				if ( object.isPoints || object.isLine ) {
	
					var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
					var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );
	
					this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
					this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );
	
					if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {
	
						var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );
	
						this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );
	
					}
	
					if ( geometry.boundingSphere !== null ) {
	
						this.boundingSphere = geometry.boundingSphere.clone();
	
					}
	
					if ( geometry.boundingBox !== null ) {
	
						this.boundingBox = geometry.boundingBox.clone();
	
					}
	
				} else if ( object.isMesh ) {
	
					if ( geometry && geometry.isGeometry ) {
	
						this.fromGeometry( geometry );
	
					}
	
				}
	
				return this;
	
			},
	
			setFromPoints: function ( points ) {
	
				var position = [];
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					var point = points[ i ];
					position.push( point.x, point.y, point.z || 0 );
	
				}
	
				this.addAttribute( 'position', new Float32BufferAttribute( position, 3 ) );
	
				return this;
	
			},
	
			updateFromObject: function ( object ) {
	
				var geometry = object.geometry;
	
				if ( object.isMesh ) {
	
					var direct = geometry.__directGeometry;
	
					if ( geometry.elementsNeedUpdate === true ) {
	
						direct = undefined;
						geometry.elementsNeedUpdate = false;
	
					}
	
					if ( direct === undefined ) {
	
						return this.fromGeometry( geometry );
	
					}
	
					direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
					direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
					direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
					direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
					direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
					geometry.verticesNeedUpdate = false;
					geometry.normalsNeedUpdate = false;
					geometry.colorsNeedUpdate = false;
					geometry.uvsNeedUpdate = false;
					geometry.groupsNeedUpdate = false;
	
					geometry = direct;
	
				}
	
				var attribute;
	
				if ( geometry.verticesNeedUpdate === true ) {
	
					attribute = this.attributes.position;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector3sArray( geometry.vertices );
						attribute.needsUpdate = true;
	
					}
	
					geometry.verticesNeedUpdate = false;
	
				}
	
				if ( geometry.normalsNeedUpdate === true ) {
	
					attribute = this.attributes.normal;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector3sArray( geometry.normals );
						attribute.needsUpdate = true;
	
					}
	
					geometry.normalsNeedUpdate = false;
	
				}
	
				if ( geometry.colorsNeedUpdate === true ) {
	
					attribute = this.attributes.color;
	
					if ( attribute !== undefined ) {
	
						attribute.copyColorsArray( geometry.colors );
						attribute.needsUpdate = true;
	
					}
	
					geometry.colorsNeedUpdate = false;
	
				}
	
				if ( geometry.uvsNeedUpdate ) {
	
					attribute = this.attributes.uv;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector2sArray( geometry.uvs );
						attribute.needsUpdate = true;
	
					}
	
					geometry.uvsNeedUpdate = false;
	
				}
	
				if ( geometry.lineDistancesNeedUpdate ) {
	
					attribute = this.attributes.lineDistance;
	
					if ( attribute !== undefined ) {
	
						attribute.copyArray( geometry.lineDistances );
						attribute.needsUpdate = true;
	
					}
	
					geometry.lineDistancesNeedUpdate = false;
	
				}
	
				if ( geometry.groupsNeedUpdate ) {
	
					geometry.computeGroups( object.geometry );
					this.groups = geometry.groups;
	
					geometry.groupsNeedUpdate = false;
	
				}
	
				return this;
	
			},
	
			fromGeometry: function ( geometry ) {
	
				geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );
	
				return this.fromDirectGeometry( geometry.__directGeometry );
	
			},
	
			fromDirectGeometry: function ( geometry ) {
	
				var positions = new Float32Array( geometry.vertices.length * 3 );
				this.addAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );
	
				if ( geometry.normals.length > 0 ) {
	
					var normals = new Float32Array( geometry.normals.length * 3 );
					this.addAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );
	
				}
	
				if ( geometry.colors.length > 0 ) {
	
					var colors = new Float32Array( geometry.colors.length * 3 );
					this.addAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );
	
				}
	
				if ( geometry.uvs.length > 0 ) {
	
					var uvs = new Float32Array( geometry.uvs.length * 2 );
					this.addAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );
	
				}
	
				if ( geometry.uvs2.length > 0 ) {
	
					var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
					this.addAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );
	
				}
	
				if ( geometry.indices.length > 0 ) {
	
					var TypeArray = arrayMax( geometry.indices ) > 65535 ? Uint32Array : Uint16Array;
					var indices = new TypeArray( geometry.indices.length * 3 );
					this.setIndex( new BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );
	
				}
	
				// groups
	
				this.groups = geometry.groups;
	
				// morphs
	
				for ( var name in geometry.morphTargets ) {
	
					var array = [];
					var morphTargets = geometry.morphTargets[ name ];
	
					for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {
	
						var morphTarget = morphTargets[ i ];
	
						var attribute = new Float32BufferAttribute( morphTarget.length * 3, 3 );
	
						array.push( attribute.copyVector3sArray( morphTarget ) );
	
					}
	
					this.morphAttributes[ name ] = array;
	
				}
	
				// skinning
	
				if ( geometry.skinIndices.length > 0 ) {
	
					var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
					this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );
	
				}
	
				if ( geometry.skinWeights.length > 0 ) {
	
					var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
					this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );
	
				}
	
				//
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
				return this;
	
			},
	
			computeBoundingBox: function () {
	
				if ( this.boundingBox === null ) {
	
					this.boundingBox = new Box3();
	
				}
	
				var position = this.attributes.position;
	
				if ( position !== undefined ) {
	
					this.boundingBox.setFromBufferAttribute( position );
	
				} else {
	
					this.boundingBox.makeEmpty();
	
				}
	
				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
	
					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
	
				}
	
			},
	
			computeBoundingSphere: function () {
	
				var box = new Box3();
				var vector = new Vector3();
	
				return function computeBoundingSphere() {
	
					if ( this.boundingSphere === null ) {
	
						this.boundingSphere = new Sphere();
	
					}
	
					var position = this.attributes.position;
	
					if ( position ) {
	
						var center = this.boundingSphere.center;
	
						box.setFromBufferAttribute( position );
						box.getCenter( center );
	
						// hoping to find a boundingSphere with a radius smaller than the
						// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
	
						var maxRadiusSq = 0;
	
						for ( var i = 0, il = position.count; i < il; i ++ ) {
	
							vector.x = position.getX( i );
							vector.y = position.getY( i );
							vector.z = position.getZ( i );
							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
	
						}
	
						this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
	
						if ( isNaN( this.boundingSphere.radius ) ) {
	
							console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
	
						}
	
					}
	
				};
	
			}(),
	
			computeFaceNormals: function () {
	
				// backwards compatibility
	
			},
	
			computeVertexNormals: function () {
	
				var index = this.index;
				var attributes = this.attributes;
				var groups = this.groups;
	
				if ( attributes.position ) {
	
					var positions = attributes.position.array;
	
					if ( attributes.normal === undefined ) {
	
						this.addAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );
	
					} else {
	
						// reset existing normals to zero
	
						var array = attributes.normal.array;
	
						for ( var i = 0, il = array.length; i < il; i ++ ) {
	
							array[ i ] = 0;
	
						}
	
					}
	
					var normals = attributes.normal.array;
	
					var vA, vB, vC;
					var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
					var cb = new Vector3(), ab = new Vector3();
	
					// indexed elements
	
					if ( index ) {
	
						var indices = index.array;
	
						if ( groups.length === 0 ) {
	
							this.addGroup( 0, indices.length );
	
						}
	
						for ( var j = 0, jl = groups.length; j < jl; ++ j ) {
	
							var group = groups[ j ];
	
							var start = group.start;
							var count = group.count;
	
							for ( var i = start, il = start + count; i < il; i += 3 ) {
	
								vA = indices[ i + 0 ] * 3;
								vB = indices[ i + 1 ] * 3;
								vC = indices[ i + 2 ] * 3;
	
								pA.fromArray( positions, vA );
								pB.fromArray( positions, vB );
								pC.fromArray( positions, vC );
	
								cb.subVectors( pC, pB );
								ab.subVectors( pA, pB );
								cb.cross( ab );
	
								normals[ vA ] += cb.x;
								normals[ vA + 1 ] += cb.y;
								normals[ vA + 2 ] += cb.z;
	
								normals[ vB ] += cb.x;
								normals[ vB + 1 ] += cb.y;
								normals[ vB + 2 ] += cb.z;
	
								normals[ vC ] += cb.x;
								normals[ vC + 1 ] += cb.y;
								normals[ vC + 2 ] += cb.z;
	
							}
	
						}
	
					} else {
	
						// non-indexed elements (unconnected triangle soup)
	
						for ( var i = 0, il = positions.length; i < il; i += 9 ) {
	
							pA.fromArray( positions, i );
							pB.fromArray( positions, i + 3 );
							pC.fromArray( positions, i + 6 );
	
							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );
	
							normals[ i ] = cb.x;
							normals[ i + 1 ] = cb.y;
							normals[ i + 2 ] = cb.z;
	
							normals[ i + 3 ] = cb.x;
							normals[ i + 4 ] = cb.y;
							normals[ i + 5 ] = cb.z;
	
							normals[ i + 6 ] = cb.x;
							normals[ i + 7 ] = cb.y;
							normals[ i + 8 ] = cb.z;
	
						}
	
					}
	
					this.normalizeNormals();
	
					attributes.normal.needsUpdate = true;
	
				}
	
			},
	
			merge: function ( geometry, offset ) {
	
				if ( ! ( geometry && geometry.isBufferGeometry ) ) {
	
					console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
					return;
	
				}
	
				if ( offset === undefined ) offset = 0;
	
				var attributes = this.attributes;
	
				for ( var key in attributes ) {
	
					if ( geometry.attributes[ key ] === undefined ) continue;
	
					var attribute1 = attributes[ key ];
					var attributeArray1 = attribute1.array;
	
					var attribute2 = geometry.attributes[ key ];
					var attributeArray2 = attribute2.array;
	
					var attributeSize = attribute2.itemSize;
	
					for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {
	
						attributeArray1[ j ] = attributeArray2[ i ];
	
					}
	
				}
	
				return this;
	
			},
	
			normalizeNormals: function () {
	
				var vector = new Vector3();
	
				return function normalizeNormals() {
	
					var normals = this.attributes.normal;
	
					for ( var i = 0, il = normals.count; i < il; i ++ ) {
	
						vector.x = normals.getX( i );
						vector.y = normals.getY( i );
						vector.z = normals.getZ( i );
	
						vector.normalize();
	
						normals.setXYZ( i, vector.x, vector.y, vector.z );
	
					}
	
				};
	
			}(),
	
			toNonIndexed: function () {
	
				if ( this.index === null ) {
	
					console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
					return this;
	
				}
	
				var geometry2 = new BufferGeometry();
	
				var indices = this.index.array;
				var attributes = this.attributes;
	
				for ( var name in attributes ) {
	
					var attribute = attributes[ name ];
	
					var array = attribute.array;
					var itemSize = attribute.itemSize;
	
					var array2 = new array.constructor( indices.length * itemSize );
	
					var index = 0, index2 = 0;
	
					for ( var i = 0, l = indices.length; i < l; i ++ ) {
	
						index = indices[ i ] * itemSize;
	
						for ( var j = 0; j < itemSize; j ++ ) {
	
							array2[ index2 ++ ] = array[ index ++ ];
	
						}
	
					}
	
					geometry2.addAttribute( name, new BufferAttribute( array2, itemSize ) );
	
				}
	
				return geometry2;
	
			},
	
			toJSON: function () {
	
				var data = {
					metadata: {
						version: 4.5,
						type: 'BufferGeometry',
						generator: 'BufferGeometry.toJSON'
					}
				};
	
				// standard BufferGeometry serialization
	
				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) data.name = this.name;
	
				if ( this.parameters !== undefined ) {
	
					var parameters = this.parameters;
	
					for ( var key in parameters ) {
	
						if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
	
					}
	
					return data;
	
				}
	
				data.data = { attributes: {} };
	
				var index = this.index;
	
				if ( index !== null ) {
	
					var array = Array.prototype.slice.call( index.array );
	
					data.data.index = {
						type: index.array.constructor.name,
						array: array
					};
	
				}
	
				var attributes = this.attributes;
	
				for ( var key in attributes ) {
	
					var attribute = attributes[ key ];
	
					var array = Array.prototype.slice.call( attribute.array );
	
					data.data.attributes[ key ] = {
						itemSize: attribute.itemSize,
						type: attribute.array.constructor.name,
						array: array,
						normalized: attribute.normalized
					};
	
				}
	
				var groups = this.groups;
	
				if ( groups.length > 0 ) {
	
					data.data.groups = JSON.parse( JSON.stringify( groups ) );
	
				}
	
				var boundingSphere = this.boundingSphere;
	
				if ( boundingSphere !== null ) {
	
					data.data.boundingSphere = {
						center: boundingSphere.center.toArray(),
						radius: boundingSphere.radius
					};
	
				}
	
				return data;
	
			},
	
			clone: function () {
	
				/*
				 // Handle primitives
	
				 var parameters = this.parameters;
	
				 if ( parameters !== undefined ) {
	
				 var values = [];
	
				 for ( var key in parameters ) {
	
				 values.push( parameters[ key ] );
	
				 }
	
				 var geometry = Object.create( this.constructor.prototype );
				 this.constructor.apply( geometry, values );
				 return geometry;
	
				 }
	
				 return new this.constructor().copy( this );
				 */
	
				return new BufferGeometry().copy( this );
	
			},
	
			copy: function ( source ) {
	
				var name, i, l;
	
				// reset
	
				this.index = null;
				this.attributes = {};
				this.morphAttributes = {};
				this.groups = [];
				this.boundingBox = null;
				this.boundingSphere = null;
	
				// name
	
				this.name = source.name;
	
				// index
	
				var index = source.index;
	
				if ( index !== null ) {
	
					this.setIndex( index.clone() );
	
				}
	
				// attributes
	
				var attributes = source.attributes;
	
				for ( name in attributes ) {
	
					var attribute = attributes[ name ];
					this.addAttribute( name, attribute.clone() );
	
				}
	
				// morph attributes
	
				var morphAttributes = source.morphAttributes;
	
				for ( name in morphAttributes ) {
	
					var array = [];
					var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
	
					for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {
	
						array.push( morphAttribute[ i ].clone() );
	
					}
	
					this.morphAttributes[ name ] = array;
	
				}
	
				// groups
	
				var groups = source.groups;
	
				for ( i = 0, l = groups.length; i < l; i ++ ) {
	
					var group = groups[ i ];
					this.addGroup( group.start, group.count, group.materialIndex );
	
				}
	
				// bounding box
	
				var boundingBox = source.boundingBox;
	
				if ( boundingBox !== null ) {
	
					this.boundingBox = boundingBox.clone();
	
				}
	
				// bounding sphere
	
				var boundingSphere = source.boundingSphere;
	
				if ( boundingSphere !== null ) {
	
					this.boundingSphere = boundingSphere.clone();
	
				}
	
				// draw range
	
				this.drawRange.start = source.drawRange.start;
				this.drawRange.count = source.drawRange.count;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// BoxGeometry
	
		function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
	
			Geometry.call( this );
	
			this.type = 'BoxGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};
	
			this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
			this.mergeVertices();
	
		}
	
		BoxGeometry.prototype = Object.create( Geometry.prototype );
		BoxGeometry.prototype.constructor = BoxGeometry;
	
		// BoxBufferGeometry
	
		function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
	
			BufferGeometry.call( this );
	
			this.type = 'BoxBufferGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};
	
			var scope = this;
	
			width = width || 1;
			height = height || 1;
			depth = depth || 1;
	
			// segments
	
			widthSegments = Math.floor( widthSegments ) || 1;
			heightSegments = Math.floor( heightSegments ) || 1;
			depthSegments = Math.floor( depthSegments ) || 1;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var numberOfVertices = 0;
			var groupStart = 0;
	
			// build each side of the box geometry
	
			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
			buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
			buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
	
				var segmentWidth = width / gridX;
				var segmentHeight = height / gridY;
	
				var widthHalf = width / 2;
				var heightHalf = height / 2;
				var depthHalf = depth / 2;
	
				var gridX1 = gridX + 1;
				var gridY1 = gridY + 1;
	
				var vertexCounter = 0;
				var groupCount = 0;
	
				var ix, iy;
	
				var vector = new Vector3();
	
				// generate vertices, normals and uvs
	
				for ( iy = 0; iy < gridY1; iy ++ ) {
	
					var y = iy * segmentHeight - heightHalf;
	
					for ( ix = 0; ix < gridX1; ix ++ ) {
	
						var x = ix * segmentWidth - widthHalf;
	
						// set values to correct vector component
	
						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;
	
						// now apply vector to vertex buffer
	
						vertices.push( vector.x, vector.y, vector.z );
	
						// set values to correct vector component
	
						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;
	
						// now apply vector to normal buffer
	
						normals.push( vector.x, vector.y, vector.z );
	
						// uvs
	
						uvs.push( ix / gridX );
						uvs.push( 1 - ( iy / gridY ) );
	
						// counters
	
						vertexCounter += 1;
	
					}
	
				}
	
				// indices
	
				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment
	
				for ( iy = 0; iy < gridY; iy ++ ) {
	
					for ( ix = 0; ix < gridX; ix ++ ) {
	
						var a = numberOfVertices + ix + gridX1 * iy;
						var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
	
						// faces
	
						indices.push( a, b, d );
						indices.push( b, c, d );
	
						// increase counter
	
						groupCount += 6;
	
					}
	
				}
	
				// add a group to the geometry. this will ensure multi material support
	
				scope.addGroup( groupStart, groupCount, materialIndex );
	
				// calculate new start value for groups
	
				groupStart += groupCount;
	
				// update total number of vertices
	
				numberOfVertices += vertexCounter;
	
			}
	
		}
	
		BoxBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// PlaneGeometry
	
		function PlaneGeometry( width, height, widthSegments, heightSegments ) {
	
			Geometry.call( this );
	
			this.type = 'PlaneGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
	
			this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
			this.mergeVertices();
	
		}
	
		PlaneGeometry.prototype = Object.create( Geometry.prototype );
		PlaneGeometry.prototype.constructor = PlaneGeometry;
	
		// PlaneBufferGeometry
	
		function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {
	
			BufferGeometry.call( this );
	
			this.type = 'PlaneBufferGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
	
			width = width || 1;
			height = height || 1;
	
			var width_half = width / 2;
			var height_half = height / 2;
	
			var gridX = Math.floor( widthSegments ) || 1;
			var gridY = Math.floor( heightSegments ) || 1;
	
			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;
	
			var segment_width = width / gridX;
			var segment_height = height / gridY;
	
			var ix, iy;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// generate vertices, normals and uvs
	
			for ( iy = 0; iy < gridY1; iy ++ ) {
	
				var y = iy * segment_height - height_half;
	
				for ( ix = 0; ix < gridX1; ix ++ ) {
	
					var x = ix * segment_width - width_half;
	
					vertices.push( x, - y, 0 );
	
					normals.push( 0, 0, 1 );
	
					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );
	
				}
	
			}
	
			// indices
	
			for ( iy = 0; iy < gridY; iy ++ ) {
	
				for ( ix = 0; ix < gridX; ix ++ ) {
	
					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  depthTest: <bool>,
		 *  depthWrite: <bool>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>
		 * }
		 */
	
		function MeshBasicMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshBasicMaterial';
	
			this.color = new Color( 0xffffff ); // emissive
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		MeshBasicMaterial.prototype = Object.create( Material.prototype );
		MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
	
		MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
	
		MeshBasicMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  defines: { "label" : "value" },
		 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
		 *
		 *  fragmentShader: <string>,
		 *  vertexShader: <string>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  lights: <bool>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function ShaderMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'ShaderMaterial';
	
			this.defines = {};
			this.uniforms = {};
	
			this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
			this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';
	
			this.linewidth = 1;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false; // set to use scene fog
			this.lights = false; // set to use scene lights
			this.clipping = false; // set to use user-defined clipping planes
	
			this.skinning = false; // set to use skinning attribute streams
			this.morphTargets = false; // set to use morph targets
			this.morphNormals = false; // set to use morph normals
	
			this.extensions = {
				derivatives: false, // set to use derivatives
				fragDepth: false, // set to use fragment depth values
				drawBuffers: false, // set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD
			};
	
			// When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.
			this.defaultAttributeValues = {
				'color': [ 1, 1, 1 ],
				'uv': [ 0, 0 ],
				'uv2': [ 0, 0 ]
			};
	
			this.index0AttributeName = undefined;
	
			if ( parameters !== undefined ) {
	
				if ( parameters.attributes !== undefined ) {
	
					console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );
	
				}
	
				this.setValues( parameters );
	
			}
	
		}
	
		ShaderMaterial.prototype = Object.create( Material.prototype );
		ShaderMaterial.prototype.constructor = ShaderMaterial;
	
		ShaderMaterial.prototype.isShaderMaterial = true;
	
		ShaderMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;
	
			this.uniforms = UniformsUtils.clone( source.uniforms );
	
			this.defines = source.defines;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			this.lights = source.lights;
			this.clipping = source.clipping;
	
			this.skinning = source.skinning;
	
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			this.extensions = source.extensions;
	
			return this;
	
		};
	
		ShaderMaterial.prototype.toJSON = function ( meta ) {
	
			var data = Material.prototype.toJSON.call( this, meta );
	
			data.uniforms = this.uniforms;
			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;
	
			return data;
	
		};
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Ray( origin, direction ) {
	
			this.origin = ( origin !== undefined ) ? origin : new Vector3();
			this.direction = ( direction !== undefined ) ? direction : new Vector3();
	
		}
	
		Object.assign( Ray.prototype, {
	
			set: function ( origin, direction ) {
	
				this.origin.copy( origin );
				this.direction.copy( direction );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( ray ) {
	
				this.origin.copy( ray.origin );
				this.direction.copy( ray.direction );
	
				return this;
	
			},
	
			at: function ( t, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );
	
			},
	
			lookAt: function ( v ) {
	
				this.direction.copy( v ).sub( this.origin ).normalize();
	
				return this;
	
			},
	
			recast: function () {
	
				var v1 = new Vector3();
	
				return function recast( t ) {
	
					this.origin.copy( this.at( t, v1 ) );
	
					return this;
	
				};
	
			}(),
	
			closestPointToPoint: function ( point, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				result.subVectors( point, this.origin );
				var directionDistance = result.dot( this.direction );
	
				if ( directionDistance < 0 ) {
	
					return result.copy( this.origin );
	
				}
	
				return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
			},
	
			distanceToPoint: function ( point ) {
	
				return Math.sqrt( this.distanceSqToPoint( point ) );
	
			},
	
			distanceSqToPoint: function () {
	
				var v1 = new Vector3();
	
				return function distanceSqToPoint( point ) {
	
					var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );
	
					// point behind the ray
	
					if ( directionDistance < 0 ) {
	
						return this.origin.distanceToSquared( point );
	
					}
	
					v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
					return v1.distanceToSquared( point );
	
				};
	
			}(),
	
			distanceSqToSegment: function () {
	
				var segCenter = new Vector3();
				var segDir = new Vector3();
				var diff = new Vector3();
	
				return function distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
	
					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
					// It returns the min distance between the ray and the segment
					// defined by v0 and v1
					// It can also set two optional targets :
					// - The closest point on the ray
					// - The closest point on the segment
	
					segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
					segDir.copy( v1 ).sub( v0 ).normalize();
					diff.copy( this.origin ).sub( segCenter );
	
					var segExtent = v0.distanceTo( v1 ) * 0.5;
					var a01 = - this.direction.dot( segDir );
					var b0 = diff.dot( this.direction );
					var b1 = - diff.dot( segDir );
					var c = diff.lengthSq();
					var det = Math.abs( 1 - a01 * a01 );
					var s0, s1, sqrDist, extDet;
	
					if ( det > 0 ) {
	
						// The ray and segment are not parallel.
	
						s0 = a01 * b1 - b0;
						s1 = a01 * b0 - b1;
						extDet = segExtent * det;
	
						if ( s0 >= 0 ) {
	
							if ( s1 >= - extDet ) {
	
								if ( s1 <= extDet ) {
	
									// region 0
									// Minimum at interior points of ray and segment.
	
									var invDet = 1 / det;
									s0 *= invDet;
									s1 *= invDet;
									sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
	
								} else {
	
									// region 1
	
									s1 = segExtent;
									s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
									sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
								}
	
							} else {
	
								// region 5
	
								s1 = - segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							}
	
						} else {
	
							if ( s1 <= - extDet ) {
	
								// region 4
	
								s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							} else if ( s1 <= extDet ) {
	
								// region 3
	
								s0 = 0;
								s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = s1 * ( s1 + 2 * b1 ) + c;
	
							} else {
	
								// region 2
	
								s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
								s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							}
	
						}
	
					} else {
	
						// Ray and segment are parallel.
	
						s1 = ( a01 > 0 ) ? - segExtent : segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
					}
	
					if ( optionalPointOnRay ) {
	
						optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
	
					}
	
					if ( optionalPointOnSegment ) {
	
						optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );
	
					}
	
					return sqrDist;
	
				};
	
			}(),
	
			intersectSphere: function () {
	
				var v1 = new Vector3();
	
				return function intersectSphere( sphere, optionalTarget ) {
	
					v1.subVectors( sphere.center, this.origin );
					var tca = v1.dot( this.direction );
					var d2 = v1.dot( v1 ) - tca * tca;
					var radius2 = sphere.radius * sphere.radius;
	
					if ( d2 > radius2 ) return null;
	
					var thc = Math.sqrt( radius2 - d2 );
	
					// t0 = first intersect point - entrance on front of sphere
					var t0 = tca - thc;
	
					// t1 = second intersect point - exit point on back of sphere
					var t1 = tca + thc;
	
					// test to see if both t0 and t1 are behind the ray - if so, return null
					if ( t0 < 0 && t1 < 0 ) return null;
	
					// test to see if t0 is behind the ray:
					// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
					// in order to always return an intersect point that is in front of the ray.
					if ( t0 < 0 ) return this.at( t1, optionalTarget );
	
					// else t0 is in front of the ray, so return the first collision point scaled by t0
					return this.at( t0, optionalTarget );
	
				};
	
			}(),
	
			intersectsSphere: function ( sphere ) {
	
				return this.distanceToPoint( sphere.center ) <= sphere.radius;
	
			},
	
			distanceToPlane: function ( plane ) {
	
				var denominator = plane.normal.dot( this.direction );
	
				if ( denominator === 0 ) {
	
					// line is coplanar, return origin
					if ( plane.distanceToPoint( this.origin ) === 0 ) {
	
						return 0;
	
					}
	
					// Null is preferable to undefined since undefined means.... it is undefined
	
					return null;
	
				}
	
				var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
	
				// Return if the ray never intersects the plane
	
				return t >= 0 ? t : null;
	
			},
	
			intersectPlane: function ( plane, optionalTarget ) {
	
				var t = this.distanceToPlane( plane );
	
				if ( t === null ) {
	
					return null;
	
				}
	
				return this.at( t, optionalTarget );
	
			},
	
			intersectsPlane: function ( plane ) {
	
				// check if the ray lies on the plane first
	
				var distToPoint = plane.distanceToPoint( this.origin );
	
				if ( distToPoint === 0 ) {
	
					return true;
	
				}
	
				var denominator = plane.normal.dot( this.direction );
	
				if ( denominator * distToPoint < 0 ) {
	
					return true;
	
				}
	
				// ray origin is behind the plane (and is pointing behind it)
	
				return false;
	
			},
	
			intersectBox: function ( box, optionalTarget ) {
	
				var tmin, tmax, tymin, tymax, tzmin, tzmax;
	
				var invdirx = 1 / this.direction.x,
					invdiry = 1 / this.direction.y,
					invdirz = 1 / this.direction.z;
	
				var origin = this.origin;
	
				if ( invdirx >= 0 ) {
	
					tmin = ( box.min.x - origin.x ) * invdirx;
					tmax = ( box.max.x - origin.x ) * invdirx;
	
				} else {
	
					tmin = ( box.max.x - origin.x ) * invdirx;
					tmax = ( box.min.x - origin.x ) * invdirx;
	
				}
	
				if ( invdiry >= 0 ) {
	
					tymin = ( box.min.y - origin.y ) * invdiry;
					tymax = ( box.max.y - origin.y ) * invdiry;
	
				} else {
	
					tymin = ( box.max.y - origin.y ) * invdiry;
					tymax = ( box.min.y - origin.y ) * invdiry;
	
				}
	
				if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
	
				// These lines also handle the case where tmin or tmax is NaN
				// (result of 0 * Infinity). x !== x returns true if x is NaN
	
				if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
	
				if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
	
				if ( invdirz >= 0 ) {
	
					tzmin = ( box.min.z - origin.z ) * invdirz;
					tzmax = ( box.max.z - origin.z ) * invdirz;
	
				} else {
	
					tzmin = ( box.max.z - origin.z ) * invdirz;
					tzmax = ( box.min.z - origin.z ) * invdirz;
	
				}
	
				if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
	
				if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
	
				if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
	
				//return point closest to the ray (positive side)
	
				if ( tmax < 0 ) return null;
	
				return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );
	
			},
	
			intersectsBox: ( function () {
	
				var v = new Vector3();
	
				return function intersectsBox( box ) {
	
					return this.intersectBox( box, v ) !== null;
	
				};
	
			} )(),
	
			intersectTriangle: function () {
	
				// Compute the offset origin, edges, and normal.
				var diff = new Vector3();
				var edge1 = new Vector3();
				var edge2 = new Vector3();
				var normal = new Vector3();
	
				return function intersectTriangle( a, b, c, backfaceCulling, optionalTarget ) {
	
					// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
	
					edge1.subVectors( b, a );
					edge2.subVectors( c, a );
					normal.crossVectors( edge1, edge2 );
	
					// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
					// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
					//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
					//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
					//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
					var DdN = this.direction.dot( normal );
					var sign;
	
					if ( DdN > 0 ) {
	
						if ( backfaceCulling ) return null;
						sign = 1;
	
					} else if ( DdN < 0 ) {
	
						sign = - 1;
						DdN = - DdN;
	
					} else {
	
						return null;
	
					}
	
					diff.subVectors( this.origin, a );
					var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );
	
					// b1 < 0, no intersection
					if ( DdQxE2 < 0 ) {
	
						return null;
	
					}
	
					var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );
	
					// b2 < 0, no intersection
					if ( DdE1xQ < 0 ) {
	
						return null;
	
					}
	
					// b1+b2 > 1, no intersection
					if ( DdQxE2 + DdE1xQ > DdN ) {
	
						return null;
	
					}
	
					// Line intersects triangle, check if ray does.
					var QdN = - sign * diff.dot( normal );
	
					// t < 0, no intersection
					if ( QdN < 0 ) {
	
						return null;
	
					}
	
					// Ray intersects triangle.
					return this.at( QdN / DdN, optionalTarget );
	
				};
	
			}(),
	
			applyMatrix4: function ( matrix4 ) {
	
				this.origin.applyMatrix4( matrix4 );
				this.direction.transformDirection( matrix4 );
	
				return this;
	
			},
	
			equals: function ( ray ) {
	
				return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Line3( start, end ) {
	
			this.start = ( start !== undefined ) ? start : new Vector3();
			this.end = ( end !== undefined ) ? end : new Vector3();
	
		}
	
		Object.assign( Line3.prototype, {
	
			set: function ( start, end ) {
	
				this.start.copy( start );
				this.end.copy( end );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( line ) {
	
				this.start.copy( line.start );
				this.end.copy( line.end );
	
				return this;
	
			},
	
			getCenter: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
	
			},
	
			delta: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.subVectors( this.end, this.start );
	
			},
	
			distanceSq: function () {
	
				return this.start.distanceToSquared( this.end );
	
			},
	
			distance: function () {
	
				return this.start.distanceTo( this.end );
	
			},
	
			at: function ( t, optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
	
				return this.delta( result ).multiplyScalar( t ).add( this.start );
	
			},
	
			closestPointToPointParameter: function () {
	
				var startP = new Vector3();
				var startEnd = new Vector3();
	
				return function closestPointToPointParameter( point, clampToLine ) {
	
					startP.subVectors( point, this.start );
					startEnd.subVectors( this.end, this.start );
	
					var startEnd2 = startEnd.dot( startEnd );
					var startEnd_startP = startEnd.dot( startP );
	
					var t = startEnd_startP / startEnd2;
	
					if ( clampToLine ) {
	
						t = _Math.clamp( t, 0, 1 );
	
					}
	
					return t;
	
				};
	
			}(),
	
			closestPointToPoint: function ( point, clampToLine, optionalTarget ) {
	
				var t = this.closestPointToPointParameter( point, clampToLine );
	
				var result = optionalTarget || new Vector3();
	
				return this.delta( result ).multiplyScalar( t ).add( this.start );
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				this.start.applyMatrix4( matrix );
				this.end.applyMatrix4( matrix );
	
				return this;
	
			},
	
			equals: function ( line ) {
	
				return line.start.equals( this.start ) && line.end.equals( this.end );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Triangle( a, b, c ) {
	
			this.a = ( a !== undefined ) ? a : new Vector3();
			this.b = ( b !== undefined ) ? b : new Vector3();
			this.c = ( c !== undefined ) ? c : new Vector3();
	
		}
	
		Object.assign( Triangle, {
	
			normal: function () {
	
				var v0 = new Vector3();
	
				return function normal( a, b, c, optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
	
					result.subVectors( c, b );
					v0.subVectors( a, b );
					result.cross( v0 );
	
					var resultLengthSq = result.lengthSq();
					if ( resultLengthSq > 0 ) {
	
						return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );
	
					}
	
					return result.set( 0, 0, 0 );
	
				};
	
			}(),
	
			// static/instance method to calculate barycentric coordinates
			// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
			barycoordFromPoint: function () {
	
				var v0 = new Vector3();
				var v1 = new Vector3();
				var v2 = new Vector3();
	
				return function barycoordFromPoint( point, a, b, c, optionalTarget ) {
	
					v0.subVectors( c, a );
					v1.subVectors( b, a );
					v2.subVectors( point, a );
	
					var dot00 = v0.dot( v0 );
					var dot01 = v0.dot( v1 );
					var dot02 = v0.dot( v2 );
					var dot11 = v1.dot( v1 );
					var dot12 = v1.dot( v2 );
	
					var denom = ( dot00 * dot11 - dot01 * dot01 );
	
					var result = optionalTarget || new Vector3();
	
					// collinear or singular triangle
					if ( denom === 0 ) {
	
						// arbitrary location outside of triangle?
						// not sure if this is the best idea, maybe should be returning undefined
						return result.set( - 2, - 1, - 1 );
	
					}
	
					var invDenom = 1 / denom;
					var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
					var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
	
					// barycentric coordinates must always sum to 1
					return result.set( 1 - u - v, v, u );
	
				};
	
			}(),
	
			containsPoint: function () {
	
				var v1 = new Vector3();
	
				return function containsPoint( point, a, b, c ) {
	
					var result = Triangle.barycoordFromPoint( point, a, b, c, v1 );
	
					return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );
	
				};
	
			}()
	
		} );
	
		Object.assign( Triangle.prototype, {
	
			set: function ( a, b, c ) {
	
				this.a.copy( a );
				this.b.copy( b );
				this.c.copy( c );
	
				return this;
	
			},
	
			setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
	
				this.a.copy( points[ i0 ] );
				this.b.copy( points[ i1 ] );
				this.c.copy( points[ i2 ] );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( triangle ) {
	
				this.a.copy( triangle.a );
				this.b.copy( triangle.b );
				this.c.copy( triangle.c );
	
				return this;
	
			},
	
			area: function () {
	
				var v0 = new Vector3();
				var v1 = new Vector3();
	
				return function area() {
	
					v0.subVectors( this.c, this.b );
					v1.subVectors( this.a, this.b );
	
					return v0.cross( v1 ).length() * 0.5;
	
				};
	
			}(),
	
			midpoint: function ( optionalTarget ) {
	
				var result = optionalTarget || new Vector3();
				return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
	
			},
	
			normal: function ( optionalTarget ) {
	
				return Triangle.normal( this.a, this.b, this.c, optionalTarget );
	
			},
	
			plane: function ( optionalTarget ) {
	
				var result = optionalTarget || new Plane();
	
				return result.setFromCoplanarPoints( this.a, this.b, this.c );
	
			},
	
			barycoordFromPoint: function ( point, optionalTarget ) {
	
				return Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );
	
			},
	
			containsPoint: function ( point ) {
	
				return Triangle.containsPoint( point, this.a, this.b, this.c );
	
			},
	
			closestPointToPoint: function () {
	
				var plane = new Plane();
				var edgeList = [ new Line3(), new Line3(), new Line3() ];
				var projectedPoint = new Vector3();
				var closestPoint = new Vector3();
	
				return function closestPointToPoint( point, optionalTarget ) {
	
					var result = optionalTarget || new Vector3();
					var minDistance = Infinity;
	
					// project the point onto the plane of the triangle
	
					plane.setFromCoplanarPoints( this.a, this.b, this.c );
					plane.projectPoint( point, projectedPoint );
	
					// check if the projection lies within the triangle
	
					if ( this.containsPoint( projectedPoint ) === true ) {
	
						// if so, this is the closest point
	
						result.copy( projectedPoint );
	
					} else {
	
						// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices
	
						edgeList[ 0 ].set( this.a, this.b );
						edgeList[ 1 ].set( this.b, this.c );
						edgeList[ 2 ].set( this.c, this.a );
	
						for ( var i = 0; i < edgeList.length; i ++ ) {
	
							edgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );
	
							var distance = projectedPoint.distanceToSquared( closestPoint );
	
							if ( distance < minDistance ) {
	
								minDistance = distance;
	
								result.copy( closestPoint );
	
							}
	
						}
	
					}
	
					return result;
	
				};
	
			}(),
	
			equals: function ( triangle ) {
	
				return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author jonobr1 / http://jonobr1.com/
		 */
	
		function Mesh( geometry, material ) {
	
			Object3D.call( this );
	
			this.type = 'Mesh';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );
	
			this.drawMode = TrianglesDrawMode;
	
			this.updateMorphTargets();
	
		}
	
		Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Mesh,
	
			isMesh: true,
	
			setDrawMode: function ( value ) {
	
				this.drawMode = value;
	
			},
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.drawMode = source.drawMode;
	
				if ( source.morphTargetInfluences !== undefined ) {
	
					this.morphTargetInfluences = source.morphTargetInfluences.slice();
	
				}
	
				if ( source.morphTargetDictionary !== undefined ) {
	
					this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );
	
				}
	
				return this;
	
			},
	
			updateMorphTargets: function () {
	
				var geometry = this.geometry;
				var m, ml, name;
	
				if ( geometry.isBufferGeometry ) {
	
					var morphAttributes = geometry.morphAttributes;
					var keys = Object.keys( morphAttributes );
	
					if ( keys.length > 0 ) {
	
						var morphAttribute = morphAttributes[ keys[ 0 ] ];
	
						if ( morphAttribute !== undefined ) {
	
							this.morphTargetInfluences = [];
							this.morphTargetDictionary = {};
	
							for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
	
								name = morphAttribute[ m ].name || String( m );
	
								this.morphTargetInfluences.push( 0 );
								this.morphTargetDictionary[ name ] = m;
	
							}
	
						}
	
					}
	
				} else {
	
					var morphTargets = geometry.morphTargets;
	
					if ( morphTargets !== undefined && morphTargets.length > 0 ) {
	
						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};
	
						for ( m = 0, ml = morphTargets.length; m < ml; m ++ ) {
	
							name = morphTargets[ m ].name || String( m );
	
							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;
	
						}
	
					}
	
				}
	
			},
	
			raycast: ( function () {
	
				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();
	
				var vA = new Vector3();
				var vB = new Vector3();
				var vC = new Vector3();
	
				var tempA = new Vector3();
				var tempB = new Vector3();
				var tempC = new Vector3();
	
				var uvA = new Vector2();
				var uvB = new Vector2();
				var uvC = new Vector2();
	
				var barycoord = new Vector3();
	
				var intersectionPoint = new Vector3();
				var intersectionPointWorld = new Vector3();
	
				function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {
	
					Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );
	
					uv1.multiplyScalar( barycoord.x );
					uv2.multiplyScalar( barycoord.y );
					uv3.multiplyScalar( barycoord.z );
	
					uv1.add( uv2 ).add( uv3 );
	
					return uv1.clone();
	
				}
	
				function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {
	
					var intersect;
	
					if ( material.side === BackSide ) {
	
						intersect = ray.intersectTriangle( pC, pB, pA, true, point );
	
					} else {
	
						intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
	
					}
	
					if ( intersect === null ) return null;
	
					intersectionPointWorld.copy( point );
					intersectionPointWorld.applyMatrix4( object.matrixWorld );
	
					var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );
	
					if ( distance < raycaster.near || distance > raycaster.far ) return null;
	
					return {
						distance: distance,
						point: intersectionPointWorld.clone(),
						object: object
					};
	
				}
	
				function checkBufferGeometryIntersection( object, raycaster, ray, position, uv, a, b, c ) {
	
					vA.fromBufferAttribute( position, a );
					vB.fromBufferAttribute( position, b );
					vC.fromBufferAttribute( position, c );
	
					var intersection = checkIntersection( object, object.material, raycaster, ray, vA, vB, vC, intersectionPoint );
	
					if ( intersection ) {
	
						if ( uv ) {
	
							uvA.fromBufferAttribute( uv, a );
							uvB.fromBufferAttribute( uv, b );
							uvC.fromBufferAttribute( uv, c );
	
							intersection.uv = uvIntersection( intersectionPoint, vA, vB, vC, uvA, uvB, uvC );
	
						}
	
						intersection.face = new Face3( a, b, c, Triangle.normal( vA, vB, vC ) );
						intersection.faceIndex = a;
	
					}
	
					return intersection;
	
				}
	
				return function raycast( raycaster, intersects ) {
	
					var geometry = this.geometry;
					var material = this.material;
					var matrixWorld = this.matrixWorld;
	
					if ( material === undefined ) return;
	
					// Checking boundingSphere distance to ray
	
					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );
	
					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
	
					//
	
					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
					// Check boundingBox before continuing
	
					if ( geometry.boundingBox !== null ) {
	
						if ( ray.intersectsBox( geometry.boundingBox ) === false ) return;
	
					}
	
					var intersection;
	
					if ( geometry.isBufferGeometry ) {
	
						var a, b, c;
						var index = geometry.index;
						var position = geometry.attributes.position;
						var uv = geometry.attributes.uv;
						var i, l;
	
						if ( index !== null ) {
	
							// indexed buffer geometry
	
							for ( i = 0, l = index.count; i < l; i += 3 ) {
	
								a = index.getX( i );
								b = index.getX( i + 1 );
								c = index.getX( i + 2 );
	
								intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );
	
								if ( intersection ) {
	
									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
									intersects.push( intersection );
	
								}
	
							}
	
						} else if ( position !== undefined ) {
	
							// non-indexed buffer geometry
	
							for ( i = 0, l = position.count; i < l; i += 3 ) {
	
								a = i;
								b = i + 1;
								c = i + 2;
	
								intersection = checkBufferGeometryIntersection( this, raycaster, ray, position, uv, a, b, c );
	
								if ( intersection ) {
	
									intersection.index = a; // triangle number in positions buffer semantics
									intersects.push( intersection );
	
								}
	
							}
	
						}
	
					} else if ( geometry.isGeometry ) {
	
						var fvA, fvB, fvC;
						var isMultiMaterial = Array.isArray( material );
	
						var vertices = geometry.vertices;
						var faces = geometry.faces;
						var uvs;
	
						var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
						if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;
	
						for ( var f = 0, fl = faces.length; f < fl; f ++ ) {
	
							var face = faces[ f ];
							var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;
	
							if ( faceMaterial === undefined ) continue;
	
							fvA = vertices[ face.a ];
							fvB = vertices[ face.b ];
							fvC = vertices[ face.c ];
	
							if ( faceMaterial.morphTargets === true ) {
	
								var morphTargets = geometry.morphTargets;
								var morphInfluences = this.morphTargetInfluences;
	
								vA.set( 0, 0, 0 );
								vB.set( 0, 0, 0 );
								vC.set( 0, 0, 0 );
	
								for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {
	
									var influence = morphInfluences[ t ];
	
									if ( influence === 0 ) continue;
	
									var targets = morphTargets[ t ].vertices;
	
									vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
									vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
									vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );
	
								}
	
								vA.add( fvA );
								vB.add( fvB );
								vC.add( fvC );
	
								fvA = vA;
								fvB = vB;
								fvC = vC;
	
							}
	
							intersection = checkIntersection( this, faceMaterial, raycaster, ray, fvA, fvB, fvC, intersectionPoint );
	
							if ( intersection ) {
	
								if ( uvs && uvs[ f ] ) {
	
									var uvs_f = uvs[ f ];
									uvA.copy( uvs_f[ 0 ] );
									uvB.copy( uvs_f[ 1 ] );
									uvC.copy( uvs_f[ 2 ] );
	
									intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );
	
								}
	
								intersection.face = face;
								intersection.faceIndex = f;
								intersects.push( intersection );
	
							}
	
						}
	
					}
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLBackground( renderer, state, geometries, premultipliedAlpha ) {
	
			var clearColor = new Color( 0x000000 );
			var clearAlpha = 0;
	
			var planeCamera, planeMesh;
			var boxMesh;
	
			function render( renderList, scene, camera, forceClear ) {
	
				var background = scene.background;
	
				if ( background === null ) {
	
					setClear( clearColor, clearAlpha );
	
				} else if ( background && background.isColor ) {
	
					setClear( background, 1 );
					forceClear = true;
	
				}
	
				if ( renderer.autoClear || forceClear ) {
	
					renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
	
				}
	
				if ( background && background.isCubeTexture ) {
	
					if ( boxMesh === undefined ) {
	
						boxMesh = new Mesh(
							new BoxBufferGeometry( 1, 1, 1 ),
							new ShaderMaterial( {
								uniforms: ShaderLib.cube.uniforms,
								vertexShader: ShaderLib.cube.vertexShader,
								fragmentShader: ShaderLib.cube.fragmentShader,
								side: BackSide,
								depthTest: true,
								depthWrite: false,
								fog: false
							} )
						);
	
						boxMesh.geometry.removeAttribute( 'normal' );
						boxMesh.geometry.removeAttribute( 'uv' );
	
						boxMesh.onBeforeRender = function ( renderer, scene, camera ) {
	
							this.matrixWorld.copyPosition( camera.matrixWorld );
	
						};
	
						geometries.update( boxMesh.geometry );
	
					}
	
					boxMesh.material.uniforms.tCube.value = background;
	
					renderList.push( boxMesh, boxMesh.geometry, boxMesh.material, 0, null );
	
				} else if ( background && background.isTexture ) {
	
					if ( planeCamera === undefined ) {
	
						planeCamera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );
	
						planeMesh = new Mesh(
							new PlaneBufferGeometry( 2, 2 ),
							new MeshBasicMaterial( { depthTest: false, depthWrite: false, fog: false } )
						);
	
						geometries.update( planeMesh.geometry );
	
					}
	
					planeMesh.material.map = background;
	
					// TODO Push this to renderList
	
					renderer.renderBufferDirect( planeCamera, null, planeMesh.geometry, planeMesh.material, planeMesh, null );
	
				}
	
			}
	
			function setClear( color, alpha ) {
	
				state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );
	
			}
	
			return {
	
				getClearColor: function () {
	
					return clearColor;
	
				},
				setClearColor: function ( color, alpha ) {
	
					clearColor.set( color );
					clearAlpha = alpha !== undefined ? alpha : 1;
					setClear( clearColor, clearAlpha );
	
				},
				getClearAlpha: function () {
	
					return clearAlpha;
	
				},
				setClearAlpha: function ( alpha ) {
	
					clearAlpha = alpha;
					setClear( clearColor, clearAlpha );
	
				},
				render: render
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function painterSortStable( a, b ) {
	
			if ( a.renderOrder !== b.renderOrder ) {
	
				return a.renderOrder - b.renderOrder;
	
			} else if ( a.program && b.program && a.program !== b.program ) {
	
				return a.program.id - b.program.id;
	
			} else if ( a.material.id !== b.material.id ) {
	
				return a.material.id - b.material.id;
	
			} else if ( a.z !== b.z ) {
	
				return a.z - b.z;
	
			} else {
	
				return a.id - b.id;
	
			}
	
		}
	
		function reversePainterSortStable( a, b ) {
	
			if ( a.renderOrder !== b.renderOrder ) {
	
				return a.renderOrder - b.renderOrder;
	
			} if ( a.z !== b.z ) {
	
				return b.z - a.z;
	
			} else {
	
				return a.id - b.id;
	
			}
	
		}
	
		function WebGLRenderList() {
	
			var renderItems = [];
			var renderItemsIndex = 0;
	
			var opaque = [];
			var transparent = [];
	
			function init() {
	
				renderItemsIndex = 0;
	
				opaque.length = 0;
				transparent.length = 0;
	
			}
	
			function push( object, geometry, material, z, group ) {
	
				var renderItem = renderItems[ renderItemsIndex ];
	
				if ( renderItem === undefined ) {
	
					renderItem = {
						id: object.id,
						object: object,
						geometry: geometry,
						material: material,
						program: material.program,
						renderOrder: object.renderOrder,
						z: z,
						group: group
					};
	
					renderItems[ renderItemsIndex ] = renderItem;
	
				} else {
	
					renderItem.id = object.id;
					renderItem.object = object;
					renderItem.geometry = geometry;
					renderItem.material = material;
					renderItem.program = material.program;
					renderItem.renderOrder = object.renderOrder;
					renderItem.z = z;
					renderItem.group = group;
	
				}
	
				( material.transparent === true ? transparent : opaque ).push( renderItem );
	
				renderItemsIndex ++;
	
			}
	
			function sort() {
	
				if ( opaque.length > 1 ) opaque.sort( painterSortStable );
				if ( transparent.length > 1 ) transparent.sort( reversePainterSortStable );
	
			}
	
			return {
				opaque: opaque,
				transparent: transparent,
	
				init: init,
				push: push,
	
				sort: sort
			};
	
		}
	
		function WebGLRenderLists() {
	
			var lists = {};
	
			function get( scene, camera ) {
	
				var hash = scene.id + ',' + camera.id;
				var list = lists[ hash ];
	
				if ( list === undefined ) {
	
					// console.log( 'THREE.WebGLRenderLists:', hash );
	
					list = new WebGLRenderList();
					lists[ hash ] = list;
	
				}
	
				return list;
	
			}
	
			function dispose() {
	
				lists = {};
	
			}
	
			return {
				get: get,
				dispose: dispose
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function absNumericalSort( a, b ) {
	
			return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );
	
		}
	
		function WebGLMorphtargets( gl ) {
	
			var influencesList = {};
			var morphInfluences = new Float32Array( 8 );
	
			function update( object, geometry, material, program ) {
	
				var objectInfluences = object.morphTargetInfluences;
	
				var length = objectInfluences.length;
	
				var influences = influencesList[ geometry.id ];
	
				if ( influences === undefined ) {
	
					// initialise list
	
					influences = [];
	
					for ( var i = 0; i < length; i ++ ) {
	
						influences[ i ] = [ i, 0 ];
	
					}
	
					influencesList[ geometry.id ] = influences;
	
				}
	
				var morphTargets = material.morphTargets && geometry.morphAttributes.position;
				var morphNormals = material.morphNormals && geometry.morphAttributes.normal;
	
				// Remove current morphAttributes
	
				for ( var i = 0; i < length; i ++ ) {
	
					var influence = influences[ i ];
	
					if ( influence[ 1 ] !== 0 ) {
	
						if ( morphTargets ) geometry.removeAttribute( 'morphTarget' + i );
						if ( morphNormals ) geometry.removeAttribute( 'morphNormal' + i );
	
					}
	
				}
	
				// Collect influences
	
				for ( var i = 0; i < length; i ++ ) {
	
					var influence = influences[ i ];
	
					influence[ 0 ] = i;
					influence[ 1 ] = objectInfluences[ i ];
	
				}
	
				influences.sort( absNumericalSort );
	
				// Add morphAttributes
	
				for ( var i = 0; i < 8; i ++ ) {
	
					var influence = influences[ i ];
	
					if ( influence ) {
	
						var index = influence[ 0 ];
						var value = influence[ 1 ];
	
						if ( value ) {
	
							if ( morphTargets ) geometry.addAttribute( 'morphTarget' + i, morphTargets[ index ] );
							if ( morphNormals ) geometry.addAttribute( 'morphNormal' + i, morphNormals[ index ] );
	
							morphInfluences[ i ] = value;
							continue;
	
						}
	
					}
	
					morphInfluences[ i ] = 0;
	
				}
	
				program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );
	
			}
	
			return {
	
				update: update
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLIndexedBufferRenderer( gl, extensions, infoRender ) {
	
			var mode;
	
			function setMode( value ) {
	
				mode = value;
	
			}
	
			var type, bytesPerElement;
	
			function setIndex( value ) {
	
				type = value.type;
				bytesPerElement = value.bytesPerElement;
	
			}
	
			function render( start, count ) {
	
				gl.drawElements( mode, count, type, start * bytesPerElement );
	
				infoRender.calls ++;
				infoRender.vertices += count;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
				else if ( mode === gl.POINTS ) infoRender.points += count;
	
			}
	
			function renderInstances( geometry, start, count ) {
	
				var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
				if ( extension === null ) {
	
					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
	
				}
	
				extension.drawElementsInstancedANGLE( mode, count, type, start * bytesPerElement, geometry.maxInstancedCount );
	
				infoRender.calls ++;
				infoRender.vertices += count * geometry.maxInstancedCount;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
				else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;
	
			}
	
			//
	
			this.setMode = setMode;
			this.setIndex = setIndex;
			this.render = render;
			this.renderInstances = renderInstances;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLBufferRenderer( gl, extensions, infoRender ) {
	
			var mode;
	
			function setMode( value ) {
	
				mode = value;
	
			}
	
			function render( start, count ) {
	
				gl.drawArrays( mode, start, count );
	
				infoRender.calls ++;
				infoRender.vertices += count;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += count / 3;
				else if ( mode === gl.POINTS ) infoRender.points += count;
	
			}
	
			function renderInstances( geometry, start, count ) {
	
				var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
				if ( extension === null ) {
	
					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
	
				}
	
				var position = geometry.attributes.position;
	
				if ( position.isInterleavedBufferAttribute ) {
	
					count = position.data.count;
	
					extension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );
	
				} else {
	
					extension.drawArraysInstancedANGLE( mode, start, count, geometry.maxInstancedCount );
	
				}
	
				infoRender.calls ++;
				infoRender.vertices += count * geometry.maxInstancedCount;
	
				if ( mode === gl.TRIANGLES ) infoRender.faces += geometry.maxInstancedCount * count / 3;
				else if ( mode === gl.POINTS ) infoRender.points += geometry.maxInstancedCount * count;
	
			}
	
			//
	
			this.setMode = setMode;
			this.render = render;
			this.renderInstances = renderInstances;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLGeometries( gl, attributes, infoMemory ) {
	
			var geometries = {};
			var wireframeAttributes = {};
	
			function onGeometryDispose( event ) {
	
				var geometry = event.target;
				var buffergeometry = geometries[ geometry.id ];
	
				if ( buffergeometry.index !== null ) {
	
					attributes.remove( buffergeometry.index );
	
				}
	
				for ( var name in buffergeometry.attributes ) {
	
					attributes.remove( buffergeometry.attributes[ name ] );
	
				}
	
				geometry.removeEventListener( 'dispose', onGeometryDispose );
	
				delete geometries[ geometry.id ];
	
				// TODO Remove duplicate code
	
				var attribute = wireframeAttributes[ geometry.id ];
	
				if ( attribute ) {
	
					attributes.remove( attribute );
					delete wireframeAttributes[ geometry.id ];
	
				}
	
				attribute = wireframeAttributes[ buffergeometry.id ];
	
				if ( attribute ) {
	
					attributes.remove( attribute );
					delete wireframeAttributes[ buffergeometry.id ];
	
				}
	
				//
	
				infoMemory.geometries --;
	
			}
	
			function get( object, geometry ) {
	
				var buffergeometry = geometries[ geometry.id ];
	
				if ( buffergeometry ) return buffergeometry;
	
				geometry.addEventListener( 'dispose', onGeometryDispose );
	
				if ( geometry.isBufferGeometry ) {
	
					buffergeometry = geometry;
	
				} else if ( geometry.isGeometry ) {
	
					if ( geometry._bufferGeometry === undefined ) {
	
						geometry._bufferGeometry = new BufferGeometry().setFromObject( object );
	
					}
	
					buffergeometry = geometry._bufferGeometry;
	
				}
	
				geometries[ geometry.id ] = buffergeometry;
	
				infoMemory.geometries ++;
	
				return buffergeometry;
	
			}
	
			function update( geometry ) {
	
				var index = geometry.index;
				var geometryAttributes = geometry.attributes;
	
				if ( index !== null ) {
	
					attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );
	
				}
	
				for ( var name in geometryAttributes ) {
	
					attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );
	
				}
	
				// morph targets
	
				var morphAttributes = geometry.morphAttributes;
	
				for ( var name in morphAttributes ) {
	
					var array = morphAttributes[ name ];
	
					for ( var i = 0, l = array.length; i < l; i ++ ) {
	
						attributes.update( array[ i ], gl.ARRAY_BUFFER );
	
					}
	
				}
	
			}
	
			function getWireframeAttribute( geometry ) {
	
				var attribute = wireframeAttributes[ geometry.id ];
	
				if ( attribute ) return attribute;
	
				var indices = [];
	
				var geometryIndex = geometry.index;
				var geometryAttributes = geometry.attributes;
	
				// console.time( 'wireframe' );
	
				if ( geometryIndex !== null ) {
	
					var array = geometryIndex.array;
	
					for ( var i = 0, l = array.length; i < l; i += 3 ) {
	
						var a = array[ i + 0 ];
						var b = array[ i + 1 ];
						var c = array[ i + 2 ];
	
						indices.push( a, b, b, c, c, a );
	
					}
	
				} else {
	
					var array = geometryAttributes.position.array;
	
					for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
	
						var a = i + 0;
						var b = i + 1;
						var c = i + 2;
	
						indices.push( a, b, b, c, c, a );
	
					}
	
				}
	
				// console.timeEnd( 'wireframe' );
	
				attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
	
				attributes.update( attribute, gl.ELEMENT_ARRAY_BUFFER );
	
				wireframeAttributes[ geometry.id ] = attribute;
	
				return attribute;
	
			}
	
			return {
	
				get: get,
				update: update,
	
				getWireframeAttribute: getWireframeAttribute
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function UniformsCache() {
	
			var lights = {};
	
			return {
	
				get: function ( light ) {
	
					if ( lights[ light.id ] !== undefined ) {
	
						return lights[ light.id ];
	
					}
	
					var uniforms;
	
					switch ( light.type ) {
	
						case 'DirectionalLight':
							uniforms = {
								direction: new Vector3(),
								color: new Color(),
	
								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;
	
						case 'SpotLight':
							uniforms = {
								position: new Vector3(),
								direction: new Vector3(),
								color: new Color(),
								distance: 0,
								coneCos: 0,
								penumbraCos: 0,
								decay: 0,
	
								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;
	
						case 'PointLight':
							uniforms = {
								position: new Vector3(),
								color: new Color(),
								distance: 0,
								decay: 0,
	
								shadow: false,
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2(),
								shadowCameraNear: 1,
								shadowCameraFar: 1000
							};
							break;
	
						case 'HemisphereLight':
							uniforms = {
								direction: new Vector3(),
								skyColor: new Color(),
								groundColor: new Color()
							};
							break;
	
						case 'RectAreaLight':
							uniforms = {
								color: new Color(),
								position: new Vector3(),
								halfWidth: new Vector3(),
								halfHeight: new Vector3()
								// TODO (abelnation): set RectAreaLight shadow uniforms
							};
							break;
	
					}
	
					lights[ light.id ] = uniforms;
	
					return uniforms;
	
				}
	
			};
	
		}
	
		function WebGLLights() {
	
			var cache = new UniformsCache();
	
			var state = {
	
				hash: '',
	
				ambient: [ 0, 0, 0 ],
				directional: [],
				directionalShadowMap: [],
				directionalShadowMatrix: [],
				spot: [],
				spotShadowMap: [],
				spotShadowMatrix: [],
				rectArea: [],
				point: [],
				pointShadowMap: [],
				pointShadowMatrix: [],
				hemi: []
	
			};
	
			var vector3 = new Vector3();
			var matrix4 = new Matrix4();
			var matrix42 = new Matrix4();
	
			function setup( lights, shadows, camera ) {
	
				var r = 0, g = 0, b = 0;
	
				var directionalLength = 0;
				var pointLength = 0;
				var spotLength = 0;
				var rectAreaLength = 0;
				var hemiLength = 0;
	
				var viewMatrix = camera.matrixWorldInverse;
	
				for ( var i = 0, l = lights.length; i < l; i ++ ) {
	
					var light = lights[ i ];
	
					var color = light.color;
					var intensity = light.intensity;
					var distance = light.distance;
	
					var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
	
					if ( light.isAmbientLight ) {
	
						r += color.r * intensity;
						g += color.g * intensity;
						b += color.b * intensity;
	
					} else if ( light.isDirectionalLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( vector3 );
						uniforms.direction.transformDirection( viewMatrix );
	
						uniforms.shadow = light.castShadow;
	
						if ( light.castShadow ) {
	
							var shadow = light.shadow;
	
							uniforms.shadowBias = shadow.bias;
							uniforms.shadowRadius = shadow.radius;
							uniforms.shadowMapSize = shadow.mapSize;
	
						}
	
						state.directionalShadowMap[ directionalLength ] = shadowMap;
						state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
						state.directional[ directionalLength ] = uniforms;
	
						directionalLength ++;
	
					} else if ( light.isSpotLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						uniforms.color.copy( color ).multiplyScalar( intensity );
						uniforms.distance = distance;
	
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( vector3 );
						uniforms.direction.transformDirection( viewMatrix );
	
						uniforms.coneCos = Math.cos( light.angle );
						uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;
	
						uniforms.shadow = light.castShadow;
	
						if ( light.castShadow ) {
	
							var shadow = light.shadow;
	
							uniforms.shadowBias = shadow.bias;
							uniforms.shadowRadius = shadow.radius;
							uniforms.shadowMapSize = shadow.mapSize;
	
						}
	
						state.spotShadowMap[ spotLength ] = shadowMap;
						state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
						state.spot[ spotLength ] = uniforms;
	
						spotLength ++;
	
					} else if ( light.isRectAreaLight ) {
	
						var uniforms = cache.get( light );
	
						// (a) intensity controls irradiance of entire light
						uniforms.color
							.copy( color )
							.multiplyScalar( intensity / ( light.width * light.height ) );
	
						// (b) intensity controls the radiance per light area
						// uniforms.color.copy( color ).multiplyScalar( intensity );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						// extract local rotation of light to derive width/height half vectors
						matrix42.identity();
						matrix4.copy( light.matrixWorld );
						matrix4.premultiply( viewMatrix );
						matrix42.extractRotation( matrix4 );
	
						uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
						uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
	
						uniforms.halfWidth.applyMatrix4( matrix42 );
						uniforms.halfHeight.applyMatrix4( matrix42 );
	
						// TODO (abelnation): RectAreaLight distance?
						// uniforms.distance = distance;
	
						state.rectArea[ rectAreaLength ] = uniforms;
	
						rectAreaLength ++;
	
					} else if ( light.isPointLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.distance = light.distance;
						uniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;
	
						uniforms.shadow = light.castShadow;
	
						if ( light.castShadow ) {
	
							var shadow = light.shadow;
	
							uniforms.shadowBias = shadow.bias;
							uniforms.shadowRadius = shadow.radius;
							uniforms.shadowMapSize = shadow.mapSize;
							uniforms.shadowCameraNear = shadow.camera.near;
							uniforms.shadowCameraFar = shadow.camera.far;
	
						}
	
						state.pointShadowMap[ pointLength ] = shadowMap;
						state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
						state.point[ pointLength ] = uniforms;
	
						pointLength ++;
	
					} else if ( light.isHemisphereLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						uniforms.direction.transformDirection( viewMatrix );
						uniforms.direction.normalize();
	
						uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
						uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );
	
						state.hemi[ hemiLength ] = uniforms;
	
						hemiLength ++;
	
					}
	
				}
	
				state.ambient[ 0 ] = r;
				state.ambient[ 1 ] = g;
				state.ambient[ 2 ] = b;
	
				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;
	
				// TODO (sam-g-steel) why aren't we using join
				state.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + rectAreaLength + ',' + hemiLength + ',' + shadows.length;
	
			}
	
			return {
				setup: setup,
				state: state
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLObjects( geometries, infoRender ) {
	
			var updateList = {};
	
			function update( object ) {
	
				var frame = infoRender.frame;
	
				var geometry = object.geometry;
				var buffergeometry = geometries.get( object, geometry );
	
				// Update once per frame
	
				if ( updateList[ buffergeometry.id ] !== frame ) {
	
					if ( geometry.isGeometry ) {
	
						buffergeometry.updateFromObject( object );
	
					}
	
					geometries.update( buffergeometry );
	
					updateList[ buffergeometry.id ] = frame;
	
				}
	
				return buffergeometry;
	
			}
	
			function clear() {
	
				updateList = {};
	
			}
	
			return {
	
				update: update,
				clear: clear
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function addLineNumbers( string ) {
	
			var lines = string.split( '\n' );
	
			for ( var i = 0; i < lines.length; i ++ ) {
	
				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
	
			}
	
			return lines.join( '\n' );
	
		}
	
		function WebGLShader( gl, type, string ) {
	
			var shader = gl.createShader( type );
	
			gl.shaderSource( shader, string );
			gl.compileShader( shader );
	
			if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {
	
				console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );
	
			}
	
			if ( gl.getShaderInfoLog( shader ) !== '' ) {
	
				console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );
	
			}
	
			// --enable-privileged-webgl-extension
			// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
	
			return shader;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var programIdCount = 0;
	
		function getEncodingComponents( encoding ) {
	
			switch ( encoding ) {
	
				case LinearEncoding:
					return [ 'Linear', '( value )' ];
				case sRGBEncoding:
					return [ 'sRGB', '( value )' ];
				case RGBEEncoding:
					return [ 'RGBE', '( value )' ];
				case RGBM7Encoding:
					return [ 'RGBM', '( value, 7.0 )' ];
				case RGBM16Encoding:
					return [ 'RGBM', '( value, 16.0 )' ];
				case RGBDEncoding:
					return [ 'RGBD', '( value, 256.0 )' ];
				case GammaEncoding:
					return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
				default:
					throw new Error( 'unsupported encoding: ' + encoding );
	
			}
	
		}
	
		function getTexelDecodingFunction( functionName, encoding ) {
	
			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return " + components[ 0 ] + "ToLinear" + components[ 1 ] + "; }";
	
		}
	
		function getTexelEncodingFunction( functionName, encoding ) {
	
			var components = getEncodingComponents( encoding );
			return "vec4 " + functionName + "( vec4 value ) { return LinearTo" + components[ 0 ] + components[ 1 ] + "; }";
	
		}
	
		function getToneMappingFunction( functionName, toneMapping ) {
	
			var toneMappingName;
	
			switch ( toneMapping ) {
	
				case LinearToneMapping:
					toneMappingName = "Linear";
					break;
	
				case ReinhardToneMapping:
					toneMappingName = "Reinhard";
					break;
	
				case Uncharted2ToneMapping:
					toneMappingName = "Uncharted2";
					break;
	
				case CineonToneMapping:
					toneMappingName = "OptimizedCineon";
					break;
	
				default:
					throw new Error( 'unsupported toneMapping: ' + toneMapping );
	
			}
	
			return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
	
		}
	
		function generateExtensions( extensions, parameters, rendererExtensions ) {
	
			extensions = extensions || {};
	
			var chunks = [
				( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
				( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
				( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
				( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
			];
	
			return chunks.filter( filterEmptyLine ).join( '\n' );
	
		}
	
		function generateDefines( defines ) {
	
			var chunks = [];
	
			for ( var name in defines ) {
	
				var value = defines[ name ];
	
				if ( value === false ) continue;
	
				chunks.push( '#define ' + name + ' ' + value );
	
			}
	
			return chunks.join( '\n' );
	
		}
	
		function fetchAttributeLocations( gl, program ) {
	
			var attributes = {};
	
			var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );
	
			for ( var i = 0; i < n; i ++ ) {
	
				var info = gl.getActiveAttrib( program, i );
				var name = info.name;
	
				// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
	
				attributes[ name ] = gl.getAttribLocation( program, name );
	
			}
	
			return attributes;
	
		}
	
		function filterEmptyLine( string ) {
	
			return string !== '';
	
		}
	
		function replaceLightNums( string, parameters ) {
	
			return string
				.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
				.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
				.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
				.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
				.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );
	
		}
	
		function parseIncludes( string ) {
	
			var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;
	
			function replace( match, include ) {
	
				var replace = ShaderChunk[ include ];
	
				if ( replace === undefined ) {
	
					throw new Error( 'Can not resolve #include <' + include + '>' );
	
				}
	
				return parseIncludes( replace );
	
			}
	
			return string.replace( pattern, replace );
	
		}
	
		function unrollLoops( string ) {
	
			var pattern = /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
	
			function replace( match, start, end, snippet ) {
	
				var unroll = '';
	
				for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {
	
					unroll += snippet.replace( /\[ i \]/g, '[ ' + i + ' ]' );
	
				}
	
				return unroll;
	
			}
	
			return string.replace( pattern, replace );
	
		}
	
		function WebGLProgram( renderer, extensions, code, material, shader, parameters ) {
	
			var gl = renderer.context;
	
			var defines = material.defines;
	
			var vertexShader = shader.vertexShader;
			var fragmentShader = shader.fragmentShader;
	
			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
	
			if ( parameters.shadowMapType === PCFShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
	
			} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
	
			}
	
			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
			var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
	
			if ( parameters.envMap ) {
	
				switch ( material.envMap.mapping ) {
	
					case CubeReflectionMapping:
					case CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;
	
					case CubeUVReflectionMapping:
					case CubeUVRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
						break;
	
					case EquirectangularReflectionMapping:
					case EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;
	
					case SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;
	
				}
	
				switch ( material.envMap.mapping ) {
	
					case CubeRefractionMapping:
					case EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;
	
				}
	
				switch ( material.combine ) {
	
					case MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;
	
					case MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;
	
					case AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;
	
				}
	
			}
	
			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;
	
			// console.log( 'building new program ' );
	
			//
	
			var customExtensions = generateExtensions( material.extensions, parameters, extensions );
	
			var customDefines = generateDefines( defines );
	
			//
	
			var program = gl.createProgram();
	
			var prefixVertex, prefixFragment;
	
			if ( material.isRawShaderMaterial ) {
	
				prefixVertex = [
	
					customDefines
	
				].filter( filterEmptyLine ).join( '\n' );
	
				if ( prefixVertex.length > 0 ) {
	
					prefixVertex += '\n';
	
				}
	
				prefixFragment = [
	
					customExtensions,
					customDefines
	
				].filter( filterEmptyLine ).join( '\n' );
	
				if ( prefixFragment.length > 0 ) {
	
					prefixFragment += '\n';
	
				}
	
			} else {
	
				prefixVertex = [
	
					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',
	
					'#define SHADER_NAME ' + shader.name,
	
					customDefines,
	
					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
	
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					'#define MAX_BONES ' + parameters.maxBones,
					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
	
					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
	
					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',
	
					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',
	
					'#ifdef USE_COLOR',
	
					'	attribute vec3 color;',
	
					'#endif',
	
					'#ifdef USE_MORPHTARGETS',
	
					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',
	
					'	#ifdef USE_MORPHNORMALS',
	
					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',
	
					'	#else',
	
					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',
	
					'	#endif',
	
					'#endif',
	
					'#ifdef USE_SKINNING',
	
					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',
	
					'#endif',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
				prefixFragment = [
	
					customExtensions,
	
					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',
	
					'#define SHADER_NAME ' + shader.name,
	
					customDefines,
	
					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',
	
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
	
					parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,
					'#define UNION_CLIPPING_PLANES ' + ( parameters.numClippingPlanes - parameters.numClipIntersection ),
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
	
					parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : '',
	
					parameters.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
					parameters.envMap && extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',
	
					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',
	
					( parameters.toneMapping !== NoToneMapping ) ? "#define TONE_MAPPING" : '',
					( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
					( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( "toneMapping", parameters.toneMapping ) : '',
	
					parameters.dithering ? '#define DITHERING' : '',
	
					( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
					parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
					parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
					parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
					parameters.outputEncoding ? getTexelEncodingFunction( "linearToOutputTexel", parameters.outputEncoding ) : '',
	
					parameters.depthPacking ? "#define DEPTH_PACKING " + material.depthPacking : '',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
			}
	
			vertexShader = parseIncludes( vertexShader );
			vertexShader = replaceLightNums( vertexShader, parameters );
	
			fragmentShader = parseIncludes( fragmentShader );
			fragmentShader = replaceLightNums( fragmentShader, parameters );
	
			if ( ! material.isShaderMaterial ) {
	
				vertexShader = unrollLoops( vertexShader );
				fragmentShader = unrollLoops( fragmentShader );
	
			}
	
			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;
	
			// console.log( '*VERTEX*', vertexGlsl );
			// console.log( '*FRAGMENT*', fragmentGlsl );
	
			var glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
			var glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );
	
			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );
	
			// Force a particular attribute to index 0.
	
			if ( material.index0AttributeName !== undefined ) {
	
				gl.bindAttribLocation( program, 0, material.index0AttributeName );
	
			} else if ( parameters.morphTargets === true ) {
	
				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );
	
			}
	
			gl.linkProgram( program );
	
			var programLog = gl.getProgramInfoLog( program );
			var vertexLog = gl.getShaderInfoLog( glVertexShader );
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader );
	
			var runnable = true;
			var haveDiagnostics = true;
	
			// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );
			// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );
	
			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {
	
				runnable = false;
	
				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );
	
			} else if ( programLog !== '' ) {
	
				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );
	
			} else if ( vertexLog === '' || fragmentLog === '' ) {
	
				haveDiagnostics = false;
	
			}
	
			if ( haveDiagnostics ) {
	
				this.diagnostics = {
	
					runnable: runnable,
					material: material,
	
					programLog: programLog,
	
					vertexShader: {
	
						log: vertexLog,
						prefix: prefixVertex
	
					},
	
					fragmentShader: {
	
						log: fragmentLog,
						prefix: prefixFragment
	
					}
	
				};
	
			}
	
			// clean up
	
			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );
	
			// set up caching for uniform locations
	
			var cachedUniforms;
	
			this.getUniforms = function () {
	
				if ( cachedUniforms === undefined ) {
	
					cachedUniforms = new WebGLUniforms( gl, program, renderer );
	
				}
	
				return cachedUniforms;
	
			};
	
			// set up caching for attribute locations
	
			var cachedAttributes;
	
			this.getAttributes = function () {
	
				if ( cachedAttributes === undefined ) {
	
					cachedAttributes = fetchAttributeLocations( gl, program );
	
				}
	
				return cachedAttributes;
	
			};
	
			// free resource
	
			this.destroy = function () {
	
				gl.deleteProgram( program );
				this.program = undefined;
	
			};
	
			// DEPRECATED
	
			Object.defineProperties( this, {
	
				uniforms: {
					get: function () {
	
						console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
						return this.getUniforms();
	
					}
				},
	
				attributes: {
					get: function () {
	
						console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
						return this.getAttributes();
	
					}
				}
	
			} );
	
	
			//
	
			this.id = programIdCount ++;
			this.code = code;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;
	
			return this;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLPrograms( renderer, extensions, capabilities ) {
	
			var programs = [];
	
			var shaderIDs = {
				MeshDepthMaterial: 'depth',
				MeshDistanceMaterial: 'distanceRGBA',
				MeshNormalMaterial: 'normal',
				MeshBasicMaterial: 'basic',
				MeshLambertMaterial: 'lambert',
				MeshPhongMaterial: 'phong',
				MeshToonMaterial: 'phong',
				MeshStandardMaterial: 'physical',
				MeshPhysicalMaterial: 'physical',
				LineBasicMaterial: 'basic',
				LineDashedMaterial: 'dashed',
				PointsMaterial: 'points',
				ShadowMaterial: 'shadow'
			};
	
			var parameterNames = [
				"precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding",
				"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap",
				"roughnessMap", "metalnessMap", "gradientMap",
				"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
				"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
				"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
				"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
				"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
				"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
				"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"
			];
	
	
			function allocateBones( object ) {
	
				var skeleton = object.skeleton;
				var bones = skeleton.bones;
	
				if ( capabilities.floatVertexTextures ) {
	
					return 1024;
	
				} else {
	
					// default for when object is not specified
					// ( for example when prebuilding shader to be used with multiple objects )
					//
					//  - leave some extra space for other uniforms
					//  - limit here is ANGLE's 254 max uniform vectors
					//    (up to 54 should be safe)
	
					var nVertexUniforms = capabilities.maxVertexUniforms;
					var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
	
					var maxBones = Math.min( nVertexMatrices, bones.length );
	
					if ( maxBones < bones.length ) {
	
						console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
						return 0;
	
					}
	
					return maxBones;
	
				}
	
			}
	
			function getTextureEncodingFromMap( map, gammaOverrideLinear ) {
	
				var encoding;
	
				if ( ! map ) {
	
					encoding = LinearEncoding;
	
				} else if ( map.isTexture ) {
	
					encoding = map.encoding;
	
				} else if ( map.isWebGLRenderTarget ) {
	
					console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
					encoding = map.texture.encoding;
	
				}
	
				// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
				if ( encoding === LinearEncoding && gammaOverrideLinear ) {
	
					encoding = GammaEncoding;
	
				}
	
				return encoding;
	
			}
	
			this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {
	
				var shaderID = shaderIDs[ material.type ];
	
				// heuristics to create shader parameters according to lights in the scene
				// (not to blow over maxLights budget)
	
				var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
				var precision = capabilities.precision;
	
				if ( material.precision !== null ) {
	
					precision = capabilities.getMaxPrecision( material.precision );
	
					if ( precision !== material.precision ) {
	
						console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
	
					}
	
				}
	
				var currentRenderTarget = renderer.getRenderTarget();
	
				var parameters = {
	
					shaderID: shaderID,
	
					precision: precision,
					supportsVertexTextures: capabilities.vertexTextures,
					outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
					map: !! material.map,
					mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
					envMap: !! material.envMap,
					envMapMode: material.envMap && material.envMap.mapping,
					envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
					envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
					lightMap: !! material.lightMap,
					aoMap: !! material.aoMap,
					emissiveMap: !! material.emissiveMap,
					emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
					bumpMap: !! material.bumpMap,
					normalMap: !! material.normalMap,
					displacementMap: !! material.displacementMap,
					roughnessMap: !! material.roughnessMap,
					metalnessMap: !! material.metalnessMap,
					specularMap: !! material.specularMap,
					alphaMap: !! material.alphaMap,
	
					gradientMap: !! material.gradientMap,
	
					combine: material.combine,
	
					vertexColors: material.vertexColors,
	
					fog: !! fog,
					useFog: material.fog,
					fogExp: ( fog && fog.isFogExp2 ),
	
					flatShading: material.flatShading,
	
					sizeAttenuation: material.sizeAttenuation,
					logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,
	
					skinning: material.skinning && maxBones > 0,
					maxBones: maxBones,
					useVertexTexture: capabilities.floatVertexTextures,
	
					morphTargets: material.morphTargets,
					morphNormals: material.morphNormals,
					maxMorphTargets: renderer.maxMorphTargets,
					maxMorphNormals: renderer.maxMorphNormals,
	
					numDirLights: lights.directional.length,
					numPointLights: lights.point.length,
					numSpotLights: lights.spot.length,
					numRectAreaLights: lights.rectArea.length,
					numHemiLights: lights.hemi.length,
	
					numClippingPlanes: nClipPlanes,
					numClipIntersection: nClipIntersection,
	
					dithering: material.dithering,
	
					shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && shadows.length > 0,
					shadowMapType: renderer.shadowMap.type,
	
					toneMapping: renderer.toneMapping,
					physicallyCorrectLights: renderer.physicallyCorrectLights,
	
					premultipliedAlpha: material.premultipliedAlpha,
	
					alphaTest: material.alphaTest,
					doubleSided: material.side === DoubleSide,
					flipSided: material.side === BackSide,
	
					depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false
	
				};
	
				return parameters;
	
			};
	
			this.getProgramCode = function ( material, parameters ) {
	
				var array = [];
	
				if ( parameters.shaderID ) {
	
					array.push( parameters.shaderID );
	
				} else {
	
					array.push( material.fragmentShader );
					array.push( material.vertexShader );
	
				}
	
				if ( material.defines !== undefined ) {
	
					for ( var name in material.defines ) {
	
						array.push( name );
						array.push( material.defines[ name ] );
	
					}
	
				}
	
				for ( var i = 0; i < parameterNames.length; i ++ ) {
	
					array.push( parameters[ parameterNames[ i ] ] );
	
				}
	
				array.push( material.onBeforeCompile.toString() );
	
				array.push( renderer.gammaOutput );
	
				return array.join();
	
			};
	
			this.acquireProgram = function ( material, shader, parameters, code ) {
	
				var program;
	
				// Check if code has been already compiled
				for ( var p = 0, pl = programs.length; p < pl; p ++ ) {
	
					var programInfo = programs[ p ];
	
					if ( programInfo.code === code ) {
	
						program = programInfo;
						++ program.usedTimes;
	
						break;
	
					}
	
				}
	
				if ( program === undefined ) {
	
					program = new WebGLProgram( renderer, extensions, code, material, shader, parameters );
					programs.push( program );
	
				}
	
				return program;
	
			};
	
			this.releaseProgram = function ( program ) {
	
				if ( -- program.usedTimes === 0 ) {
	
					// Remove from unordered set
					var i = programs.indexOf( program );
					programs[ i ] = programs[ programs.length - 1 ];
					programs.pop();
	
					// Free WebGL resources
					program.destroy();
	
				}
	
			};
	
			// Exposed for resource monitoring & error feedback via renderer.info:
			this.programs = programs;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, infoMemory ) {
	
			var _isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof window.WebGL2RenderingContext );
	
			//
	
			function clampToMaxSize( image, maxSize ) {
	
				if ( image.width > maxSize || image.height > maxSize ) {
	
					// Warning: Scaling through the canvas will only work with images that use
					// premultiplied alpha.
	
					var scale = maxSize / Math.max( image.width, image.height );
	
					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = Math.floor( image.width * scale );
					canvas.height = Math.floor( image.height * scale );
	
					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );
	
					console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );
	
					return canvas;
	
				}
	
				return image;
	
			}
	
			function isPowerOfTwo( image ) {
	
				return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );
	
			}
	
			function makePowerOfTwo( image ) {
	
				if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement || image instanceof ImageBitmap ) {
	
					var canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
					canvas.width = _Math.floorPowerOfTwo( image.width );
					canvas.height = _Math.floorPowerOfTwo( image.height );
	
					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, canvas.width, canvas.height );
	
					console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );
	
					return canvas;
	
				}
	
				return image;
	
			}
	
			function textureNeedsPowerOfTwo( texture ) {
	
				return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
					( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );
	
			}
	
			function textureNeedsGenerateMipmaps( texture, isPowerOfTwo ) {
	
				return texture.generateMipmaps && isPowerOfTwo &&
					texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
	
			}
	
			// Fallback filters for non-power-of-2 textures
	
			function filterFallback( f ) {
	
				if ( f === NearestFilter || f === NearestMipMapNearestFilter || f === NearestMipMapLinearFilter ) {
	
					return _gl.NEAREST;
	
				}
	
				return _gl.LINEAR;
	
			}
	
			//
	
			function onTextureDispose( event ) {
	
				var texture = event.target;
	
				texture.removeEventListener( 'dispose', onTextureDispose );
	
				deallocateTexture( texture );
	
				infoMemory.textures --;
	
	
			}
	
			function onRenderTargetDispose( event ) {
	
				var renderTarget = event.target;
	
				renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
	
				deallocateRenderTarget( renderTarget );
	
				infoMemory.textures --;
	
			}
	
			//
	
			function deallocateTexture( texture ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.image && textureProperties.__image__webglTextureCube ) {
	
					// cube texture
	
					_gl.deleteTexture( textureProperties.__image__webglTextureCube );
	
				} else {
	
					// 2D texture
	
					if ( textureProperties.__webglInit === undefined ) return;
	
					_gl.deleteTexture( textureProperties.__webglTexture );
	
				}
	
				// remove all webgl properties
				properties.remove( texture );
	
			}
	
			function deallocateRenderTarget( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );
	
				if ( ! renderTarget ) return;
	
				if ( textureProperties.__webglTexture !== undefined ) {
	
					_gl.deleteTexture( textureProperties.__webglTexture );
	
				}
	
				if ( renderTarget.depthTexture ) {
	
					renderTarget.depthTexture.dispose();
	
				}
	
				if ( renderTarget.isWebGLRenderTargetCube ) {
	
					for ( var i = 0; i < 6; i ++ ) {
	
						_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
						if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );
	
					}
	
				} else {
	
					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
	
				}
	
				properties.remove( renderTarget.texture );
				properties.remove( renderTarget );
	
			}
	
			//
	
	
	
			function setTexture2D( texture, slot ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
					var image = texture.image;
	
					if ( image === undefined ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );
	
					} else if ( image.complete === false ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );
	
					} else {
	
						uploadTexture( textureProperties, texture, slot );
						return;
	
					}
	
				}
	
				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
	
			}
	
			function setTextureCube( texture, slot ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.image.length === 6 ) {
	
					if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
						if ( ! textureProperties.__image__webglTextureCube ) {
	
							texture.addEventListener( 'dispose', onTextureDispose );
	
							textureProperties.__image__webglTextureCube = _gl.createTexture();
	
							infoMemory.textures ++;
	
						}
	
						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );
	
						_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
	
						var isCompressed = ( texture && texture.isCompressedTexture );
						var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );
	
						var cubeImage = [];
	
						for ( var i = 0; i < 6; i ++ ) {
	
							if ( ! isCompressed && ! isDataTexture ) {
	
								cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );
	
							} else {
	
								cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
	
							}
	
						}
	
						var image = cubeImage[ 0 ],
							isPowerOfTwoImage = isPowerOfTwo( image ),
							glFormat = utils.convert( texture.format ),
							glType = utils.convert( texture.type );
	
						setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );
	
						for ( var i = 0; i < 6; i ++ ) {
	
							if ( ! isCompressed ) {
	
								if ( isDataTexture ) {
	
									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
	
								} else {
	
									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );
	
								}
	
							} else {
	
								var mipmap, mipmaps = cubeImage[ i ].mipmaps;
	
								for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {
	
									mipmap = mipmaps[ j ];
	
									if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
	
										if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
	
											state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
										} else {
	
											console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );
	
										}
	
									} else {
	
										state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
									}
	
								}
	
							}
	
						}
	
						if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) {
	
							_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
	
						}
	
						textureProperties.__version = texture.version;
	
						if ( texture.onUpdate ) texture.onUpdate( texture );
	
					} else {
	
						state.activeTexture( _gl.TEXTURE0 + slot );
						state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );
	
					}
	
				}
	
			}
	
			function setTextureCubeDynamic( texture, slot ) {
	
				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );
	
			}
	
			function setTextureParameters( textureType, texture, isPowerOfTwoImage ) {
	
				var extension;
	
				if ( isPowerOfTwoImage ) {
	
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, utils.convert( texture.wrapS ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, utils.convert( texture.wrapT ) );
	
					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, utils.convert( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, utils.convert( texture.minFilter ) );
	
				} else {
	
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
	
					if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );
	
					}
	
					_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
					_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );
	
					if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );
	
					}
	
				}
	
				extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
				if ( extension ) {
	
					if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
					if ( texture.type === HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;
	
					if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
	
						_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
						properties.get( texture ).__currentAnisotropy = texture.anisotropy;
	
					}
	
				}
	
			}
	
			function uploadTexture( textureProperties, texture, slot ) {
	
				if ( textureProperties.__webglInit === undefined ) {
	
					textureProperties.__webglInit = true;
	
					texture.addEventListener( 'dispose', onTextureDispose );
	
					textureProperties.__webglTexture = _gl.createTexture();
	
					infoMemory.textures ++;
	
				}
	
				state.activeTexture( _gl.TEXTURE0 + slot );
				state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
	
				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
	
				var image = clampToMaxSize( texture.image, capabilities.maxTextureSize );
	
				if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {
	
					image = makePowerOfTwo( image );
	
				}
	
				var isPowerOfTwoImage = isPowerOfTwo( image ),
					glFormat = utils.convert( texture.format ),
					glType = utils.convert( texture.type );
	
				setTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );
	
				var mipmap, mipmaps = texture.mipmaps;
	
				if ( texture.isDepthTexture ) {
	
					// populate depth texture with dummy data
	
					var internalFormat = _gl.DEPTH_COMPONENT;
	
					if ( texture.type === FloatType ) {
	
						if ( ! _isWebGL2 ) throw new Error( 'Float Depth Texture only supported in WebGL2.0' );
						internalFormat = _gl.DEPTH_COMPONENT32F;
	
					} else if ( _isWebGL2 ) {
	
						// WebGL 2.0 requires signed internalformat for glTexImage2D
						internalFormat = _gl.DEPTH_COMPONENT16;
	
					}
	
					if ( texture.format === DepthFormat && internalFormat === _gl.DEPTH_COMPONENT ) {
	
						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {
	
							console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );
	
							texture.type = UnsignedShortType;
							glType = utils.convert( texture.type );
	
						}
	
					}
	
					// Depth stencil textures need the DEPTH_STENCIL internal format
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.format === DepthStencilFormat ) {
	
						internalFormat = _gl.DEPTH_STENCIL;
	
						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedInt248Type ) {
	
							console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );
	
							texture.type = UnsignedInt248Type;
							glType = utils.convert( texture.type );
	
						}
	
					}
	
					state.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );
	
				} else if ( texture.isDataTexture ) {
	
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
	
					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {
	
						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
						}
	
						texture.generateMipmaps = false;
	
					} else {
	
						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );
	
					}
	
				} else if ( texture.isCompressedTexture ) {
	
					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
						mipmap = mipmaps[ i ];
	
						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
	
							if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
	
								state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
							} else {
	
								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );
	
							}
	
						} else {
	
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
						}
	
					}
	
				} else {
	
					// regular Texture (image, video, canvas)
	
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
	
					if ( mipmaps.length > 0 && isPowerOfTwoImage ) {
	
						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
							mipmap = mipmaps[ i ];
							state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );
	
						}
	
						texture.generateMipmaps = false;
	
					} else {
	
						state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );
	
					}
	
				}
	
				if ( textureNeedsGenerateMipmaps( texture, isPowerOfTwoImage ) ) _gl.generateMipmap( _gl.TEXTURE_2D );
	
				textureProperties.__version = texture.version;
	
				if ( texture.onUpdate ) texture.onUpdate( texture );
	
			}
	
			// Render targets
	
			// Setup storage for target texture and bind it to correct framebuffer
			function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {
	
				var glFormat = utils.convert( renderTarget.texture.format );
				var glType = utils.convert( renderTarget.texture.type );
				state.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );
	
			}
	
			// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
			function setupRenderBufferStorage( renderbuffer, renderTarget ) {
	
				_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
	
				if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
	
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
	
				} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
	
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
	
				} else {
	
					// FIXME: We don't support !depth !stencil
					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );
	
				}
	
				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
	
			}
	
			// Setup resources for a Depth Texture for a FBO (needs an extension)
			function setupDepthTexture( framebuffer, renderTarget ) {
	
				var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
				if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );
	
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
	
				if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {
	
					throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );
	
				}
	
				// upload an empty depth texture with framebuffer size
				if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
						renderTarget.depthTexture.image.width !== renderTarget.width ||
						renderTarget.depthTexture.image.height !== renderTarget.height ) {
	
					renderTarget.depthTexture.image.width = renderTarget.width;
					renderTarget.depthTexture.image.height = renderTarget.height;
					renderTarget.depthTexture.needsUpdate = true;
	
				}
	
				setTexture2D( renderTarget.depthTexture, 0 );
	
				var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
	
				if ( renderTarget.depthTexture.format === DepthFormat ) {
	
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );
	
				} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
	
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );
	
				} else {
	
					throw new Error( 'Unknown depthTexture format' );
	
				}
	
			}
	
			// Setup GL resources for a non-texture depth buffer
			function setupDepthRenderbuffer( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
	
				var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
	
				if ( renderTarget.depthTexture ) {
	
					if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );
	
					setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
	
				} else {
	
					if ( isCube ) {
	
						renderTargetProperties.__webglDepthbuffer = [];
	
						for ( var i = 0; i < 6; i ++ ) {
	
							_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
							renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );
	
						}
	
					} else {
	
						_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );
	
					}
	
				}
	
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );
	
			}
	
			// Set up GL resources for the render target
			function setupRenderTarget( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );
	
				renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
	
				textureProperties.__webglTexture = _gl.createTexture();
	
				infoMemory.textures ++;
	
				var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );
	
				// Setup framebuffer
	
				if ( isCube ) {
	
					renderTargetProperties.__webglFramebuffer = [];
	
					for ( var i = 0; i < 6; i ++ ) {
	
						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
	
					}
	
				} else {
	
					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
	
				}
	
				// Setup color buffer
	
				if ( isCube ) {
	
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );
	
					for ( var i = 0; i < 6; i ++ ) {
	
						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
	
					}
	
					if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );
	
				} else {
	
					state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );
	
					if ( textureNeedsGenerateMipmaps( renderTarget.texture, isTargetPowerOfTwo ) ) _gl.generateMipmap( _gl.TEXTURE_2D );
					state.bindTexture( _gl.TEXTURE_2D, null );
	
				}
	
				// Setup depth and stencil buffers
	
				if ( renderTarget.depthBuffer ) {
	
					setupDepthRenderbuffer( renderTarget );
	
				}
	
			}
	
			function updateRenderTargetMipmap( renderTarget ) {
	
				var texture = renderTarget.texture;
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );
	
				if ( textureNeedsGenerateMipmaps( texture, isTargetPowerOfTwo ) ) {
	
					var target = renderTarget.isWebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
					var webglTexture = properties.get( texture ).__webglTexture;
	
					state.bindTexture( target, webglTexture );
					_gl.generateMipmap( target );
					state.bindTexture( target, null );
	
				}
	
			}
	
			this.setTexture2D = setTexture2D;
			this.setTextureCube = setTextureCube;
			this.setTextureCubeDynamic = setTextureCubeDynamic;
			this.setupRenderTarget = setupRenderTarget;
			this.updateRenderTargetMipmap = updateRenderTargetMipmap;
	
		}
	
		/**
		 * @author fordacious / fordacious.github.io
		 */
	
		function WebGLProperties() {
	
			var properties = {};
	
			function get( object ) {
	
				var uuid = object.uuid;
				var map = properties[ uuid ];
	
				if ( map === undefined ) {
	
					map = {};
					properties[ uuid ] = map;
	
				}
	
				return map;
	
			}
	
			function remove( object ) {
	
				delete properties[ object.uuid ];
	
			}
	
			function clear() {
	
				properties = {};
	
			}
	
			return {
				get: get,
				remove: remove,
				clear: clear
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLState( gl, extensions, utils ) {
	
			function ColorBuffer() {
	
				var locked = false;
	
				var color = new Vector4();
				var currentColorMask = null;
				var currentColorClear = new Vector4( 0, 0, 0, 0 );
	
				return {
	
					setMask: function ( colorMask ) {
	
						if ( currentColorMask !== colorMask && ! locked ) {
	
							gl.colorMask( colorMask, colorMask, colorMask, colorMask );
							currentColorMask = colorMask;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( r, g, b, a, premultipliedAlpha ) {
	
						if ( premultipliedAlpha === true ) {
	
							r *= a; g *= a; b *= a;
	
						}
	
						color.set( r, g, b, a );
	
						if ( currentColorClear.equals( color ) === false ) {
	
							gl.clearColor( r, g, b, a );
							currentColorClear.copy( color );
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentColorMask = null;
						currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state
	
					}
	
				};
	
			}
	
			function DepthBuffer() {
	
				var locked = false;
	
				var currentDepthMask = null;
				var currentDepthFunc = null;
				var currentDepthClear = null;
	
				return {
	
					setTest: function ( depthTest ) {
	
						if ( depthTest ) {
	
							enable( gl.DEPTH_TEST );
	
						} else {
	
							disable( gl.DEPTH_TEST );
	
						}
	
					},
	
					setMask: function ( depthMask ) {
	
						if ( currentDepthMask !== depthMask && ! locked ) {
	
							gl.depthMask( depthMask );
							currentDepthMask = depthMask;
	
						}
	
					},
	
					setFunc: function ( depthFunc ) {
	
						if ( currentDepthFunc !== depthFunc ) {
	
							if ( depthFunc ) {
	
								switch ( depthFunc ) {
	
									case NeverDepth:
	
										gl.depthFunc( gl.NEVER );
										break;
	
									case AlwaysDepth:
	
										gl.depthFunc( gl.ALWAYS );
										break;
	
									case LessDepth:
	
										gl.depthFunc( gl.LESS );
										break;
	
									case LessEqualDepth:
	
										gl.depthFunc( gl.LEQUAL );
										break;
	
									case EqualDepth:
	
										gl.depthFunc( gl.EQUAL );
										break;
	
									case GreaterEqualDepth:
	
										gl.depthFunc( gl.GEQUAL );
										break;
	
									case GreaterDepth:
	
										gl.depthFunc( gl.GREATER );
										break;
	
									case NotEqualDepth:
	
										gl.depthFunc( gl.NOTEQUAL );
										break;
	
									default:
	
										gl.depthFunc( gl.LEQUAL );
	
								}
	
							} else {
	
								gl.depthFunc( gl.LEQUAL );
	
							}
	
							currentDepthFunc = depthFunc;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( depth ) {
	
						if ( currentDepthClear !== depth ) {
	
							gl.clearDepth( depth );
							currentDepthClear = depth;
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentDepthMask = null;
						currentDepthFunc = null;
						currentDepthClear = null;
	
					}
	
				};
	
			}
	
			function StencilBuffer() {
	
				var locked = false;
	
				var currentStencilMask = null;
				var currentStencilFunc = null;
				var currentStencilRef = null;
				var currentStencilFuncMask = null;
				var currentStencilFail = null;
				var currentStencilZFail = null;
				var currentStencilZPass = null;
				var currentStencilClear = null;
	
				return {
	
					setTest: function ( stencilTest ) {
	
						if ( stencilTest ) {
	
							enable( gl.STENCIL_TEST );
	
						} else {
	
							disable( gl.STENCIL_TEST );
	
						}
	
					},
	
					setMask: function ( stencilMask ) {
	
						if ( currentStencilMask !== stencilMask && ! locked ) {
	
							gl.stencilMask( stencilMask );
							currentStencilMask = stencilMask;
	
						}
	
					},
	
					setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
	
						if ( currentStencilFunc !== stencilFunc ||
						     currentStencilRef 	!== stencilRef 	||
						     currentStencilFuncMask !== stencilMask ) {
	
							gl.stencilFunc( stencilFunc, stencilRef, stencilMask );
	
							currentStencilFunc = stencilFunc;
							currentStencilRef = stencilRef;
							currentStencilFuncMask = stencilMask;
	
						}
	
					},
	
					setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
	
						if ( currentStencilFail	 !== stencilFail 	||
						     currentStencilZFail !== stencilZFail ||
						     currentStencilZPass !== stencilZPass ) {
	
							gl.stencilOp( stencilFail, stencilZFail, stencilZPass );
	
							currentStencilFail = stencilFail;
							currentStencilZFail = stencilZFail;
							currentStencilZPass = stencilZPass;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( stencil ) {
	
						if ( currentStencilClear !== stencil ) {
	
							gl.clearStencil( stencil );
							currentStencilClear = stencil;
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentStencilMask = null;
						currentStencilFunc = null;
						currentStencilRef = null;
						currentStencilFuncMask = null;
						currentStencilFail = null;
						currentStencilZFail = null;
						currentStencilZPass = null;
						currentStencilClear = null;
	
					}
	
				};
	
			}
	
			//
	
			var colorBuffer = new ColorBuffer();
			var depthBuffer = new DepthBuffer();
			var stencilBuffer = new StencilBuffer();
	
			var maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			var newAttributes = new Uint8Array( maxVertexAttributes );
			var enabledAttributes = new Uint8Array( maxVertexAttributes );
			var attributeDivisors = new Uint8Array( maxVertexAttributes );
	
			var capabilities = {};
	
			var compressedTextureFormats = null;
	
			var currentProgram = null;
	
			var currentBlending = null;
			var currentBlendEquation = null;
			var currentBlendSrc = null;
			var currentBlendDst = null;
			var currentBlendEquationAlpha = null;
			var currentBlendSrcAlpha = null;
			var currentBlendDstAlpha = null;
			var currentPremultipledAlpha = false;
	
			var currentFlipSided = null;
			var currentCullFace = null;
	
			var currentLineWidth = null;
	
			var currentPolygonOffsetFactor = null;
			var currentPolygonOffsetUnits = null;
	
			var maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );
	
			var version = parseFloat( /^WebGL\ ([0-9])/.exec( gl.getParameter( gl.VERSION ) )[ 1 ] );
			var lineWidthAvailable = parseFloat( version ) >= 1.0;
	
			var currentTextureSlot = null;
			var currentBoundTextures = {};
	
			var currentScissor = new Vector4();
			var currentViewport = new Vector4();
	
			function createTexture( type, target, count ) {
	
				var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
				var texture = gl.createTexture();
	
				gl.bindTexture( type, texture );
				gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
				gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
	
				for ( var i = 0; i < count; i ++ ) {
	
					gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );
	
				}
	
				return texture;
	
			}
	
			var emptyTextures = {};
			emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
			emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );
	
			// init
	
			colorBuffer.setClear( 0, 0, 0, 1 );
			depthBuffer.setClear( 1 );
			stencilBuffer.setClear( 0 );
	
			enable( gl.DEPTH_TEST );
			depthBuffer.setFunc( LessEqualDepth );
	
			setFlipSided( false );
			setCullFace( CullFaceBack );
			enable( gl.CULL_FACE );
	
			enable( gl.BLEND );
			setBlending( NormalBlending );
	
			//
	
			function initAttributes() {
	
				for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {
	
					newAttributes[ i ] = 0;
	
				}
	
			}
	
			function enableAttribute( attribute ) {
	
				newAttributes[ attribute ] = 1;
	
				if ( enabledAttributes[ attribute ] === 0 ) {
	
					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;
	
				}
	
				if ( attributeDivisors[ attribute ] !== 0 ) {
	
					var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
					extension.vertexAttribDivisorANGLE( attribute, 0 );
					attributeDivisors[ attribute ] = 0;
	
				}
	
			}
	
			function enableAttributeAndDivisor( attribute, meshPerAttribute ) {
	
				newAttributes[ attribute ] = 1;
	
				if ( enabledAttributes[ attribute ] === 0 ) {
	
					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;
	
				}
	
				if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
	
					var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
					extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
					attributeDivisors[ attribute ] = meshPerAttribute;
	
				}
	
			}
	
			function disableUnusedAttributes() {
	
				for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {
	
					if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
	
						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;
	
					}
	
				}
	
			}
	
			function enable( id ) {
	
				if ( capabilities[ id ] !== true ) {
	
					gl.enable( id );
					capabilities[ id ] = true;
	
				}
	
			}
	
			function disable( id ) {
	
				if ( capabilities[ id ] !== false ) {
	
					gl.disable( id );
					capabilities[ id ] = false;
	
				}
	
			}
	
			function getCompressedTextureFormats() {
	
				if ( compressedTextureFormats === null ) {
	
					compressedTextureFormats = [];
	
					if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||
					     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {
	
						var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );
	
						for ( var i = 0; i < formats.length; i ++ ) {
	
							compressedTextureFormats.push( formats[ i ] );
	
						}
	
					}
	
				}
	
				return compressedTextureFormats;
	
			}
	
			function useProgram( program ) {
	
				if ( currentProgram !== program ) {
	
					gl.useProgram( program );
	
					currentProgram = program;
	
					return true;
	
				}
	
				return false;
	
			}
	
			function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
	
				if ( blending !== NoBlending ) {
	
					enable( gl.BLEND );
	
				} else {
	
					disable( gl.BLEND );
	
				}
	
				if ( blending !== CustomBlending ) {
	
					if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
	
						switch ( blending ) {
	
							case AdditiveBlending:
	
								if ( premultipliedAlpha ) {
	
									gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
									gl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );
	
								} else {
	
									gl.blendEquation( gl.FUNC_ADD );
									gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
	
								}
								break;
	
							case SubtractiveBlending:
	
								if ( premultipliedAlpha ) {
	
									gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
									gl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );
	
								} else {
	
									gl.blendEquation( gl.FUNC_ADD );
									gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );
	
								}
								break;
	
							case MultiplyBlending:
	
								if ( premultipliedAlpha ) {
	
									gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
									gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
	
								} else {
	
									gl.blendEquation( gl.FUNC_ADD );
									gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
	
								}
								break;
	
							default:
	
								if ( premultipliedAlpha ) {
	
									gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
									gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
	
								} else {
	
									gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
									gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
	
								}
	
						}
	
					}
	
					currentBlendEquation = null;
					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendEquationAlpha = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;
	
				} else {
	
					blendEquationAlpha = blendEquationAlpha || blendEquation;
					blendSrcAlpha = blendSrcAlpha || blendSrc;
					blendDstAlpha = blendDstAlpha || blendDst;
	
					if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
	
						gl.blendEquationSeparate( utils.convert( blendEquation ), utils.convert( blendEquationAlpha ) );
	
						currentBlendEquation = blendEquation;
						currentBlendEquationAlpha = blendEquationAlpha;
	
					}
	
					if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
	
						gl.blendFuncSeparate( utils.convert( blendSrc ), utils.convert( blendDst ), utils.convert( blendSrcAlpha ), utils.convert( blendDstAlpha ) );
	
						currentBlendSrc = blendSrc;
						currentBlendDst = blendDst;
						currentBlendSrcAlpha = blendSrcAlpha;
						currentBlendDstAlpha = blendDstAlpha;
	
					}
	
				}
	
				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;
	
			}
	
			function setMaterial( material ) {
	
				material.side === DoubleSide
					? disable( gl.CULL_FACE )
					: enable( gl.CULL_FACE );
	
				setFlipSided( material.side === BackSide );
	
				material.transparent === true
					? setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha )
					: setBlending( NoBlending );
	
				depthBuffer.setFunc( material.depthFunc );
				depthBuffer.setTest( material.depthTest );
				depthBuffer.setMask( material.depthWrite );
				colorBuffer.setMask( material.colorWrite );
	
				setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
	
			}
	
			//
	
			function setFlipSided( flipSided ) {
	
				if ( currentFlipSided !== flipSided ) {
	
					if ( flipSided ) {
	
						gl.frontFace( gl.CW );
	
					} else {
	
						gl.frontFace( gl.CCW );
	
					}
	
					currentFlipSided = flipSided;
	
				}
	
			}
	
			function setCullFace( cullFace ) {
	
				if ( cullFace !== CullFaceNone ) {
	
					enable( gl.CULL_FACE );
	
					if ( cullFace !== currentCullFace ) {
	
						if ( cullFace === CullFaceBack ) {
	
							gl.cullFace( gl.BACK );
	
						} else if ( cullFace === CullFaceFront ) {
	
							gl.cullFace( gl.FRONT );
	
						} else {
	
							gl.cullFace( gl.FRONT_AND_BACK );
	
						}
	
					}
	
				} else {
	
					disable( gl.CULL_FACE );
	
				}
	
				currentCullFace = cullFace;
	
			}
	
			function setLineWidth( width ) {
	
				if ( width !== currentLineWidth ) {
	
					if ( lineWidthAvailable ) gl.lineWidth( width );
	
					currentLineWidth = width;
	
				}
	
			}
	
			function setPolygonOffset( polygonOffset, factor, units ) {
	
				if ( polygonOffset ) {
	
					enable( gl.POLYGON_OFFSET_FILL );
	
					if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
	
						gl.polygonOffset( factor, units );
	
						currentPolygonOffsetFactor = factor;
						currentPolygonOffsetUnits = units;
	
					}
	
				} else {
	
					disable( gl.POLYGON_OFFSET_FILL );
	
				}
	
			}
	
			function setScissorTest( scissorTest ) {
	
				if ( scissorTest ) {
	
					enable( gl.SCISSOR_TEST );
	
				} else {
	
					disable( gl.SCISSOR_TEST );
	
				}
	
			}
	
			// texture
	
			function activeTexture( webglSlot ) {
	
				if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;
	
				if ( currentTextureSlot !== webglSlot ) {
	
					gl.activeTexture( webglSlot );
					currentTextureSlot = webglSlot;
	
				}
	
			}
	
			function bindTexture( webglType, webglTexture ) {
	
				if ( currentTextureSlot === null ) {
	
					activeTexture();
	
				}
	
				var boundTexture = currentBoundTextures[ currentTextureSlot ];
	
				if ( boundTexture === undefined ) {
	
					boundTexture = { type: undefined, texture: undefined };
					currentBoundTextures[ currentTextureSlot ] = boundTexture;
	
				}
	
				if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
	
					gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
	
					boundTexture.type = webglType;
					boundTexture.texture = webglTexture;
	
				}
	
			}
	
			function compressedTexImage2D() {
	
				try {
	
					gl.compressedTexImage2D.apply( gl, arguments );
	
				} catch ( error ) {
	
					console.error( 'THREE.WebGLState:', error );
	
				}
	
			}
	
			function texImage2D() {
	
				try {
	
					gl.texImage2D.apply( gl, arguments );
	
				} catch ( error ) {
	
					console.error( 'THREE.WebGLState:', error );
	
				}
	
			}
	
			//
	
			function scissor( scissor ) {
	
				if ( currentScissor.equals( scissor ) === false ) {
	
					gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
					currentScissor.copy( scissor );
	
				}
	
			}
	
			function viewport( viewport ) {
	
				if ( currentViewport.equals( viewport ) === false ) {
	
					gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
					currentViewport.copy( viewport );
	
				}
	
			}
	
			//
	
			function reset() {
	
				for ( var i = 0; i < enabledAttributes.length; i ++ ) {
	
					if ( enabledAttributes[ i ] === 1 ) {
	
						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;
	
					}
	
				}
	
				capabilities = {};
	
				compressedTextureFormats = null;
	
				currentTextureSlot = null;
				currentBoundTextures = {};
	
				currentProgram = null;
	
				currentBlending = null;
	
				currentFlipSided = null;
				currentCullFace = null;
	
				colorBuffer.reset();
				depthBuffer.reset();
				stencilBuffer.reset();
	
			}
	
			return {
	
				buffers: {
					color: colorBuffer,
					depth: depthBuffer,
					stencil: stencilBuffer
				},
	
				initAttributes: initAttributes,
				enableAttribute: enableAttribute,
				enableAttributeAndDivisor: enableAttributeAndDivisor,
				disableUnusedAttributes: disableUnusedAttributes,
				enable: enable,
				disable: disable,
				getCompressedTextureFormats: getCompressedTextureFormats,
	
				useProgram: useProgram,
	
				setBlending: setBlending,
				setMaterial: setMaterial,
	
				setFlipSided: setFlipSided,
				setCullFace: setCullFace,
	
				setLineWidth: setLineWidth,
				setPolygonOffset: setPolygonOffset,
	
				setScissorTest: setScissorTest,
	
				activeTexture: activeTexture,
				bindTexture: bindTexture,
				compressedTexImage2D: compressedTexImage2D,
				texImage2D: texImage2D,
	
				scissor: scissor,
				viewport: viewport,
	
				reset: reset
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLCapabilities( gl, extensions, parameters ) {
	
			var maxAnisotropy;
	
			function getMaxAnisotropy() {
	
				if ( maxAnisotropy !== undefined ) return maxAnisotropy;
	
				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
				if ( extension !== null ) {
	
					maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
	
				} else {
	
					maxAnisotropy = 0;
	
				}
	
				return maxAnisotropy;
	
			}
	
			function getMaxPrecision( precision ) {
	
				if ( precision === 'highp' ) {
	
					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {
	
						return 'highp';
	
					}
	
					precision = 'mediump';
	
				}
	
				if ( precision === 'mediump' ) {
	
					if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
					     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {
	
						return 'mediump';
	
					}
	
				}
	
				return 'lowp';
	
			}
	
			var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
			var maxPrecision = getMaxPrecision( precision );
	
			if ( maxPrecision !== precision ) {
	
				console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
				precision = maxPrecision;
	
			}
	
			var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
	
			var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
			var maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
			var maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
			var maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );
	
			var maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
			var maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
			var maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
			var maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );
	
			var vertexTextures = maxVertexTextures > 0;
			var floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
			var floatVertexTextures = vertexTextures && floatFragmentTextures;
	
			return {
	
				getMaxAnisotropy: getMaxAnisotropy,
				getMaxPrecision: getMaxPrecision,
	
				precision: precision,
				logarithmicDepthBuffer: logarithmicDepthBuffer,
	
				maxTextures: maxTextures,
				maxVertexTextures: maxVertexTextures,
				maxTextureSize: maxTextureSize,
				maxCubemapSize: maxCubemapSize,
	
				maxAttributes: maxAttributes,
				maxVertexUniforms: maxVertexUniforms,
				maxVaryings: maxVaryings,
				maxFragmentUniforms: maxFragmentUniforms,
	
				vertexTextures: vertexTextures,
				floatFragmentTextures: floatFragmentTextures,
				floatVertexTextures: floatVertexTextures
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author greggman / http://games.greggman.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author tschw
		 */
	
		function PerspectiveCamera( fov, aspect, near, far ) {
	
			Camera.call( this );
	
			this.type = 'PerspectiveCamera';
	
			this.fov = fov !== undefined ? fov : 50;
			this.zoom = 1;
	
			this.near = near !== undefined ? near : 0.1;
			this.far = far !== undefined ? far : 2000;
			this.focus = 10;
	
			this.aspect = aspect !== undefined ? aspect : 1;
			this.view = null;
	
			this.filmGauge = 35;	// width of the film (default in millimeters)
			this.filmOffset = 0;	// horizontal film offset (same unit as gauge)
	
			this.updateProjectionMatrix();
	
		}
	
		PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
	
			constructor: PerspectiveCamera,
	
			isPerspectiveCamera: true,
	
			copy: function ( source, recursive ) {
	
				Camera.prototype.copy.call( this, source, recursive );
	
				this.fov = source.fov;
				this.zoom = source.zoom;
	
				this.near = source.near;
				this.far = source.far;
				this.focus = source.focus;
	
				this.aspect = source.aspect;
				this.view = source.view === null ? null : Object.assign( {}, source.view );
	
				this.filmGauge = source.filmGauge;
				this.filmOffset = source.filmOffset;
	
				return this;
	
			},
	
			/**
			 * Sets the FOV by focal length in respect to the current .filmGauge.
			 *
			 * The default film gauge is 35, so that the focal length can be specified for
			 * a 35mm (full frame) camera.
			 *
			 * Values for focal length and film gauge must have the same unit.
			 */
			setFocalLength: function ( focalLength ) {
	
				// see http://www.bobatkins.com/photography/technical/field_of_view.html
				var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
	
				this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
				this.updateProjectionMatrix();
	
			},
	
			/**
			 * Calculates the focal length from the current .fov and .filmGauge.
			 */
			getFocalLength: function () {
	
				var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );
	
				return 0.5 * this.getFilmHeight() / vExtentSlope;
	
			},
	
			getEffectiveFOV: function () {
	
				return _Math.RAD2DEG * 2 * Math.atan(
					Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );
	
			},
	
			getFilmWidth: function () {
	
				// film not completely covered in portrait format (aspect < 1)
				return this.filmGauge * Math.min( this.aspect, 1 );
	
			},
	
			getFilmHeight: function () {
	
				// film not completely covered in landscape format (aspect > 1)
				return this.filmGauge / Math.max( this.aspect, 1 );
	
			},
	
			/**
			 * Sets an offset in a larger frustum. This is useful for multi-window or
			 * multi-monitor/multi-machine setups.
			 *
			 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
			 * the monitors are in grid like this
			 *
			 *   +---+---+---+
			 *   | A | B | C |
			 *   +---+---+---+
			 *   | D | E | F |
			 *   +---+---+---+
			 *
			 * then for each monitor you would call it like this
			 *
			 *   var w = 1920;
			 *   var h = 1080;
			 *   var fullWidth = w * 3;
			 *   var fullHeight = h * 2;
			 *
			 *   --A--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
			 *   --B--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
			 *   --C--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
			 *   --D--
			 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
			 *   --E--
			 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
			 *   --F--
			 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
			 *
			 *   Note there is no reason monitors have to be the same size or in a grid.
			 */
			setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
	
				this.aspect = fullWidth / fullHeight;
	
				if ( this.view === null ) {
	
					this.view = {
						enabled: true,
						fullWidth: 1,
						fullHeight: 1,
						offsetX: 0,
						offsetY: 0,
						width: 1,
						height: 1
					};
	
				}
	
				this.view.enabled = true;
				this.view.fullWidth = fullWidth;
				this.view.fullHeight = fullHeight;
				this.view.offsetX = x;
				this.view.offsetY = y;
				this.view.width = width;
				this.view.height = height;
	
				this.updateProjectionMatrix();
	
			},
	
			clearViewOffset: function () {
	
				if ( this.view !== null ) {
	
					this.view.enabled = false;
	
				}
	
				this.updateProjectionMatrix();
	
			},
	
			updateProjectionMatrix: function () {
	
				var near = this.near,
					top = near * Math.tan(
						_Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
					height = 2 * top,
					width = this.aspect * height,
					left = - 0.5 * width,
					view = this.view;
	
				if ( this.view !== null && this.view.enabled ) {
	
					var fullWidth = view.fullWidth,
						fullHeight = view.fullHeight;
	
					left += view.offsetX * width / fullWidth;
					top -= view.offsetY * height / fullHeight;
					width *= view.width / fullWidth;
					height *= view.height / fullHeight;
	
				}
	
				var skew = this.filmOffset;
				if ( skew !== 0 ) left += near * skew / this.getFilmWidth();
	
				this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.fov = this.fov;
				data.object.zoom = this.zoom;
	
				data.object.near = this.near;
				data.object.far = this.far;
				data.object.focus = this.focus;
	
				data.object.aspect = this.aspect;
	
				if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );
	
				data.object.filmGauge = this.filmGauge;
				data.object.filmOffset = this.filmOffset;
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ArrayCamera( array ) {
	
			PerspectiveCamera.call( this );
	
			this.cameras = array || [];
	
		}
	
		ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {
	
			constructor: ArrayCamera,
	
			isArrayCamera: true
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebVRManager( renderer ) {
	
			var scope = this;
	
			var device = null;
			var frameData = null;
	
			if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {
	
				frameData = new window.VRFrameData();
	
			}
	
			var matrixWorldInverse = new Matrix4();
	
			var standingMatrix = new Matrix4();
			var standingMatrixInverse = new Matrix4();
	
			var cameraL = new PerspectiveCamera();
			cameraL.bounds = new Vector4( 0.0, 0.0, 0.5, 1.0 );
			cameraL.layers.enable( 1 );
	
			var cameraR = new PerspectiveCamera();
			cameraR.bounds = new Vector4( 0.5, 0.0, 0.5, 1.0 );
			cameraR.layers.enable( 2 );
	
			var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
			cameraVR.layers.enable( 1 );
			cameraVR.layers.enable( 2 );
	
			//
	
			var currentSize, currentPixelRatio;
	
			function onVRDisplayPresentChange() {
	
				if ( device !== null && device.isPresenting ) {
	
					var eyeParameters = device.getEyeParameters( 'left' );
					var renderWidth = eyeParameters.renderWidth;
					var renderHeight = eyeParameters.renderHeight;
	
					currentPixelRatio = renderer.getPixelRatio();
					currentSize = renderer.getSize();
	
					renderer.setDrawingBufferSize( renderWidth * 2, renderHeight, 1 );
	
				} else if ( scope.enabled ) {
	
					renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );
	
				}
	
			}
	
			if ( typeof window !== 'undefined' ) {
	
				window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );
	
			}
	
			//
	
			this.enabled = false;
			this.standing = false;
	
			this.getDevice = function () {
	
				return device;
	
			};
	
			this.setDevice = function ( value ) {
	
				if ( value !== undefined ) device = value;
	
			};
	
			this.getCamera = function ( camera ) {
	
				if ( device === null ) return camera;
	
				device.depthNear = camera.near;
				device.depthFar = camera.far;
	
				device.getFrameData( frameData );
	
				//
	
				var pose = frameData.pose;
	
				if ( pose.position !== null ) {
	
					camera.position.fromArray( pose.position );
	
				} else {
	
					camera.position.set( 0, 0, 0 );
	
				}
	
				if ( pose.orientation !== null ) {
	
					camera.quaternion.fromArray( pose.orientation );
	
				}
	
				camera.updateMatrixWorld();
	
				var stageParameters = device.stageParameters;
	
				if ( this.standing && stageParameters ) {
	
					standingMatrix.fromArray( stageParameters.sittingToStandingTransform );
					standingMatrixInverse.getInverse( standingMatrix );
	
					camera.matrixWorld.multiply( standingMatrix );
					camera.matrixWorldInverse.multiply( standingMatrixInverse );
	
				}
	
				if ( device.isPresenting === false ) return camera;
	
				//
	
				cameraL.near = camera.near;
				cameraR.near = camera.near;
	
				cameraL.far = camera.far;
				cameraR.far = camera.far;
	
				cameraVR.matrixWorld.copy( camera.matrixWorld );
				cameraVR.matrixWorldInverse.copy( camera.matrixWorldInverse );
	
				cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
				cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );
	
				if ( this.standing && stageParameters ) {
	
					cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
					cameraR.matrixWorldInverse.multiply( standingMatrixInverse );
	
				}
	
				var parent = camera.parent;
	
				if ( parent !== null ) {
	
					matrixWorldInverse.getInverse( parent.matrixWorld );
	
					cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
					cameraR.matrixWorldInverse.multiply( matrixWorldInverse );
	
				}
	
				// envMap and Mirror needs camera.matrixWorld
	
				cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
				cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );
	
				cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
				cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );
	
				// HACK @mrdoob
				// https://github.com/w3c/webvr/issues/203
	
				cameraVR.projectionMatrix.copy( cameraL.projectionMatrix );
	
				//
	
				var layers = device.getLayers();
	
				if ( layers.length ) {
	
					var layer = layers[ 0 ];
	
					if ( layer.leftBounds !== null && layer.leftBounds.length === 4 ) {
	
						cameraL.bounds.fromArray( layer.leftBounds );
	
					}
	
					if ( layer.rightBounds !== null && layer.rightBounds.length === 4 ) {
	
						cameraR.bounds.fromArray( layer.rightBounds );
	
					}
	
				}
	
				return cameraVR;
	
			};
	
			this.getStandingMatrix = function () {
	
				return standingMatrix;
	
			};
	
			this.submitFrame = function () {
	
				if ( device && device.isPresenting ) device.submitFrame();
	
			};
	
			this.dispose = function () {
	
				if ( typeof window !== 'undefined' ) {
	
					window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );
	
				}
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLExtensions( gl ) {
	
			var extensions = {};
	
			return {
	
				get: function ( name ) {
	
					if ( extensions[ name ] !== undefined ) {
	
						return extensions[ name ];
	
					}
	
					var extension;
	
					switch ( name ) {
	
						case 'WEBGL_depth_texture':
							extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
							break;
	
						case 'EXT_texture_filter_anisotropic':
							extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
							break;
	
						case 'WEBGL_compressed_texture_s3tc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
							break;
	
						case 'WEBGL_compressed_texture_pvrtc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
							break;
	
						case 'WEBGL_compressed_texture_etc1':
							extension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );
							break;
	
						default:
							extension = gl.getExtension( name );
	
					}
	
					if ( extension === null ) {
	
						console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
	
					}
	
					extensions[ name ] = extension;
	
					return extension;
	
				}
	
			};
	
		}
	
		/**
		 * @author tschw
		 */
	
		function WebGLClipping() {
	
			var scope = this,
	
				globalState = null,
				numGlobalPlanes = 0,
				localClippingEnabled = false,
				renderingShadows = false,
	
				plane = new Plane(),
				viewNormalMatrix = new Matrix3(),
	
				uniform = { value: null, needsUpdate: false };
	
			this.uniform = uniform;
			this.numPlanes = 0;
			this.numIntersection = 0;
	
			this.init = function ( planes, enableLocalClipping, camera ) {
	
				var enabled =
					planes.length !== 0 ||
					enableLocalClipping ||
					// enable state of previous frame - the clipping code has to
					// run another frame in order to reset the state:
					numGlobalPlanes !== 0 ||
					localClippingEnabled;
	
				localClippingEnabled = enableLocalClipping;
	
				globalState = projectPlanes( planes, camera, 0 );
				numGlobalPlanes = planes.length;
	
				return enabled;
	
			};
	
			this.beginShadows = function () {
	
				renderingShadows = true;
				projectPlanes( null );
	
			};
	
			this.endShadows = function () {
	
				renderingShadows = false;
				resetGlobalState();
	
			};
	
			this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {
	
				if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {
	
					// there's no local clipping
	
					if ( renderingShadows ) {
	
						// there's no global clipping
	
						projectPlanes( null );
	
					} else {
	
						resetGlobalState();
	
					}
	
				} else {
	
					var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
						lGlobal = nGlobal * 4,
	
						dstArray = cache.clippingState || null;
	
					uniform.value = dstArray; // ensure unique state
	
					dstArray = projectPlanes( planes, camera, lGlobal, fromCache );
	
					for ( var i = 0; i !== lGlobal; ++ i ) {
	
						dstArray[ i ] = globalState[ i ];
	
					}
	
					cache.clippingState = dstArray;
					this.numIntersection = clipIntersection ? this.numPlanes : 0;
					this.numPlanes += nGlobal;
	
				}
	
	
			};
	
			function resetGlobalState() {
	
				if ( uniform.value !== globalState ) {
	
					uniform.value = globalState;
					uniform.needsUpdate = numGlobalPlanes > 0;
	
				}
	
				scope.numPlanes = numGlobalPlanes;
				scope.numIntersection = 0;
	
			}
	
			function projectPlanes( planes, camera, dstOffset, skipTransform ) {
	
				var nPlanes = planes !== null ? planes.length : 0,
					dstArray = null;
	
				if ( nPlanes !== 0 ) {
	
					dstArray = uniform.value;
	
					if ( skipTransform !== true || dstArray === null ) {
	
						var flatSize = dstOffset + nPlanes * 4,
							viewMatrix = camera.matrixWorldInverse;
	
						viewNormalMatrix.getNormalMatrix( viewMatrix );
	
						if ( dstArray === null || dstArray.length < flatSize ) {
	
							dstArray = new Float32Array( flatSize );
	
						}
	
						for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {
	
							plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );
	
							plane.normal.toArray( dstArray, i4 );
							dstArray[ i4 + 3 ] = plane.constant;
	
						}
	
					}
	
					uniform.value = dstArray;
					uniform.needsUpdate = true;
	
				}
	
				scope.numPlanes = nPlanes;
	
				return dstArray;
	
			}
	
		}
	
		/**
		 * @author thespite / http://www.twitter.com/thespite
		 */
	
		function WebGLUtils( gl, extensions ) {
	
			function convert( p ) {
	
				var extension;
	
				if ( p === RepeatWrapping ) return gl.REPEAT;
				if ( p === ClampToEdgeWrapping ) return gl.CLAMP_TO_EDGE;
				if ( p === MirroredRepeatWrapping ) return gl.MIRRORED_REPEAT;
	
				if ( p === NearestFilter ) return gl.NEAREST;
				if ( p === NearestMipMapNearestFilter ) return gl.NEAREST_MIPMAP_NEAREST;
				if ( p === NearestMipMapLinearFilter ) return gl.NEAREST_MIPMAP_LINEAR;
	
				if ( p === LinearFilter ) return gl.LINEAR;
				if ( p === LinearMipMapNearestFilter ) return gl.LINEAR_MIPMAP_NEAREST;
				if ( p === LinearMipMapLinearFilter ) return gl.LINEAR_MIPMAP_LINEAR;
	
				if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
				if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
				if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;
				if ( p === UnsignedShort565Type ) return gl.UNSIGNED_SHORT_5_6_5;
	
				if ( p === ByteType ) return gl.BYTE;
				if ( p === ShortType ) return gl.SHORT;
				if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
				if ( p === IntType ) return gl.INT;
				if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
				if ( p === FloatType ) return gl.FLOAT;
	
				if ( p === HalfFloatType ) {
	
					extension = extensions.get( 'OES_texture_half_float' );
	
					if ( extension !== null ) return extension.HALF_FLOAT_OES;
	
				}
	
				if ( p === AlphaFormat ) return gl.ALPHA;
				if ( p === RGBFormat ) return gl.RGB;
				if ( p === RGBAFormat ) return gl.RGBA;
				if ( p === LuminanceFormat ) return gl.LUMINANCE;
				if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
				if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
				if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;
	
				if ( p === AddEquation ) return gl.FUNC_ADD;
				if ( p === SubtractEquation ) return gl.FUNC_SUBTRACT;
				if ( p === ReverseSubtractEquation ) return gl.FUNC_REVERSE_SUBTRACT;
	
				if ( p === ZeroFactor ) return gl.ZERO;
				if ( p === OneFactor ) return gl.ONE;
				if ( p === SrcColorFactor ) return gl.SRC_COLOR;
				if ( p === OneMinusSrcColorFactor ) return gl.ONE_MINUS_SRC_COLOR;
				if ( p === SrcAlphaFactor ) return gl.SRC_ALPHA;
				if ( p === OneMinusSrcAlphaFactor ) return gl.ONE_MINUS_SRC_ALPHA;
				if ( p === DstAlphaFactor ) return gl.DST_ALPHA;
				if ( p === OneMinusDstAlphaFactor ) return gl.ONE_MINUS_DST_ALPHA;
	
				if ( p === DstColorFactor ) return gl.DST_COLOR;
				if ( p === OneMinusDstColorFactor ) return gl.ONE_MINUS_DST_COLOR;
				if ( p === SrcAlphaSaturateFactor ) return gl.SRC_ALPHA_SATURATE;
	
				if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
					p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
	
					if ( extension !== null ) {
	
						if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
						if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
	
					}
	
				}
	
				if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
					p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	
					if ( extension !== null ) {
	
						if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
						if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
						if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
						if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
	
					}
	
				}
	
				if ( p === RGB_ETC1_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
	
					if ( extension !== null ) return extension.COMPRESSED_RGB_ETC1_WEBGL;
	
				}
	
				if ( p === MinEquation || p === MaxEquation ) {
	
					extension = extensions.get( 'EXT_blend_minmax' );
	
					if ( extension !== null ) {
	
						if ( p === MinEquation ) return extension.MIN_EXT;
						if ( p === MaxEquation ) return extension.MAX_EXT;
	
					}
	
				}
	
				if ( p === UnsignedInt248Type ) {
	
					extension = extensions.get( 'WEBGL_depth_texture' );
	
					if ( extension !== null ) return extension.UNSIGNED_INT_24_8_WEBGL;
	
				}
	
				return 0;
	
			}
	
			return { convert: convert };
	
		}
	
		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 * @author tschw
		 */
	
		function WebGLRenderer( parameters ) {
	
			console.log( 'THREE.WebGLRenderer', REVISION );
	
			parameters = parameters || {};
	
			var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
				_context = parameters.context !== undefined ? parameters.context : null,
	
				_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
				_depth = parameters.depth !== undefined ? parameters.depth : true,
				_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
				_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
				_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
				_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;
	
			var lightsArray = [];
			var shadowsArray = [];
	
			var currentRenderList = null;
	
			var spritesArray = [];
			var flaresArray = [];
	
			// public properties
	
			this.domElement = _canvas;
			this.context = null;
	
			// clearing
	
			this.autoClear = true;
			this.autoClearColor = true;
			this.autoClearDepth = true;
			this.autoClearStencil = true;
	
			// scene graph
	
			this.sortObjects = true;
	
			// user-defined clipping
	
			this.clippingPlanes = [];
			this.localClippingEnabled = false;
	
			// physically based shading
	
			this.gammaFactor = 2.0;	// for backwards compatibility
			this.gammaInput = false;
			this.gammaOutput = false;
	
			// physical lights
	
			this.physicallyCorrectLights = false;
	
			// tone mapping
	
			this.toneMapping = LinearToneMapping;
			this.toneMappingExposure = 1.0;
			this.toneMappingWhitePoint = 1.0;
	
			// morphs
	
			this.maxMorphTargets = 8;
			this.maxMorphNormals = 4;
	
			// internal properties
	
			var _this = this,
	
				_isContextLost = false,
	
				// internal state cache
	
				_currentRenderTarget = null,
				_currentFramebuffer = null,
				_currentMaterialId = - 1,
				_currentGeometryProgram = '',
	
				_currentCamera = null,
				_currentArrayCamera = null,
	
				_currentViewport = new Vector4(),
				_currentScissor = new Vector4(),
				_currentScissorTest = null,
	
				//
	
				_usedTextureUnits = 0,
	
				//
	
				_width = _canvas.width,
				_height = _canvas.height,
	
				_pixelRatio = 1,
	
				_viewport = new Vector4( 0, 0, _width, _height ),
				_scissor = new Vector4( 0, 0, _width, _height ),
				_scissorTest = false,
	
				// frustum
	
				_frustum = new Frustum(),
	
				// clipping
	
				_clipping = new WebGLClipping(),
				_clippingEnabled = false,
				_localClippingEnabled = false,
	
				// camera matrices cache
	
				_projScreenMatrix = new Matrix4(),
	
				_vector3 = new Vector3(),
	
				// info
	
				_infoMemory = {
					geometries: 0,
					textures: 0
				},
	
				_infoRender = {
	
					frame: 0,
					calls: 0,
					vertices: 0,
					faces: 0,
					points: 0
	
				};
	
			this.info = {
	
				render: _infoRender,
				memory: _infoMemory,
				programs: null
	
			};
	
			function getTargetPixelRatio() {
	
				return _currentRenderTarget === null ? _pixelRatio : 1;
	
			}
	
			// initialize
	
			var _gl;
	
			try {
	
				var contextAttributes = {
					alpha: _alpha,
					depth: _depth,
					stencil: _stencil,
					antialias: _antialias,
					premultipliedAlpha: _premultipliedAlpha,
					preserveDrawingBuffer: _preserveDrawingBuffer
				};
	
				_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );
	
				if ( _gl === null ) {
	
					if ( _canvas.getContext( 'webgl' ) !== null ) {
	
						throw 'Error creating WebGL context with your selected attributes.';
	
					} else {
	
						throw 'Error creating WebGL context.';
	
					}
	
				}
	
				// Some experimental-webgl implementations do not have getShaderPrecisionFormat
	
				if ( _gl.getShaderPrecisionFormat === undefined ) {
	
					_gl.getShaderPrecisionFormat = function () {
	
						return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
	
					};
	
				}
	
				_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
				_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
	
			} catch ( error ) {
	
				console.error( 'THREE.WebGLRenderer: ' + error );
	
			}
	
			var extensions, capabilities, state;
			var properties, textures, attributes, geometries, objects, lights;
			var programCache, renderLists;
	
			var background, morphtargets, bufferRenderer, indexedBufferRenderer;
			var flareRenderer, spriteRenderer;
	
			var utils;
	
			function initGLContext() {
	
				extensions = new WebGLExtensions( _gl );
				extensions.get( 'WEBGL_depth_texture' );
				extensions.get( 'OES_texture_float' );
				extensions.get( 'OES_texture_float_linear' );
				extensions.get( 'OES_texture_half_float' );
				extensions.get( 'OES_texture_half_float_linear' );
				extensions.get( 'OES_standard_derivatives' );
				extensions.get( 'OES_element_index_uint' );
				extensions.get( 'ANGLE_instanced_arrays' );
	
				utils = new WebGLUtils( _gl, extensions );
	
				capabilities = new WebGLCapabilities( _gl, extensions, parameters );
	
				state = new WebGLState( _gl, extensions, utils );
				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );
	
				properties = new WebGLProperties();
				textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, _infoMemory );
				attributes = new WebGLAttributes( _gl );
				geometries = new WebGLGeometries( _gl, attributes, _infoMemory );
				objects = new WebGLObjects( geometries, _infoRender );
				morphtargets = new WebGLMorphtargets( _gl );
				programCache = new WebGLPrograms( _this, extensions, capabilities );
				lights = new WebGLLights();
				renderLists = new WebGLRenderLists();
	
				background = new WebGLBackground( _this, state, geometries, _premultipliedAlpha );
	
				bufferRenderer = new WebGLBufferRenderer( _gl, extensions, _infoRender );
				indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );
	
				flareRenderer = new WebGLFlareRenderer( _this, _gl, state, textures, capabilities );
				spriteRenderer = new WebGLSpriteRenderer( _this, _gl, state, textures, capabilities );
	
				_this.info.programs = programCache.programs;
	
				_this.context = _gl;
				_this.capabilities = capabilities;
				_this.extensions = extensions;
				_this.properties = properties;
				_this.renderLists = renderLists;
				_this.state = state;
	
			}
	
			initGLContext();
	
			// vr
	
			var vr = new WebVRManager( _this );
	
			this.vr = vr;
	
			// shadow map
	
			var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );
	
			this.shadowMap = shadowMap;
	
			// API
	
			this.getContext = function () {
	
				return _gl;
	
			};
	
			this.getContextAttributes = function () {
	
				return _gl.getContextAttributes();
	
			};
	
			this.forceContextLoss = function () {
	
				var extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) extension.loseContext();
	
			};
	
			this.forceContextRestore = function () {
	
				var extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) extension.restoreContext();
	
			};
	
			this.getPixelRatio = function () {
	
				return _pixelRatio;
	
			};
	
			this.setPixelRatio = function ( value ) {
	
				if ( value === undefined ) return;
	
				_pixelRatio = value;
	
				this.setSize( _width, _height, false );
	
			};
	
			this.getSize = function () {
	
				return {
					width: _width,
					height: _height
				};
	
			};
	
			this.setSize = function ( width, height, updateStyle ) {
	
				var device = vr.getDevice();
	
				if ( device && device.isPresenting ) {
	
					console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
					return;
	
				}
	
				_width = width;
				_height = height;
	
				_canvas.width = width * _pixelRatio;
				_canvas.height = height * _pixelRatio;
	
				if ( updateStyle !== false ) {
	
					_canvas.style.width = width + 'px';
					_canvas.style.height = height + 'px';
	
				}
	
				this.setViewport( 0, 0, width, height );
	
			};
	
			this.getDrawingBufferSize = function () {
	
				return {
					width: _width * _pixelRatio,
					height: _height * _pixelRatio
				};
	
			};
	
			this.setDrawingBufferSize = function ( width, height, pixelRatio ) {
	
				_width = width;
				_height = height;
	
				_pixelRatio = pixelRatio;
	
				_canvas.width = width * pixelRatio;
				_canvas.height = height * pixelRatio;
	
				this.setViewport( 0, 0, width, height );
	
			};
	
			this.setViewport = function ( x, y, width, height ) {
	
				_viewport.set( x, _height - y - height, width, height );
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );
	
			};
	
			this.setScissor = function ( x, y, width, height ) {
	
				_scissor.set( x, _height - y - height, width, height );
				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );
	
			};
	
			this.setScissorTest = function ( boolean ) {
	
				state.setScissorTest( _scissorTest = boolean );
	
			};
	
			// Clearing
	
			this.getClearColor = function () {
	
				return background.getClearColor();
	
			};
	
			this.setClearColor = function () {
	
				background.setClearColor.apply( background, arguments );
	
			};
	
			this.getClearAlpha = function () {
	
				return background.getClearAlpha();
	
			};
	
			this.setClearAlpha = function () {
	
				background.setClearAlpha.apply( background, arguments );
	
			};
	
			this.clear = function ( color, depth, stencil ) {
	
				var bits = 0;
	
				if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
				if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
				if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;
	
				_gl.clear( bits );
	
			};
	
			this.clearColor = function () {
	
				this.clear( true, false, false );
	
			};
	
			this.clearDepth = function () {
	
				this.clear( false, true, false );
	
			};
	
			this.clearStencil = function () {
	
				this.clear( false, false, true );
	
			};
	
			this.clearTarget = function ( renderTarget, color, depth, stencil ) {
	
				this.setRenderTarget( renderTarget );
				this.clear( color, depth, stencil );
	
			};
	
			//
	
			this.dispose = function () {
	
				_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
				_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
	
				renderLists.dispose();
	
				vr.dispose();
	
			};
	
			// Events
	
			function onContextLost( event ) {
	
				event.preventDefault();
	
				console.log( 'THREE.WebGLRenderer: Context Lost.' );
	
				_isContextLost = true;
	
			}
	
			function onContextRestore( /* event */ ) {
	
				console.log( 'THREE.WebGLRenderer: Context Restored.' );
	
				_isContextLost = false;
	
				initGLContext();
	
			}
	
			function onMaterialDispose( event ) {
	
				var material = event.target;
	
				material.removeEventListener( 'dispose', onMaterialDispose );
	
				deallocateMaterial( material );
	
			}
	
			// Buffer deallocation
	
			function deallocateMaterial( material ) {
	
				releaseMaterialProgramReference( material );
	
				properties.remove( material );
	
			}
	
	
			function releaseMaterialProgramReference( material ) {
	
				var programInfo = properties.get( material ).program;
	
				material.program = undefined;
	
				if ( programInfo !== undefined ) {
	
					programCache.releaseProgram( programInfo );
	
				}
	
			}
	
			// Buffer rendering
	
			function renderObjectImmediate( object, program, material ) {
	
				object.render( function ( object ) {
	
					_this.renderBufferImmediate( object, program, material );
	
				} );
	
			}
	
			this.renderBufferImmediate = function ( object, program, material ) {
	
				state.initAttributes();
	
				var buffers = properties.get( object );
	
				if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
				if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
				if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
				if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();
	
				var programAttributes = program.getAttributes();
	
				if ( object.hasPositions ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( programAttributes.position );
					_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );
	
				}
	
				if ( object.hasNormals ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );
	
					if ( ! material.isMeshPhongMaterial &&
						! material.isMeshStandardMaterial &&
						! material.isMeshNormalMaterial &&
						material.flatShading === true ) {
	
						for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {
	
							var array = object.normalArray;
	
							var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
							var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
							var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;
	
							array[ i + 0 ] = nx;
							array[ i + 1 ] = ny;
							array[ i + 2 ] = nz;
	
							array[ i + 3 ] = nx;
							array[ i + 4 ] = ny;
							array[ i + 5 ] = nz;
	
							array[ i + 6 ] = nx;
							array[ i + 7 ] = ny;
							array[ i + 8 ] = nz;
	
						}
	
					}
	
					_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( programAttributes.normal );
	
					_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );
	
				}
	
				if ( object.hasUvs && material.map ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( programAttributes.uv );
	
					_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );
	
				}
	
				if ( object.hasColors && material.vertexColors !== NoColors ) {
	
					_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
					_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
	
					state.enableAttribute( programAttributes.color );
	
					_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );
	
				}
	
				state.disableUnusedAttributes();
	
				_gl.drawArrays( _gl.TRIANGLES, 0, object.count );
	
				object.count = 0;
	
			};
	
			this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {
	
				state.setMaterial( material );
	
				var program = setProgram( camera, fog, material, object );
				var geometryProgram = geometry.id + '_' + program.id + '_' + ( material.wireframe === true );
	
				var updateBuffers = false;
	
				if ( geometryProgram !== _currentGeometryProgram ) {
	
					_currentGeometryProgram = geometryProgram;
					updateBuffers = true;
	
				}
	
				if ( object.morphTargetInfluences ) {
	
					morphtargets.update( object, geometry, material, program );
	
					updateBuffers = true;
	
				}
	
				//
	
				var index = geometry.index;
				var position = geometry.attributes.position;
				var rangeFactor = 1;
	
				if ( material.wireframe === true ) {
	
					index = geometries.getWireframeAttribute( geometry );
					rangeFactor = 2;
	
				}
	
				var attribute;
				var renderer = bufferRenderer;
	
				if ( index !== null ) {
	
					attribute = attributes.get( index );
	
					renderer = indexedBufferRenderer;
					renderer.setIndex( attribute );
	
				}
	
				if ( updateBuffers ) {
	
					setupVertexAttributes( material, program, geometry );
	
					if ( index !== null ) {
	
						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );
	
					}
	
				}
	
				//
	
				var dataCount = 0;
	
				if ( index !== null ) {
	
					dataCount = index.count;
	
				} else if ( position !== undefined ) {
	
					dataCount = position.count;
	
				}
	
				var rangeStart = geometry.drawRange.start * rangeFactor;
				var rangeCount = geometry.drawRange.count * rangeFactor;
	
				var groupStart = group !== null ? group.start * rangeFactor : 0;
				var groupCount = group !== null ? group.count * rangeFactor : Infinity;
	
				var drawStart = Math.max( rangeStart, groupStart );
				var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
	
				var drawCount = Math.max( 0, drawEnd - drawStart + 1 );
	
				if ( drawCount === 0 ) return;
	
				//
	
				if ( object.isMesh ) {
	
					if ( material.wireframe === true ) {
	
						state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
						renderer.setMode( _gl.LINES );
	
					} else {
	
						switch ( object.drawMode ) {
	
							case TrianglesDrawMode:
								renderer.setMode( _gl.TRIANGLES );
								break;
	
							case TriangleStripDrawMode:
								renderer.setMode( _gl.TRIANGLE_STRIP );
								break;
	
							case TriangleFanDrawMode:
								renderer.setMode( _gl.TRIANGLE_FAN );
								break;
	
						}
	
					}
	
	
				} else if ( object.isLine ) {
	
					var lineWidth = material.linewidth;
	
					if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material
	
					state.setLineWidth( lineWidth * getTargetPixelRatio() );
	
					if ( object.isLineSegments ) {
	
						renderer.setMode( _gl.LINES );
	
					} else if ( object.isLineLoop ) {
	
						renderer.setMode( _gl.LINE_LOOP );
	
					} else {
	
						renderer.setMode( _gl.LINE_STRIP );
	
					}
	
				} else if ( object.isPoints ) {
	
					renderer.setMode( _gl.POINTS );
	
				}
	
				if ( geometry && geometry.isInstancedBufferGeometry ) {
	
					if ( geometry.maxInstancedCount > 0 ) {
	
						renderer.renderInstances( geometry, drawStart, drawCount );
	
					}
	
				} else {
	
					renderer.render( drawStart, drawCount );
	
				}
	
			};
	
			function setupVertexAttributes( material, program, geometry, startIndex ) {
	
				if ( geometry && geometry.isInstancedBufferGeometry ) {
	
					if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) {
	
						console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
						return;
	
					}
	
				}
	
				if ( startIndex === undefined ) startIndex = 0;
	
				state.initAttributes();
	
				var geometryAttributes = geometry.attributes;
	
				var programAttributes = program.getAttributes();
	
				var materialDefaultAttributeValues = material.defaultAttributeValues;
	
				for ( var name in programAttributes ) {
	
					var programAttribute = programAttributes[ name ];
	
					if ( programAttribute >= 0 ) {
	
						var geometryAttribute = geometryAttributes[ name ];
	
						if ( geometryAttribute !== undefined ) {
	
							var normalized = geometryAttribute.normalized;
							var size = geometryAttribute.itemSize;
	
							var attribute = attributes.get( geometryAttribute );
	
							// TODO Attribute may not be available on context restore
	
							if ( attribute === undefined ) continue;
	
							var buffer = attribute.buffer;
							var type = attribute.type;
							var bytesPerElement = attribute.bytesPerElement;
	
							if ( geometryAttribute.isInterleavedBufferAttribute ) {
	
								var data = geometryAttribute.data;
								var stride = data.stride;
								var offset = geometryAttribute.offset;
	
								if ( data && data.isInstancedInterleavedBuffer ) {
	
									state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );
	
									if ( geometry.maxInstancedCount === undefined ) {
	
										geometry.maxInstancedCount = data.meshPerAttribute * data.count;
	
									}
	
								} else {
	
									state.enableAttribute( programAttribute );
	
								}
	
								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, ( startIndex * stride + offset ) * bytesPerElement );
	
							} else {
	
								if ( geometryAttribute.isInstancedBufferAttribute ) {
	
									state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );
	
									if ( geometry.maxInstancedCount === undefined ) {
	
										geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
	
									}
	
								} else {
	
									state.enableAttribute( programAttribute );
	
								}
	
								_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * bytesPerElement );
	
							}
	
						} else if ( materialDefaultAttributeValues !== undefined ) {
	
							var value = materialDefaultAttributeValues[ name ];
	
							if ( value !== undefined ) {
	
								switch ( value.length ) {
	
									case 2:
										_gl.vertexAttrib2fv( programAttribute, value );
										break;
	
									case 3:
										_gl.vertexAttrib3fv( programAttribute, value );
										break;
	
									case 4:
										_gl.vertexAttrib4fv( programAttribute, value );
										break;
	
									default:
										_gl.vertexAttrib1fv( programAttribute, value );
	
								}
	
							}
	
						}
	
					}
	
				}
	
				state.disableUnusedAttributes();
	
			}
	
			// Compile
	
			this.compile = function ( scene, camera ) {
	
				lightsArray.length = 0;
				shadowsArray.length = 0;
	
				scene.traverse( function ( object ) {
	
					if ( object.isLight ) {
	
						lightsArray.push( object );
	
						if ( object.castShadow ) {
	
							shadowsArray.push( object );
	
						}
	
					}
	
				} );
	
				lights.setup( lightsArray, shadowsArray, camera );
	
				scene.traverse( function ( object ) {
	
					if ( object.material ) {
	
						if ( Array.isArray( object.material ) ) {
	
							for ( var i = 0; i < object.material.length; i ++ ) {
	
								initMaterial( object.material[ i ], scene.fog, object );
	
							}
	
						} else {
	
							initMaterial( object.material, scene.fog, object );
	
						}
	
					}
	
				} );
	
			};
	
			// Animation Loop
	
			var isAnimating = false;
			var onAnimationFrame = null;
	
			function start() {
	
				if ( isAnimating ) return;
	
				var device = vr.getDevice();
				
				if ( device && device.isPresenting ) {
	
					device.requestAnimationFrame( loop );
	
				} else {
	
					window.requestAnimationFrame( loop );
	
				}
	
				isAnimating = true;
	
			}
	
			function loop( time ) {
	
				if ( onAnimationFrame !== null ) onAnimationFrame( time );
	
				var device = vr.getDevice();
				
				if ( device && device.isPresenting ) {
	
					device.requestAnimationFrame( loop );
	
				} else {
	
					window.requestAnimationFrame( loop );
	
				}
	
			}
	
			this.animate = function ( callback ) {
	
				onAnimationFrame = callback;
				start();
	
			};
	
			// Rendering
	
			this.render = function ( scene, camera, renderTarget, forceClear ) {
	
				if ( ! ( camera && camera.isCamera ) ) {
	
					console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
					return;
	
				}
	
				if ( _isContextLost ) return;
	
				// reset caching for this frame
	
				_currentGeometryProgram = '';
				_currentMaterialId = - 1;
				_currentCamera = null;
	
				// update scene graph
	
				if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
	
				// update camera matrices and frustum
	
				if ( camera.parent === null ) camera.updateMatrixWorld();
	
				if ( vr.enabled ) {
	
					camera = vr.getCamera( camera );
	
				}
	
				_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				_frustum.setFromMatrix( _projScreenMatrix );
	
				lightsArray.length = 0;
				shadowsArray.length = 0;
	
				spritesArray.length = 0;
				flaresArray.length = 0;
	
				_localClippingEnabled = this.localClippingEnabled;
				_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
	
				currentRenderList = renderLists.get( scene, camera );
				currentRenderList.init();
	
				projectObject( scene, camera, _this.sortObjects );
	
				if ( _this.sortObjects === true ) {
	
					currentRenderList.sort();
	
				}
	
				//
	
				if ( _clippingEnabled ) _clipping.beginShadows();
	
				shadowMap.render( shadowsArray, scene, camera );
	
				lights.setup( lightsArray, shadowsArray, camera );
	
				if ( _clippingEnabled ) _clipping.endShadows();
	
				//
	
				_infoRender.frame ++;
				_infoRender.calls = 0;
				_infoRender.vertices = 0;
				_infoRender.faces = 0;
				_infoRender.points = 0;
	
				if ( renderTarget === undefined ) {
	
					renderTarget = null;
	
				}
	
				this.setRenderTarget( renderTarget );
	
				//
	
				background.render( currentRenderList, scene, camera, forceClear );
	
				// render scene
	
				var opaqueObjects = currentRenderList.opaque;
				var transparentObjects = currentRenderList.transparent;
	
				if ( scene.overrideMaterial ) {
	
					var overrideMaterial = scene.overrideMaterial;
	
					if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );
					if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );
	
				} else {
	
					// opaque pass (front-to-back order)
	
					if ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );
	
					// transparent pass (back-to-front order)
	
					if ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );
	
				}
	
				// custom renderers
	
				spriteRenderer.render( spritesArray, scene, camera );
				flareRenderer.render( flaresArray, scene, camera, _currentViewport );
	
				// Generate mipmap if we're using any kind of mipmap filtering
	
				if ( renderTarget ) {
	
					textures.updateRenderTargetMipmap( renderTarget );
	
				}
	
				// Ensure depth buffer writing is enabled so it can be cleared on next render
	
				state.buffers.depth.setTest( true );
				state.buffers.depth.setMask( true );
				state.buffers.color.setMask( true );
	
				state.setPolygonOffset( false );
	
				if ( vr.enabled ) {
	
					vr.submitFrame();
	
				}
	
				// _gl.finish();
	
			};
	
			/*
			// TODO Duplicated code (Frustum)
	
			var _sphere = new Sphere();
	
			function isObjectViewable( object ) {
	
				var geometry = object.geometry;
	
				if ( geometry.boundingSphere === null )
					geometry.computeBoundingSphere();
	
				_sphere.copy( geometry.boundingSphere ).
				applyMatrix4( object.matrixWorld );
	
				return isSphereViewable( _sphere );
	
			}
	
			function isSpriteViewable( sprite ) {
	
				_sphere.center.set( 0, 0, 0 );
				_sphere.radius = 0.7071067811865476;
				_sphere.applyMatrix4( sprite.matrixWorld );
	
				return isSphereViewable( _sphere );
	
			}
	
			function isSphereViewable( sphere ) {
	
				if ( ! _frustum.intersectsSphere( sphere ) ) return false;
	
				var numPlanes = _clipping.numPlanes;
	
				if ( numPlanes === 0 ) return true;
	
				var planes = _this.clippingPlanes,
	
					center = sphere.center,
					negRad = - sphere.radius,
					i = 0;
	
				do {
	
					// out when deeper than radius in the negative halfspace
					if ( planes[ i ].distanceToPoint( center ) < negRad ) return false;
	
				} while ( ++ i !== numPlanes );
	
				return true;
	
			}
			*/
	
			function projectObject( object, camera, sortObjects ) {
	
				if ( object.visible === false ) return;
	
				var visible = object.layers.test( camera.layers );
	
				if ( visible ) {
	
					if ( object.isLight ) {
	
						lightsArray.push( object );
	
						if ( object.castShadow ) {
	
							shadowsArray.push( object );
	
						}
	
					} else if ( object.isSprite ) {
	
						if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {
	
							spritesArray.push( object );
	
						}
	
					} else if ( object.isLensFlare ) {
	
						flaresArray.push( object );
	
					} else if ( object.isImmediateRenderObject ) {
	
						if ( sortObjects ) {
	
							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );
	
						}
	
						currentRenderList.push( object, null, object.material, _vector3.z, null );
	
					} else if ( object.isMesh || object.isLine || object.isPoints ) {
	
						if ( object.isSkinnedMesh ) {
	
							object.skeleton.update();
	
						}
	
						if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {
	
							if ( sortObjects ) {
	
								_vector3.setFromMatrixPosition( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );
	
							}
	
							var geometry = objects.update( object );
							var material = object.material;
	
							if ( Array.isArray( material ) ) {
	
								var groups = geometry.groups;
	
								for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
									var group = groups[ i ];
									var groupMaterial = material[ group.materialIndex ];
	
									if ( groupMaterial && groupMaterial.visible ) {
	
										currentRenderList.push( object, geometry, groupMaterial, _vector3.z, group );
	
									}
	
								}
	
							} else if ( material.visible ) {
	
								currentRenderList.push( object, geometry, material, _vector3.z, null );
	
							}
	
						}
	
					}
	
				}
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					projectObject( children[ i ], camera, sortObjects );
	
				}
	
			}
	
			function renderObjects( renderList, scene, camera, overrideMaterial ) {
	
				for ( var i = 0, l = renderList.length; i < l; i ++ ) {
	
					var renderItem = renderList[ i ];
	
					var object = renderItem.object;
					var geometry = renderItem.geometry;
					var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
					var group = renderItem.group;
	
					if ( camera.isArrayCamera ) {
	
						_currentArrayCamera = camera;
	
						var cameras = camera.cameras;
	
						for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {
	
							var camera2 = cameras[ j ];
	
							if ( object.layers.test( camera2.layers ) ) {
	
								var bounds = camera2.bounds;
	
								var x = bounds.x * _width;
								var y = bounds.y * _height;
								var width = bounds.z * _width;
								var height = bounds.w * _height;
	
								state.viewport( _currentViewport.set( x, y, width, height ).multiplyScalar( _pixelRatio ) );
	
								renderObject( object, scene, camera2, geometry, material, group );
	
							}
	
						}
	
					} else {
	
						_currentArrayCamera = null;
	
						renderObject( object, scene, camera, geometry, material, group );
	
					}
	
				}
	
			}
	
			function renderObject( object, scene, camera, geometry, material, group ) {
	
				object.onBeforeRender( _this, scene, camera, geometry, material, group );
	
				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
	
				if ( object.isImmediateRenderObject ) {
	
					state.setMaterial( material );
	
					var program = setProgram( camera, scene.fog, material, object );
	
					_currentGeometryProgram = '';
	
					renderObjectImmediate( object, program, material );
	
				} else {
	
					_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );
	
				}
	
				object.onAfterRender( _this, scene, camera, geometry, material, group );
	
			}
	
			function initMaterial( material, fog, object ) {
	
				var materialProperties = properties.get( material );
	
				var parameters = programCache.getParameters(
					material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );
	
				var code = programCache.getProgramCode( material, parameters );
	
				var program = materialProperties.program;
				var programChange = true;
	
				if ( program === undefined ) {
	
					// new material
					material.addEventListener( 'dispose', onMaterialDispose );
	
				} else if ( program.code !== code ) {
	
					// changed glsl or parameters
					releaseMaterialProgramReference( material );
	
				} else if ( parameters.shaderID !== undefined ) {
	
					// same glsl and uniform list
					return;
	
				} else {
	
					// only rebuild uniform list
					programChange = false;
	
				}
	
				if ( programChange ) {
	
					if ( parameters.shaderID ) {
	
						var shader = ShaderLib[ parameters.shaderID ];
	
						materialProperties.shader = {
							name: material.type,
							uniforms: UniformsUtils.clone( shader.uniforms ),
							vertexShader: shader.vertexShader,
							fragmentShader: shader.fragmentShader
						};
	
					} else {
	
						materialProperties.shader = {
							name: material.type,
							uniforms: material.uniforms,
							vertexShader: material.vertexShader,
							fragmentShader: material.fragmentShader
						};
	
					}
	
					material.onBeforeCompile( materialProperties.shader );
	
					program = programCache.acquireProgram( material, materialProperties.shader, parameters, code );
	
					materialProperties.program = program;
					material.program = program;
	
				}
	
				var programAttributes = program.getAttributes();
	
				if ( material.morphTargets ) {
	
					material.numSupportedMorphTargets = 0;
	
					for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
	
						if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {
	
							material.numSupportedMorphTargets ++;
	
						}
	
					}
	
				}
	
				if ( material.morphNormals ) {
	
					material.numSupportedMorphNormals = 0;
	
					for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {
	
						if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {
	
							material.numSupportedMorphNormals ++;
	
						}
	
					}
	
				}
	
				var uniforms = materialProperties.shader.uniforms;
	
				if ( ! material.isShaderMaterial &&
					! material.isRawShaderMaterial ||
					material.clipping === true ) {
	
					materialProperties.numClippingPlanes = _clipping.numPlanes;
					materialProperties.numIntersection = _clipping.numIntersection;
					uniforms.clippingPlanes = _clipping.uniform;
	
				}
	
				materialProperties.fog = fog;
	
				// store the light setup it was created for
	
				materialProperties.lightsHash = lights.state.hash;
	
				if ( material.lights ) {
	
					// wire up the material to this renderer's lighting state
	
					uniforms.ambientLightColor.value = lights.state.ambient;
					uniforms.directionalLights.value = lights.state.directional;
					uniforms.spotLights.value = lights.state.spot;
					uniforms.rectAreaLights.value = lights.state.rectArea;
					uniforms.pointLights.value = lights.state.point;
					uniforms.hemisphereLights.value = lights.state.hemi;
	
					uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
					uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
					uniforms.spotShadowMap.value = lights.state.spotShadowMap;
					uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
					uniforms.pointShadowMap.value = lights.state.pointShadowMap;
					uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
					// TODO (abelnation): add area lights shadow info to uniforms
	
				}
	
				var progUniforms = materialProperties.program.getUniforms(),
					uniformsList =
						WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
	
				materialProperties.uniformsList = uniformsList;
	
			}
	
			function setProgram( camera, fog, material, object ) {
	
				_usedTextureUnits = 0;
	
				var materialProperties = properties.get( material );
	
				if ( _clippingEnabled ) {
	
					if ( _localClippingEnabled || camera !== _currentCamera ) {
	
						var useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;
	
						// we might want to call this function with some ClippingGroup
						// object instead of the material, once it becomes feasible
						// (#8465, #8379)
						_clipping.setState(
							material.clippingPlanes, material.clipIntersection, material.clipShadows,
							camera, materialProperties, useCache );
	
					}
	
				}
	
				if ( material.needsUpdate === false ) {
	
					if ( materialProperties.program === undefined ) {
	
						material.needsUpdate = true;
	
					} else if ( material.fog && materialProperties.fog !== fog ) {
	
						material.needsUpdate = true;
	
					} else if ( material.lights && materialProperties.lightsHash !== lights.state.hash ) {
	
						material.needsUpdate = true;
	
					} else if ( materialProperties.numClippingPlanes !== undefined &&
						( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
						materialProperties.numIntersection !== _clipping.numIntersection ) ) {
	
						material.needsUpdate = true;
	
					}
	
				}
	
				if ( material.needsUpdate ) {
	
					initMaterial( material, fog, object );
					material.needsUpdate = false;
	
				}
	
				var refreshProgram = false;
				var refreshMaterial = false;
				var refreshLights = false;
	
				var program = materialProperties.program,
					p_uniforms = program.getUniforms(),
					m_uniforms = materialProperties.shader.uniforms;
	
				if ( state.useProgram( program.program ) ) {
	
					refreshProgram = true;
					refreshMaterial = true;
					refreshLights = true;
	
				}
	
				if ( material.id !== _currentMaterialId ) {
	
					_currentMaterialId = material.id;
	
					refreshMaterial = true;
	
				}
	
				if ( refreshProgram || camera !== _currentCamera ) {
	
					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
	
					if ( capabilities.logarithmicDepthBuffer ) {
	
						p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
	
					}
	
					// Avoid unneeded uniform updates per ArrayCamera's sub-camera
	
					if ( _currentCamera !== ( _currentArrayCamera || camera ) ) {
	
						_currentCamera = ( _currentArrayCamera || camera );
	
						// lighting uniforms depend on the camera so enforce an update
						// now, in case this material supports lights - or later, when
						// the next material that does gets activated:
	
						refreshMaterial = true;		// set to true on material change
						refreshLights = true;		// remains set until update done
	
					}
	
					// load material specific uniforms
					// (shader material also gets them for the sake of genericity)
	
					if ( material.isShaderMaterial ||
						material.isMeshPhongMaterial ||
						material.isMeshStandardMaterial ||
						material.envMap ) {
	
						var uCamPos = p_uniforms.map.cameraPosition;
	
						if ( uCamPos !== undefined ) {
	
							uCamPos.setValue( _gl,
								_vector3.setFromMatrixPosition( camera.matrixWorld ) );
	
						}
	
					}
	
					if ( material.isMeshPhongMaterial ||
						material.isMeshLambertMaterial ||
						material.isMeshBasicMaterial ||
						material.isMeshStandardMaterial ||
						material.isShaderMaterial ||
						material.skinning ) {
	
						p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
	
					}
	
				}
	
				// skinning uniforms must be set even if material didn't change
				// auto-setting of texture unit for bone texture must go before other textures
				// not sure why, but otherwise weird things happen
	
				if ( material.skinning ) {
	
					p_uniforms.setOptional( _gl, object, 'bindMatrix' );
					p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
	
					var skeleton = object.skeleton;
	
					if ( skeleton ) {
	
						var bones = skeleton.bones;
	
						if ( capabilities.floatVertexTextures ) {
	
							if ( skeleton.boneTexture === undefined ) {
	
								// layout (1 matrix = 4 pixels)
								//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
								//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
								//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
								//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
								//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
	
	
								var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
								size = _Math.ceilPowerOfTwo( size );
								size = Math.max( size, 4 );
	
								var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
								boneMatrices.set( skeleton.boneMatrices ); // copy current values
	
								var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
	
								skeleton.boneMatrices = boneMatrices;
								skeleton.boneTexture = boneTexture;
								skeleton.boneTextureSize = size;
	
							}
	
							p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture );
							p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );
	
						} else {
	
							p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );
	
						}
	
					}
	
				}
	
				if ( refreshMaterial ) {
	
					p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
					p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );
	
					if ( material.lights ) {
	
						// the current material requires lighting info
	
						// note: all lighting uniforms are always set correctly
						// they simply reference the renderer's state for their
						// values
						//
						// use the current material's .needsUpdate flags to set
						// the GL state when required
	
						markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
	
					}
	
					// refresh uniforms common to several materials
	
					if ( fog && material.fog ) {
	
						refreshUniformsFog( m_uniforms, fog );
	
					}
	
					if ( material.isMeshBasicMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
	
					} else if ( material.isMeshLambertMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsLambert( m_uniforms, material );
	
					} else if ( material.isMeshPhongMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
	
						if ( material.isMeshToonMaterial ) {
	
							refreshUniformsToon( m_uniforms, material );
	
						} else {
	
							refreshUniformsPhong( m_uniforms, material );
	
						}
	
					} else if ( material.isMeshStandardMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
	
						if ( material.isMeshPhysicalMaterial ) {
	
							refreshUniformsPhysical( m_uniforms, material );
	
						} else {
	
							refreshUniformsStandard( m_uniforms, material );
	
						}
	
					} else if ( material.isMeshDepthMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsDepth( m_uniforms, material );
	
					} else if ( material.isMeshDistanceMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsDistance( m_uniforms, material );
	
					} else if ( material.isMeshNormalMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsNormal( m_uniforms, material );
	
					} else if ( material.isLineBasicMaterial ) {
	
						refreshUniformsLine( m_uniforms, material );
	
						if ( material.isLineDashedMaterial ) {
	
							refreshUniformsDash( m_uniforms, material );
	
						}
	
					} else if ( material.isPointsMaterial ) {
	
						refreshUniformsPoints( m_uniforms, material );
	
					} else if ( material.isShadowMaterial ) {
	
						m_uniforms.color.value = material.color;
						m_uniforms.opacity.value = material.opacity;
	
					}
	
					// RectAreaLight Texture
					// TODO (mrdoob): Find a nicer implementation
	
					if ( m_uniforms.ltcMat !== undefined ) m_uniforms.ltcMat.value = UniformsLib.LTC_MAT_TEXTURE;
					if ( m_uniforms.ltcMag !== undefined ) m_uniforms.ltcMag.value = UniformsLib.LTC_MAG_TEXTURE;
	
					WebGLUniforms.upload(
						_gl, materialProperties.uniformsList, m_uniforms, _this );
	
				}
	
	
				// common matrices
	
				p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
				p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
				p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
	
				return program;
	
			}
	
			// Uniforms (refresh uniforms objects)
	
			function refreshUniformsCommon( uniforms, material ) {
	
				uniforms.opacity.value = material.opacity;
	
				if ( material.color ) {
	
					uniforms.diffuse.value = material.color;
	
				}
	
				if ( material.emissive ) {
	
					uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
	
				}
	
				if ( material.map ) {
	
					uniforms.map.value = material.map;
	
				}
	
				if ( material.alphaMap ) {
	
					uniforms.alphaMap.value = material.alphaMap;
	
				}
	
				if ( material.specularMap ) {
	
					uniforms.specularMap.value = material.specularMap;
	
				}
	
				if ( material.envMap ) {
	
					uniforms.envMap.value = material.envMap;
	
					// don't flip CubeTexture envMaps, flip everything else:
					//  WebGLRenderTargetCube will be flipped for backwards compatibility
					//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
					// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
					uniforms.flipEnvMap.value = ( ! ( material.envMap && material.envMap.isCubeTexture ) ) ? 1 : - 1;
	
					uniforms.reflectivity.value = material.reflectivity;
					uniforms.refractionRatio.value = material.refractionRatio;
	
				}
	
				if ( material.lightMap ) {
	
					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;
	
				}
	
				if ( material.aoMap ) {
	
					uniforms.aoMap.value = material.aoMap;
					uniforms.aoMapIntensity.value = material.aoMapIntensity;
	
				}
	
				// uv repeat and offset setting priorities
				// 1. color map
				// 2. specular map
				// 3. normal map
				// 4. bump map
				// 5. alpha map
				// 6. emissive map
	
				var uvScaleMap;
	
				if ( material.map ) {
	
					uvScaleMap = material.map;
	
				} else if ( material.specularMap ) {
	
					uvScaleMap = material.specularMap;
	
				} else if ( material.displacementMap ) {
	
					uvScaleMap = material.displacementMap;
	
				} else if ( material.normalMap ) {
	
					uvScaleMap = material.normalMap;
	
				} else if ( material.bumpMap ) {
	
					uvScaleMap = material.bumpMap;
	
				} else if ( material.roughnessMap ) {
	
					uvScaleMap = material.roughnessMap;
	
				} else if ( material.metalnessMap ) {
	
					uvScaleMap = material.metalnessMap;
	
				} else if ( material.alphaMap ) {
	
					uvScaleMap = material.alphaMap;
	
				} else if ( material.emissiveMap ) {
	
					uvScaleMap = material.emissiveMap;
	
				}
	
				if ( uvScaleMap !== undefined ) {
	
					// backwards compatibility
					if ( uvScaleMap.isWebGLRenderTarget ) {
	
						uvScaleMap = uvScaleMap.texture;
	
					}
	
					if ( uvScaleMap.matrixAutoUpdate === true ) {
	
						var offset = uvScaleMap.offset;
						var repeat = uvScaleMap.repeat;
						var rotation = uvScaleMap.rotation;
						var center = uvScaleMap.center;
	
						uvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );
	
					}
	
					uniforms.uvTransform.value.copy( uvScaleMap.matrix );
	
				}
	
			}
	
			function refreshUniformsLine( uniforms, material ) {
	
				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;
	
			}
	
			function refreshUniformsDash( uniforms, material ) {
	
				uniforms.dashSize.value = material.dashSize;
				uniforms.totalSize.value = material.dashSize + material.gapSize;
				uniforms.scale.value = material.scale;
	
			}
	
			function refreshUniformsPoints( uniforms, material ) {
	
				uniforms.diffuse.value = material.color;
				uniforms.opacity.value = material.opacity;
				uniforms.size.value = material.size * _pixelRatio;
				uniforms.scale.value = _height * 0.5;
	
				uniforms.map.value = material.map;
	
				if ( material.map !== null ) {
	
					if ( material.map.matrixAutoUpdate === true ) {
	
						var offset = material.map.offset;
						var repeat = material.map.repeat;
						var rotation = material.map.rotation;
						var center = material.map.center;
	
						material.map.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );
	
					}
	
					uniforms.uvTransform.value.copy( material.map.matrix );
	
				}
	
			}
	
			function refreshUniformsFog( uniforms, fog ) {
	
				uniforms.fogColor.value = fog.color;
	
				if ( fog.isFog ) {
	
					uniforms.fogNear.value = fog.near;
					uniforms.fogFar.value = fog.far;
	
				} else if ( fog.isFogExp2 ) {
	
					uniforms.fogDensity.value = fog.density;
	
				}
	
			}
	
			function refreshUniformsLambert( uniforms, material ) {
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
			}
	
			function refreshUniformsPhong( uniforms, material ) {
	
				uniforms.specular.value = material.specular;
				uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			function refreshUniformsToon( uniforms, material ) {
	
				refreshUniformsPhong( uniforms, material );
	
				if ( material.gradientMap ) {
	
					uniforms.gradientMap.value = material.gradientMap;
	
				}
	
			}
	
			function refreshUniformsStandard( uniforms, material ) {
	
				uniforms.roughness.value = material.roughness;
				uniforms.metalness.value = material.metalness;
	
				if ( material.roughnessMap ) {
	
					uniforms.roughnessMap.value = material.roughnessMap;
	
				}
	
				if ( material.metalnessMap ) {
	
					uniforms.metalnessMap.value = material.metalnessMap;
	
				}
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
				if ( material.envMap ) {
	
					//uniforms.envMap.value = material.envMap; // part of uniforms common
					uniforms.envMapIntensity.value = material.envMapIntensity;
	
				}
	
			}
	
			function refreshUniformsPhysical( uniforms, material ) {
	
				uniforms.clearCoat.value = material.clearCoat;
				uniforms.clearCoatRoughness.value = material.clearCoatRoughness;
	
				refreshUniformsStandard( uniforms, material );
	
			}
	
			function refreshUniformsDepth( uniforms, material ) {
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			function refreshUniformsDistance( uniforms, material ) {
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
				uniforms.referencePosition.value.copy( material.referencePosition );
				uniforms.nearDistance.value = material.nearDistance;
				uniforms.farDistance.value = material.farDistance;
	
			}
	
			function refreshUniformsNormal( uniforms, material ) {
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			// If uniforms are marked as clean, they don't need to be loaded to the GPU.
	
			function markUniformsLightsNeedsUpdate( uniforms, value ) {
	
				uniforms.ambientLightColor.needsUpdate = value;
	
				uniforms.directionalLights.needsUpdate = value;
				uniforms.pointLights.needsUpdate = value;
				uniforms.spotLights.needsUpdate = value;
				uniforms.rectAreaLights.needsUpdate = value;
				uniforms.hemisphereLights.needsUpdate = value;
	
			}
	
			// GL state setting
	
			this.setFaceCulling = function ( cullFace, frontFaceDirection ) {
	
				state.setCullFace( cullFace );
				state.setFlipSided( frontFaceDirection === FrontFaceDirectionCW );
	
			};
	
			// Textures
	
			function allocTextureUnit() {
	
				var textureUnit = _usedTextureUnits;
	
				if ( textureUnit >= capabilities.maxTextures ) {
	
					console.warn( 'THREE.WebGLRenderer: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );
	
				}
	
				_usedTextureUnits += 1;
	
				return textureUnit;
	
			}
	
			this.allocTextureUnit = allocTextureUnit;
	
			// this.setTexture2D = setTexture2D;
			this.setTexture2D = ( function () {
	
				var warned = false;
	
				// backwards compatibility: peel texture.texture
				return function setTexture2D( texture, slot ) {
	
					if ( texture && texture.isWebGLRenderTarget ) {
	
						if ( ! warned ) {
	
							console.warn( "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead." );
							warned = true;
	
						}
	
						texture = texture.texture;
	
					}
	
					textures.setTexture2D( texture, slot );
	
				};
	
			}() );
	
			this.setTexture = ( function () {
	
				var warned = false;
	
				return function setTexture( texture, slot ) {
	
					if ( ! warned ) {
	
						console.warn( "THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead." );
						warned = true;
	
					}
	
					textures.setTexture2D( texture, slot );
	
				};
	
			}() );
	
			this.setTextureCube = ( function () {
	
				var warned = false;
	
				return function setTextureCube( texture, slot ) {
	
					// backwards compatibility: peel texture.texture
					if ( texture && texture.isWebGLRenderTargetCube ) {
	
						if ( ! warned ) {
	
							console.warn( "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
							warned = true;
	
						}
	
						texture = texture.texture;
	
					}
	
					// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
					// TODO: unify these code paths
					if ( ( texture && texture.isCubeTexture ) ||
						( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {
	
						// CompressedTexture can have Array in image :/
	
						// this function alone should take care of cube textures
						textures.setTextureCube( texture, slot );
	
					} else {
	
						// assumed: texture property of THREE.WebGLRenderTargetCube
	
						textures.setTextureCubeDynamic( texture, slot );
	
					}
	
				};
	
			}() );
	
			this.getRenderTarget = function () {
	
				return _currentRenderTarget;
	
			};
	
			this.setRenderTarget = function ( renderTarget ) {
	
				_currentRenderTarget = renderTarget;
	
				if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {
	
					textures.setupRenderTarget( renderTarget );
	
				}
	
				var framebuffer = null;
				var isCube = false;
	
				if ( renderTarget ) {
	
					var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;
	
					if ( renderTarget.isWebGLRenderTargetCube ) {
	
						framebuffer = __webglFramebuffer[ renderTarget.activeCubeFace ];
						isCube = true;
	
					} else {
	
						framebuffer = __webglFramebuffer;
	
					}
	
					_currentViewport.copy( renderTarget.viewport );
					_currentScissor.copy( renderTarget.scissor );
					_currentScissorTest = renderTarget.scissorTest;
	
				} else {
	
					_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );
					_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );
					_currentScissorTest = _scissorTest;
	
				}
	
				if ( _currentFramebuffer !== framebuffer ) {
	
					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
					_currentFramebuffer = framebuffer;
	
				}
	
				state.viewport( _currentViewport );
				state.scissor( _currentScissor );
				state.setScissorTest( _currentScissorTest );
	
				if ( isCube ) {
	
					var textureProperties = properties.get( renderTarget.texture );
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );
	
				}
	
			};
	
			this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {
	
				if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {
	
					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
					return;
	
				}
	
				var framebuffer = properties.get( renderTarget ).__webglFramebuffer;
	
				if ( framebuffer ) {
	
					var restore = false;
	
					if ( framebuffer !== _currentFramebuffer ) {
	
						_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
	
						restore = true;
	
					}
	
					try {
	
						var texture = renderTarget.texture;
						var textureFormat = texture.format;
						var textureType = texture.type;
	
						if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
							return;
	
						}
	
						if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)
							! ( textureType === FloatType && ( extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
							! ( textureType === HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
							return;
	
						}
	
						if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {
	
							// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
	
							if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
	
								_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );
	
							}
	
						} else {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );
	
						}
	
					} finally {
	
						if ( restore ) {
	
							_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );
	
						}
	
					}
	
				}
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function FogExp2( color, density ) {
	
			this.name = '';
	
			this.color = new Color( color );
			this.density = ( density !== undefined ) ? density : 0.00025;
	
		}
	
		FogExp2.prototype.isFogExp2 = true;
	
		FogExp2.prototype.clone = function () {
	
			return new FogExp2( this.color.getHex(), this.density );
	
		};
	
		FogExp2.prototype.toJSON = function ( /* meta */ ) {
	
			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Fog( color, near, far ) {
	
			this.name = '';
	
			this.color = new Color( color );
	
			this.near = ( near !== undefined ) ? near : 1;
			this.far = ( far !== undefined ) ? far : 1000;
	
		}
	
		Fog.prototype.isFog = true;
	
		Fog.prototype.clone = function () {
	
			return new Fog( this.color.getHex(), this.near, this.far );
	
		};
	
		Fog.prototype.toJSON = function ( /* meta */ ) {
	
			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Scene() {
	
			Object3D.call( this );
	
			this.type = 'Scene';
	
			this.background = null;
			this.fog = null;
			this.overrideMaterial = null;
	
			this.autoUpdate = true; // checked by the renderer
	
		}
	
		Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Scene,
	
			copy: function ( source, recursive ) {
	
				Object3D.prototype.copy.call( this, source, recursive );
	
				if ( source.background !== null ) this.background = source.background.clone();
				if ( source.fog !== null ) this.fog = source.fog.clone();
				if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
	
				this.autoUpdate = source.autoUpdate;
				this.matrixAutoUpdate = source.matrixAutoUpdate;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				if ( this.background !== null ) data.object.background = this.background.toJSON( meta );
				if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function LensFlare( texture, size, distance, blending, color ) {
	
			Object3D.call( this );
	
			this.lensFlares = [];
	
			this.positionScreen = new Vector3();
			this.customUpdateCallback = undefined;
	
			if ( texture !== undefined ) {
	
				this.add( texture, size, distance, blending, color );
	
			}
	
		}
	
		LensFlare.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: LensFlare,
	
			isLensFlare: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.positionScreen.copy( source.positionScreen );
				this.customUpdateCallback = source.customUpdateCallback;
	
				for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {
	
					this.lensFlares.push( source.lensFlares[ i ] );
	
				}
	
				return this;
	
			},
	
			add: function ( texture, size, distance, blending, color, opacity ) {
	
				if ( size === undefined ) size = - 1;
				if ( distance === undefined ) distance = 0;
				if ( opacity === undefined ) opacity = 1;
				if ( color === undefined ) color = new Color( 0xffffff );
				if ( blending === undefined ) blending = NormalBlending;
	
				distance = Math.min( distance, Math.max( 0, distance ) );
	
				this.lensFlares.push( {
					texture: texture,	// THREE.Texture
					size: size, 		// size in pixels (-1 = use texture.width)
					distance: distance, 	// distance (0-1) from light source (0=at light source)
					x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
					scale: 1, 		// scale
					rotation: 0, 		// rotation
					opacity: opacity,	// opacity
					color: color,		// color
					blending: blending	// blending
				} );
	
			},
	
			/*
			 * Update lens flares update positions on all flares based on the screen position
			 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
			 */
	
			updateLensFlares: function () {
	
				var f, fl = this.lensFlares.length;
				var flare;
				var vecX = - this.positionScreen.x * 2;
				var vecY = - this.positionScreen.y * 2;
	
				for ( f = 0; f < fl; f ++ ) {
	
					flare = this.lensFlares[ f ];
	
					flare.x = this.positionScreen.x + vecX * flare.distance;
					flare.y = this.positionScreen.y + vecY * flare.distance;
	
					flare.wantedRotation = flare.x * Math.PI * 0.25;
					flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;
	
				}
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *	uvOffset: new THREE.Vector2(),
		 *	uvScale: new THREE.Vector2()
		 * }
		 */
	
		function SpriteMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'SpriteMaterial';
	
			this.color = new Color( 0xffffff );
			this.map = null;
	
			this.rotation = 0;
	
			this.fog = false;
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		SpriteMaterial.prototype = Object.create( Material.prototype );
		SpriteMaterial.prototype.constructor = SpriteMaterial;
		SpriteMaterial.prototype.isSpriteMaterial = true;
	
		SpriteMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
			this.map = source.map;
	
			this.rotation = source.rotation;
	
			return this;
	
		};
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Sprite( material ) {
	
			Object3D.call( this );
	
			this.type = 'Sprite';
	
			this.material = ( material !== undefined ) ? material : new SpriteMaterial();
	
		}
	
		Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Sprite,
	
			isSprite: true,
	
			raycast: ( function () {
	
				var intersectPoint = new Vector3();
				var worldPosition = new Vector3();
				var worldScale = new Vector3();
	
				return function raycast( raycaster, intersects ) {
	
					worldPosition.setFromMatrixPosition( this.matrixWorld );
					raycaster.ray.closestPointToPoint( worldPosition, intersectPoint );
	
					worldScale.setFromMatrixScale( this.matrixWorld );
					var guessSizeSq = worldScale.x * worldScale.y / 4;
	
					if ( worldPosition.distanceToSquared( intersectPoint ) > guessSizeSq ) return;
	
					var distance = raycaster.ray.origin.distanceTo( intersectPoint );
	
					if ( distance < raycaster.near || distance > raycaster.far ) return;
	
					intersects.push( {
	
						distance: distance,
						point: intersectPoint.clone(),
						face: null,
						object: this
	
					} );
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LOD() {
	
			Object3D.call( this );
	
			this.type = 'LOD';
	
			Object.defineProperties( this, {
				levels: {
					enumerable: true,
					value: []
				}
			} );
	
		}
	
		LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: LOD,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source, false );
	
				var levels = source.levels;
	
				for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
					var level = levels[ i ];
	
					this.addLevel( level.object.clone(), level.distance );
	
				}
	
				return this;
	
			},
	
			addLevel: function ( object, distance ) {
	
				if ( distance === undefined ) distance = 0;
	
				distance = Math.abs( distance );
	
				var levels = this.levels;
	
				for ( var l = 0; l < levels.length; l ++ ) {
	
					if ( distance < levels[ l ].distance ) {
	
						break;
	
					}
	
				}
	
				levels.splice( l, 0, { distance: distance, object: object } );
	
				this.add( object );
	
			},
	
			getObjectForDistance: function ( distance ) {
	
				var levels = this.levels;
	
				for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
					if ( distance < levels[ i ].distance ) {
	
						break;
	
					}
	
				}
	
				return levels[ i - 1 ].object;
	
			},
	
			raycast: ( function () {
	
				var matrixPosition = new Vector3();
	
				return function raycast( raycaster, intersects ) {
	
					matrixPosition.setFromMatrixPosition( this.matrixWorld );
	
					var distance = raycaster.ray.origin.distanceTo( matrixPosition );
	
					this.getObjectForDistance( distance ).raycast( raycaster, intersects );
	
				};
	
			}() ),
	
			update: function () {
	
				var v1 = new Vector3();
				var v2 = new Vector3();
	
				return function update( camera ) {
	
					var levels = this.levels;
	
					if ( levels.length > 1 ) {
	
						v1.setFromMatrixPosition( camera.matrixWorld );
						v2.setFromMatrixPosition( this.matrixWorld );
	
						var distance = v1.distanceTo( v2 );
	
						levels[ 0 ].object.visible = true;
	
						for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
							if ( distance >= levels[ i ].distance ) {
	
								levels[ i - 1 ].object.visible = false;
								levels[ i ].object.visible = true;
	
							} else {
	
								break;
	
							}
	
						}
	
						for ( ; i < l; i ++ ) {
	
							levels[ i ].object.visible = false;
	
						}
	
					}
	
				};
	
			}(),
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.levels = [];
	
				var levels = this.levels;
	
				for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
					var level = levels[ i ];
	
					data.object.levels.push( {
						object: level.object.uuid,
						distance: level.distance
					} );
	
				}
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author michael guerrero / http://realitymeltdown.com
		 * @author ikerr / http://verold.com
		 */
	
		function Skeleton( bones, boneInverses ) {
	
			// copy the bone array
	
			bones = bones || [];
	
			this.bones = bones.slice( 0 );
			this.boneMatrices = new Float32Array( this.bones.length * 16 );
	
			// use the supplied bone inverses or calculate the inverses
	
			if ( boneInverses === undefined ) {
	
				this.calculateInverses();
	
			} else {
	
				if ( this.bones.length === boneInverses.length ) {
	
					this.boneInverses = boneInverses.slice( 0 );
	
				} else {
	
					console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );
	
					this.boneInverses = [];
	
					for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
	
						this.boneInverses.push( new Matrix4() );
	
					}
	
				}
	
			}
	
		}
	
		Object.assign( Skeleton.prototype, {
	
			calculateInverses: function () {
	
				this.boneInverses = [];
	
				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
	
					var inverse = new Matrix4();
	
					if ( this.bones[ i ] ) {
	
						inverse.getInverse( this.bones[ i ].matrixWorld );
	
					}
	
					this.boneInverses.push( inverse );
	
				}
	
			},
	
			pose: function () {
	
				var bone, i, il;
	
				// recover the bind-time world matrices
	
				for ( i = 0, il = this.bones.length; i < il; i ++ ) {
	
					bone = this.bones[ i ];
	
					if ( bone ) {
	
						bone.matrixWorld.getInverse( this.boneInverses[ i ] );
	
					}
	
				}
	
				// compute the local matrices, positions, rotations and scales
	
				for ( i = 0, il = this.bones.length; i < il; i ++ ) {
	
					bone = this.bones[ i ];
	
					if ( bone ) {
	
						if ( bone.parent && bone.parent.isBone ) {
	
							bone.matrix.getInverse( bone.parent.matrixWorld );
							bone.matrix.multiply( bone.matrixWorld );
	
						} else {
	
							bone.matrix.copy( bone.matrixWorld );
	
						}
	
						bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
	
					}
	
				}
	
			},
	
			update: ( function () {
	
				var offsetMatrix = new Matrix4();
				var identityMatrix = new Matrix4();
	
				return function update() {
	
					var bones = this.bones;
					var boneInverses = this.boneInverses;
					var boneMatrices = this.boneMatrices;
					var boneTexture = this.boneTexture;
	
					// flatten bone matrices to array
	
					for ( var i = 0, il = bones.length; i < il; i ++ ) {
	
						// compute the offset between the current and the original transform
	
						var matrix = bones[ i ] ? bones[ i ].matrixWorld : identityMatrix;
	
						offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
						offsetMatrix.toArray( boneMatrices, i * 16 );
	
					}
	
					if ( boneTexture !== undefined ) {
	
						boneTexture.needsUpdate = true;
	
					}
	
				};
	
			} )(),
	
			clone: function () {
	
				return new Skeleton( this.bones, this.boneInverses );
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */
	
		function Bone() {
	
			Object3D.call( this );
	
			this.type = 'Bone';
	
		}
	
		Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Bone,
	
			isBone: true
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */
	
		function SkinnedMesh( geometry, material ) {
	
			Mesh.call( this, geometry, material );
	
			this.type = 'SkinnedMesh';
	
			this.bindMode = 'attached';
			this.bindMatrix = new Matrix4();
			this.bindMatrixInverse = new Matrix4();
	
			var bones = this.initBones();
			var skeleton = new Skeleton( bones );
	
			this.bind( skeleton, this.matrixWorld );
	
			this.normalizeSkinWeights();
	
		}
	
		SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
	
			constructor: SkinnedMesh,
	
			isSkinnedMesh: true,
	
			initBones: function () {
	
				var bones = [], bone, gbone;
				var i, il;
	
				if ( this.geometry && this.geometry.bones !== undefined ) {
	
					// first, create array of 'Bone' objects from geometry data
	
					for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {
	
						gbone = this.geometry.bones[ i ];
	
						// create new 'Bone' object
	
						bone = new Bone();
						bones.push( bone );
	
						// apply values
	
						bone.name = gbone.name;
						bone.position.fromArray( gbone.pos );
						bone.quaternion.fromArray( gbone.rotq );
						if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );
	
					}
	
					// second, create bone hierarchy
	
					for ( i = 0, il = this.geometry.bones.length; i < il; i ++ ) {
	
						gbone = this.geometry.bones[ i ];
	
						if ( ( gbone.parent !== - 1 ) && ( gbone.parent !== null ) && ( bones[ gbone.parent ] !== undefined ) ) {
	
							// subsequent bones in the hierarchy
	
							bones[ gbone.parent ].add( bones[ i ] );
	
						} else {
	
							// topmost bone, immediate child of the skinned mesh
	
							this.add( bones[ i ] );
	
						}
	
					}
	
				}
	
				// now the bones are part of the scene graph and children of the skinned mesh.
				// let's update the corresponding matrices
	
				this.updateMatrixWorld( true );
	
				return bones;
	
			},
	
			bind: function ( skeleton, bindMatrix ) {
	
				this.skeleton = skeleton;
	
				if ( bindMatrix === undefined ) {
	
					this.updateMatrixWorld( true );
	
					this.skeleton.calculateInverses();
	
					bindMatrix = this.matrixWorld;
	
				}
	
				this.bindMatrix.copy( bindMatrix );
				this.bindMatrixInverse.getInverse( bindMatrix );
	
			},
	
			pose: function () {
	
				this.skeleton.pose();
	
			},
	
			normalizeSkinWeights: function () {
	
				var scale, i;
	
				if ( this.geometry && this.geometry.isGeometry ) {
	
					for ( i = 0; i < this.geometry.skinWeights.length; i ++ ) {
	
						var sw = this.geometry.skinWeights[ i ];
	
						scale = 1.0 / sw.manhattanLength();
	
						if ( scale !== Infinity ) {
	
							sw.multiplyScalar( scale );
	
						} else {
	
							sw.set( 1, 0, 0, 0 ); // do something reasonable
	
						}
	
					}
	
				} else if ( this.geometry && this.geometry.isBufferGeometry ) {
	
					var vec = new Vector4();
	
					var skinWeight = this.geometry.attributes.skinWeight;
	
					for ( i = 0; i < skinWeight.count; i ++ ) {
	
						vec.x = skinWeight.getX( i );
						vec.y = skinWeight.getY( i );
						vec.z = skinWeight.getZ( i );
						vec.w = skinWeight.getW( i );
	
						scale = 1.0 / vec.manhattanLength();
	
						if ( scale !== Infinity ) {
	
							vec.multiplyScalar( scale );
	
						} else {
	
							vec.set( 1, 0, 0, 0 ); // do something reasonable
	
						}
	
						skinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );
	
					}
	
				}
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				Mesh.prototype.updateMatrixWorld.call( this, force );
	
				if ( this.bindMode === 'attached' ) {
	
					this.bindMatrixInverse.getInverse( this.matrixWorld );
	
				} else if ( this.bindMode === 'detached' ) {
	
					this.bindMatrixInverse.getInverse( this.bindMatrix );
	
				} else {
	
					console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *  linecap: "round",
		 *  linejoin: "round"
		 * }
		 */
	
		function LineBasicMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'LineBasicMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';
	
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		LineBasicMaterial.prototype = Object.create( Material.prototype );
		LineBasicMaterial.prototype.constructor = LineBasicMaterial;
	
		LineBasicMaterial.prototype.isLineBasicMaterial = true;
	
		LineBasicMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Line( geometry, material, mode ) {
	
			if ( mode === 1 ) {
	
				console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
				return new LineSegments( geometry, material );
	
			}
	
			Object3D.call( this );
	
			this.type = 'Line';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );
	
		}
	
		Line.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Line,
	
			isLine: true,
	
			raycast: ( function () {
	
				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();
	
				return function raycast( raycaster, intersects ) {
	
					var precision = raycaster.linePrecision;
					var precisionSq = precision * precision;
	
					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;
	
					// Checking boundingSphere distance to ray
	
					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );
	
					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
	
					//
	
					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
					var vStart = new Vector3();
					var vEnd = new Vector3();
					var interSegment = new Vector3();
					var interRay = new Vector3();
					var step = ( this && this.isLineSegments ) ? 2 : 1;
	
					if ( geometry.isBufferGeometry ) {
	
						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;
	
						if ( index !== null ) {
	
							var indices = index.array;
	
							for ( var i = 0, l = indices.length - 1; i < l; i += step ) {
	
								var a = indices[ i ];
								var b = indices[ i + 1 ];
	
								vStart.fromArray( positions, a * 3 );
								vEnd.fromArray( positions, b * 3 );
	
								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
								if ( distSq > precisionSq ) continue;
	
								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
								var distance = raycaster.ray.origin.distanceTo( interRay );
	
								if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
								intersects.push( {
	
									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this
	
								} );
	
							}
	
						} else {
	
							for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {
	
								vStart.fromArray( positions, 3 * i );
								vEnd.fromArray( positions, 3 * i + 3 );
	
								var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
								if ( distSq > precisionSq ) continue;
	
								interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
								var distance = raycaster.ray.origin.distanceTo( interRay );
	
								if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
								intersects.push( {
	
									distance: distance,
									// What do we want? intersection point on the ray or on the segment??
									// point: raycaster.ray.at( distance ),
									point: interSegment.clone().applyMatrix4( this.matrixWorld ),
									index: i,
									face: null,
									faceIndex: null,
									object: this
	
								} );
	
							}
	
						}
	
					} else if ( geometry.isGeometry ) {
	
						var vertices = geometry.vertices;
						var nbVertices = vertices.length;
	
						for ( var i = 0; i < nbVertices - 1; i += step ) {
	
							var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
	
							if ( distSq > precisionSq ) continue;
	
							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
							var distance = raycaster.ray.origin.distanceTo( interRay );
	
							if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
							intersects.push( {
	
								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this
	
							} );
	
						}
	
					}
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LineSegments( geometry, material ) {
	
			Line.call( this, geometry, material );
	
			this.type = 'LineSegments';
	
		}
	
		LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {
	
			constructor: LineSegments,
	
			isLineSegments: true
	
		} );
	
		/**
		 * @author mgreter / http://github.com/mgreter
		 */
	
		function LineLoop( geometry, material ) {
	
			Line.call( this, geometry, material );
	
			this.type = 'LineLoop';
	
		}
	
		LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {
	
			constructor: LineLoop,
	
			isLineLoop: true,
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  size: <float>,
		 *  sizeAttenuation: <bool>
		 * }
		 */
	
		function PointsMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'PointsMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.map = null;
	
			this.size = 1;
			this.sizeAttenuation = true;
	
			this.lights = false;
	
			this.setValues( parameters );
	
		}
	
		PointsMaterial.prototype = Object.create( Material.prototype );
		PointsMaterial.prototype.constructor = PointsMaterial;
	
		PointsMaterial.prototype.isPointsMaterial = true;
	
		PointsMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.size = source.size;
			this.sizeAttenuation = source.sizeAttenuation;
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Points( geometry, material ) {
	
			Object3D.call( this );
	
			this.type = 'Points';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );
	
		}
	
		Points.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Points,
	
			isPoints: true,
	
			raycast: ( function () {
	
				var inverseMatrix = new Matrix4();
				var ray = new Ray();
				var sphere = new Sphere();
	
				return function raycast( raycaster, intersects ) {
	
					var object = this;
					var geometry = this.geometry;
					var matrixWorld = this.matrixWorld;
					var threshold = raycaster.params.Points.threshold;
	
					// Checking boundingSphere distance to ray
	
					if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
					sphere.copy( geometry.boundingSphere );
					sphere.applyMatrix4( matrixWorld );
					sphere.radius += threshold;
	
					if ( raycaster.ray.intersectsSphere( sphere ) === false ) return;
	
					//
	
					inverseMatrix.getInverse( matrixWorld );
					ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
					var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
					var localThresholdSq = localThreshold * localThreshold;
					var position = new Vector3();
	
					function testPoint( point, index ) {
	
						var rayPointDistanceSq = ray.distanceSqToPoint( point );
	
						if ( rayPointDistanceSq < localThresholdSq ) {
	
							var intersectPoint = ray.closestPointToPoint( point );
							intersectPoint.applyMatrix4( matrixWorld );
	
							var distance = raycaster.ray.origin.distanceTo( intersectPoint );
	
							if ( distance < raycaster.near || distance > raycaster.far ) return;
	
							intersects.push( {
	
								distance: distance,
								distanceToRay: Math.sqrt( rayPointDistanceSq ),
								point: intersectPoint.clone(),
								index: index,
								face: null,
								object: object
	
							} );
	
						}
	
					}
	
					if ( geometry.isBufferGeometry ) {
	
						var index = geometry.index;
						var attributes = geometry.attributes;
						var positions = attributes.position.array;
	
						if ( index !== null ) {
	
							var indices = index.array;
	
							for ( var i = 0, il = indices.length; i < il; i ++ ) {
	
								var a = indices[ i ];
	
								position.fromArray( positions, a * 3 );
	
								testPoint( position, a );
	
							}
	
						} else {
	
							for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {
	
								position.fromArray( positions, i * 3 );
	
								testPoint( position, i );
	
							}
	
						}
	
					} else {
	
						var vertices = geometry.vertices;
	
						for ( var i = 0, l = vertices.length; i < l; i ++ ) {
	
							testPoint( vertices[ i ], i );
	
						}
	
					}
	
				};
	
			}() ),
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Group() {
	
			Object3D.call( this );
	
			this.type = 'Group';
	
		}
	
		Group.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Group
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
			Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.generateMipmaps = false;
	
			var scope = this;
	
			function update() {
	
				var video = scope.image;
	
				if ( video.readyState >= video.HAVE_CURRENT_DATA ) {
	
					scope.needsUpdate = true;
	
				}
	
				requestAnimationFrame( update );
	
			}
	
			requestAnimationFrame( update );
	
		}
	
		VideoTexture.prototype = Object.create( Texture.prototype );
		VideoTexture.prototype.constructor = VideoTexture;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.image = { width: width, height: height };
			this.mipmaps = mipmaps;
	
			// no flipping for cube textures
			// (also flipping doesn't work for compressed textures )
	
			this.flipY = false;
	
			// can't generate mipmaps for compressed textures
			// mips must be embedded in DDS files
	
			this.generateMipmaps = false;
	
		}
	
		CompressedTexture.prototype = Object.create( Texture.prototype );
		CompressedTexture.prototype.constructor = CompressedTexture;
	
		CompressedTexture.prototype.isCompressedTexture = true;
	
		/**
		 * @author Matt DesLauriers / @mattdesl
		 * @author atix / arthursilber.de
		 */
	
		function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
	
			format = format !== undefined ? format : DepthFormat;
	
			if ( format !== DepthFormat && format !== DepthStencilFormat ) {
	
				throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );
	
			}
	
			if ( type === undefined && format === DepthFormat ) type = UnsignedShortType;
			if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.image = { width: width, height: height };
	
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
	
			this.flipY = false;
			this.generateMipmaps	= false;
	
		}
	
		DepthTexture.prototype = Object.create( Texture.prototype );
		DepthTexture.prototype.constructor = DepthTexture;
		DepthTexture.prototype.isDepthTexture = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function WireframeGeometry( geometry ) {
	
			BufferGeometry.call( this );
	
			this.type = 'WireframeGeometry';
	
			// buffer
	
			var vertices = [];
	
			// helper variables
	
			var i, j, l, o, ol;
			var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
			var key, keys = [ 'a', 'b', 'c' ];
			var vertex;
	
			// different logic for Geometry and BufferGeometry
	
			if ( geometry && geometry.isGeometry ) {
	
				// create a data structure that contains all edges without duplicates
	
				var faces = geometry.faces;
	
				for ( i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					for ( j = 0; j < 3; j ++ ) {
	
						edge1 = face[ keys[ j ] ];
						edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
						edge[ 1 ] = Math.max( edge1, edge2 );
	
						key = edge[ 0 ] + ',' + edge[ 1 ];
	
						if ( edges[ key ] === undefined ) {
	
							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
	
						}
	
					}
	
				}
	
				// generate vertices
	
				for ( key in edges ) {
	
					e = edges[ key ];
	
					vertex = geometry.vertices[ e.index1 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					vertex = geometry.vertices[ e.index2 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
			} else if ( geometry && geometry.isBufferGeometry ) {
	
				var position, indices, groups;
				var group, start, count;
				var index1, index2;
	
				vertex = new Vector3();
	
				if ( geometry.index !== null ) {
	
					// indexed BufferGeometry
	
					position = geometry.attributes.position;
					indices = geometry.index;
					groups = geometry.groups;
	
					if ( groups.length === 0 ) {
	
						groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];
	
					}
	
					// create a data structure that contains all eges without duplicates
	
					for ( o = 0, ol = groups.length; o < ol; ++ o ) {
	
						group = groups[ o ];
	
						start = group.start;
						count = group.count;
	
						for ( i = start, l = ( start + count ); i < l; i += 3 ) {
	
							for ( j = 0; j < 3; j ++ ) {
	
								edge1 = indices.getX( i + j );
								edge2 = indices.getX( i + ( j + 1 ) % 3 );
								edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
								edge[ 1 ] = Math.max( edge1, edge2 );
	
								key = edge[ 0 ] + ',' + edge[ 1 ];
	
								if ( edges[ key ] === undefined ) {
	
									edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
	
								}
	
							}
	
						}
	
					}
	
					// generate vertices
	
					for ( key in edges ) {
	
						e = edges[ key ];
	
						vertex.fromBufferAttribute( position, e.index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );
	
						vertex.fromBufferAttribute( position, e.index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );
	
					}
	
				} else {
	
					// non-indexed BufferGeometry
	
					position = geometry.attributes.position;
	
					for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {
	
						for ( j = 0; j < 3; j ++ ) {
	
							// three edges per triangle, an edge is represented as (index1, index2)
							// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
	
							index1 = 3 * i + j;
							vertex.fromBufferAttribute( position, index1 );
							vertices.push( vertex.x, vertex.y, vertex.z );
	
							index2 = 3 * i + ( ( j + 1 ) % 3 );
							vertex.fromBufferAttribute( position, index2 );
							vertices.push( vertex.x, vertex.y, vertex.z );
	
						}
	
					}
	
				}
	
			}
	
			// build geometry
	
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	
		}
	
		WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
		WireframeGeometry.prototype.constructor = WireframeGeometry;
	
		/**
		 * @author zz85 / https://github.com/zz85
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Parametric Surfaces Geometry
		 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
		 */
	
		// ParametricGeometry
	
		function ParametricGeometry( func, slices, stacks ) {
	
			Geometry.call( this );
	
			this.type = 'ParametricGeometry';
	
			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};
	
			this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
			this.mergeVertices();
	
		}
	
		ParametricGeometry.prototype = Object.create( Geometry.prototype );
		ParametricGeometry.prototype.constructor = ParametricGeometry;
	
		// ParametricBufferGeometry
	
		function ParametricBufferGeometry( func, slices, stacks ) {
	
			BufferGeometry.call( this );
	
			this.type = 'ParametricBufferGeometry';
	
			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			var EPS = 0.00001;
	
			var normal = new Vector3();
	
			var p0 = new Vector3(), p1 = new Vector3();
			var pu = new Vector3(), pv = new Vector3();
	
			var i, j;
	
			// generate vertices, normals and uvs
	
			var sliceCount = slices + 1;
	
			for ( i = 0; i <= stacks; i ++ ) {
	
				var v = i / stacks;
	
				for ( j = 0; j <= slices; j ++ ) {
	
					var u = j / slices;
	
					// vertex
	
					p0 = func( u, v, p0 );
					vertices.push( p0.x, p0.y, p0.z );
	
					// normal
	
					// approximate tangent vectors via finite differences
	
					if ( u - EPS >= 0 ) {
	
						p1 = func( u - EPS, v, p1 );
						pu.subVectors( p0, p1 );
	
					} else {
	
						p1 = func( u + EPS, v, p1 );
						pu.subVectors( p1, p0 );
	
					}
	
					if ( v - EPS >= 0 ) {
	
						p1 = func( u, v - EPS, p1 );
						pv.subVectors( p0, p1 );
	
					} else {
	
						p1 = func( u, v + EPS, p1 );
						pv.subVectors( p1, p0 );
	
					}
	
					// cross product of tangent vectors returns surface normal
	
					normal.crossVectors( pu, pv ).normalize();
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( u, v );
	
				}
	
			}
	
			// generate indices
	
			for ( i = 0; i < stacks; i ++ ) {
	
				for ( j = 0; j < slices; j ++ ) {
	
					var a = i * sliceCount + j;
					var b = i * sliceCount + j + 1;
					var c = ( i + 1 ) * sliceCount + j + 1;
					var d = ( i + 1 ) * sliceCount + j;
	
					// faces one and two
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
	
		/**
		 * @author clockworkgeek / https://github.com/clockworkgeek
		 * @author timothypratley / https://github.com/timothypratley
		 * @author WestLangley / http://github.com/WestLangley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// PolyhedronGeometry
	
		function PolyhedronGeometry( vertices, indices, radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'PolyhedronGeometry';
	
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
			this.mergeVertices();
	
		}
	
		PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
		PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;
	
		// PolyhedronBufferGeometry
	
		function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {
	
			BufferGeometry.call( this );
	
			this.type = 'PolyhedronBufferGeometry';
	
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};
	
			radius = radius || 1;
			detail = detail || 0;
	
			// default buffer data
	
			var vertexBuffer = [];
			var uvBuffer = [];
	
			// the subdivision creates the vertex buffer data
	
			subdivide( detail );
	
			// all vertices should lie on a conceptual sphere with a given radius
	
			appplyRadius( radius );
	
			// finally, create the uv data
	
			generateUVs();
	
			// build non-indexed geometry
	
			this.addAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );
	
			if ( detail === 0 ) {
	
				this.computeVertexNormals(); // flat normals
	
			} else {
	
				this.normalizeNormals(); // smooth normals
	
			}
	
			// helper functions
	
			function subdivide( detail ) {
	
				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();
	
				// iterate over all faces and apply a subdivison with the given detail value
	
				for ( var i = 0; i < indices.length; i += 3 ) {
	
					// get the vertices of the face
	
					getVertexByIndex( indices[ i + 0 ], a );
					getVertexByIndex( indices[ i + 1 ], b );
					getVertexByIndex( indices[ i + 2 ], c );
	
					// perform subdivision
	
					subdivideFace( a, b, c, detail );
	
				}
	
			}
	
			function subdivideFace( a, b, c, detail ) {
	
				var cols = Math.pow( 2, detail );
	
				// we use this multidimensional array as a data structure for creating the subdivision
	
				var v = [];
	
				var i, j;
	
				// construct all of the vertices for this subdivision
	
				for ( i = 0; i <= cols; i ++ ) {
	
					v[ i ] = [];
	
					var aj = a.clone().lerp( c, i / cols );
					var bj = b.clone().lerp( c, i / cols );
	
					var rows = cols - i;
	
					for ( j = 0; j <= rows; j ++ ) {
	
						if ( j === 0 && i === cols ) {
	
							v[ i ][ j ] = aj;
	
						} else {
	
							v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
	
						}
	
					}
	
				}
	
				// construct all of the faces
	
				for ( i = 0; i < cols; i ++ ) {
	
					for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
	
						var k = Math.floor( j / 2 );
	
						if ( j % 2 === 0 ) {
	
							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );
							pushVertex( v[ i ][ k ] );
	
						} else {
	
							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );
	
						}
	
					}
	
				}
	
			}
	
			function appplyRadius( radius ) {
	
				var vertex = new Vector3();
	
				// iterate over the entire buffer and apply the radius to each vertex
	
				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
	
					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];
	
					vertex.normalize().multiplyScalar( radius );
	
					vertexBuffer[ i + 0 ] = vertex.x;
					vertexBuffer[ i + 1 ] = vertex.y;
					vertexBuffer[ i + 2 ] = vertex.z;
	
				}
	
			}
	
			function generateUVs() {
	
				var vertex = new Vector3();
	
				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
	
					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];
	
					var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
					var v = inclination( vertex ) / Math.PI + 0.5;
					uvBuffer.push( u, 1 - v );
	
				}
	
				correctUVs();
	
				correctSeam();
	
			}
	
			function correctSeam() {
	
				// handle case when face straddles the seam, see #3269
	
				for ( var i = 0; i < uvBuffer.length; i += 6 ) {
	
					// uv data of a single face
	
					var x0 = uvBuffer[ i + 0 ];
					var x1 = uvBuffer[ i + 2 ];
					var x2 = uvBuffer[ i + 4 ];
	
					var max = Math.max( x0, x1, x2 );
					var min = Math.min( x0, x1, x2 );
	
					// 0.9 is somewhat arbitrary
	
					if ( max > 0.9 && min < 0.1 ) {
	
						if ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;
						if ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;
						if ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;
	
					}
	
				}
	
			}
	
			function pushVertex( vertex ) {
	
				vertexBuffer.push( vertex.x, vertex.y, vertex.z );
	
			}
	
			function getVertexByIndex( index, vertex ) {
	
				var stride = index * 3;
	
				vertex.x = vertices[ stride + 0 ];
				vertex.y = vertices[ stride + 1 ];
				vertex.z = vertices[ stride + 2 ];
	
			}
	
			function correctUVs() {
	
				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();
	
				var centroid = new Vector3();
	
				var uvA = new Vector2();
				var uvB = new Vector2();
				var uvC = new Vector2();
	
				for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
	
					a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
					b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
					c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
	
					uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
					uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
					uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
	
					centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
	
					var azi = azimuth( centroid );
	
					correctUV( uvA, j + 0, a, azi );
					correctUV( uvB, j + 2, b, azi );
					correctUV( uvC, j + 4, c, azi );
	
				}
	
			}
	
			function correctUV( uv, stride, vector, azimuth ) {
	
				if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
	
					uvBuffer[ stride ] = uv.x - 1;
	
				}
	
				if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
	
					uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
	
				}
	
			}
	
			// Angle around the Y axis, counter-clockwise when looking from above.
	
			function azimuth( vector ) {
	
				return Math.atan2( vector.z, - vector.x );
	
			}
	
	
			// Angle above the XZ plane.
	
			function inclination( vector ) {
	
				return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
	
			}
	
		}
	
		PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// TetrahedronGeometry
	
		function TetrahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'TetrahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
		TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;
	
		// TetrahedronBufferGeometry
	
		function TetrahedronBufferGeometry( radius, detail ) {
	
			var vertices = [
				1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
			];
	
			var indices = [
				2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'TetrahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// OctahedronGeometry
	
		function OctahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'OctahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		OctahedronGeometry.prototype = Object.create( Geometry.prototype );
		OctahedronGeometry.prototype.constructor = OctahedronGeometry;
	
		// OctahedronBufferGeometry
	
		function OctahedronBufferGeometry( radius, detail ) {
	
			var vertices = [
				1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
				0, - 1, 0, 	0, 0, 1,	0, 0, - 1
			];
	
			var indices = [
				0, 2, 4,	0, 4, 3,	0, 3, 5,
				0, 5, 2,	1, 2, 5,	1, 5, 3,
				1, 3, 4,	1, 4, 2
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'OctahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// IcosahedronGeometry
	
		function IcosahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'IcosahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
		IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;
	
		// IcosahedronBufferGeometry
	
		function IcosahedronBufferGeometry( radius, detail ) {
	
			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	
			var vertices = [
				- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
				 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
				 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
			];
	
			var indices = [
				 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
				 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
				 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
				 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'IcosahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
	
		/**
		 * @author Abe Pazos / https://hamoid.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// DodecahedronGeometry
	
		function DodecahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'DodecahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
		DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;
	
		// DodecahedronBufferGeometry
	
		function DodecahedronBufferGeometry( radius, detail ) {
	
			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
			var r = 1 / t;
	
			var vertices = [
	
				// (±1, ±1, ±1)
				- 1, - 1, - 1,	- 1, - 1, 1,
				- 1, 1, - 1, - 1, 1, 1,
				1, - 1, - 1, 1, - 1, 1,
				1, 1, - 1, 1, 1, 1,
	
				// (0, ±1/φ, ±φ)
				 0, - r, - t, 0, - r, t,
				 0, r, - t, 0, r, t,
	
				// (±1/φ, ±φ, 0)
				- r, - t, 0, - r, t, 0,
				 r, - t, 0, r, t, 0,
	
				// (±φ, 0, ±1/φ)
				- t, 0, - r, t, 0, - r,
				- t, 0, r, t, 0, r
			];
	
			var indices = [
				3, 11, 7, 	3, 7, 15, 	3, 15, 13,
				7, 19, 17, 	7, 17, 6, 	7, 6, 15,
				17, 4, 8, 	17, 8, 10, 	17, 10, 6,
				8, 0, 16, 	8, 16, 2, 	8, 2, 10,
				0, 12, 1, 	0, 1, 18, 	0, 18, 16,
				6, 10, 2, 	6, 2, 13, 	6, 13, 15,
				2, 16, 18, 	2, 18, 3, 	2, 3, 13,
				18, 1, 9, 	18, 9, 11, 	18, 11, 3,
				4, 14, 12, 	4, 12, 0, 	4, 0, 8,
				11, 9, 5, 	11, 5, 19, 	11, 19, 7,
				19, 5, 14, 	19, 14, 4, 	19, 4, 17,
				1, 12, 14, 	1, 14, 5, 	1, 5, 9
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'DodecahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
	
		/**
		 * @author oosmoxiecode / https://github.com/oosmoxiecode
		 * @author WestLangley / https://github.com/WestLangley
		 * @author zz85 / https://github.com/zz85
		 * @author miningold / https://github.com/miningold
		 * @author jonobr1 / https://github.com/jonobr1
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 */
	
		// TubeGeometry
	
		function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {
	
			Geometry.call( this );
	
			this.type = 'TubeGeometry';
	
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
	
			if ( taper !== undefined ) console.warn( 'THREE.TubeGeometry: taper has been removed.' );
	
			var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );
	
			// expose internals
	
			this.tangents = bufferGeometry.tangents;
			this.normals = bufferGeometry.normals;
			this.binormals = bufferGeometry.binormals;
	
			// create geometry
	
			this.fromBufferGeometry( bufferGeometry );
			this.mergeVertices();
	
		}
	
		TubeGeometry.prototype = Object.create( Geometry.prototype );
		TubeGeometry.prototype.constructor = TubeGeometry;
	
		// TubeBufferGeometry
	
		function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TubeBufferGeometry';
	
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
	
			tubularSegments = tubularSegments || 64;
			radius = radius || 1;
			radialSegments = radialSegments || 8;
			closed = closed || false;
	
			var frames = path.computeFrenetFrames( tubularSegments, closed );
	
			// expose internals
	
			this.tangents = frames.tangents;
			this.normals = frames.normals;
			this.binormals = frames.binormals;
	
			// helper variables
	
			var vertex = new Vector3();
			var normal = new Vector3();
			var uv = new Vector2();
			var P = new Vector3();
	
			var i, j;
	
			// buffer
	
			var vertices = [];
			var normals = [];
			var uvs = [];
			var indices = [];
	
			// create buffer data
	
			generateBufferData();
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			// functions
	
			function generateBufferData() {
	
				for ( i = 0; i < tubularSegments; i ++ ) {
	
					generateSegment( i );
	
				}
	
				// if the geometry is not closed, generate the last row of vertices and normals
				// at the regular position on the given path
				//
				// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
	
				generateSegment( ( closed === false ) ? tubularSegments : 0 );
	
				// uvs are generated in a separate function.
				// this makes it easy compute correct values for closed geometries
	
				generateUVs();
	
				// finally create faces
	
				generateIndices();
	
			}
	
			function generateSegment( i ) {
	
				// we use getPointAt to sample evenly distributed points from the given path
	
				P = path.getPointAt( i / tubularSegments, P );
	
				// retrieve corresponding normal and binormal
	
				var N = frames.normals[ i ];
				var B = frames.binormals[ i ];
	
				// generate normals and vertices for the current segment
	
				for ( j = 0; j <= radialSegments; j ++ ) {
	
					var v = j / radialSegments * Math.PI * 2;
	
					var sin = Math.sin( v );
					var cos = - Math.cos( v );
	
					// normal
	
					normal.x = ( cos * N.x + sin * B.x );
					normal.y = ( cos * N.y + sin * B.y );
					normal.z = ( cos * N.z + sin * B.z );
					normal.normalize();
	
					normals.push( normal.x, normal.y, normal.z );
	
					// vertex
	
					vertex.x = P.x + radius * normal.x;
					vertex.y = P.y + radius * normal.y;
					vertex.z = P.z + radius * normal.z;
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
			}
	
			function generateIndices() {
	
				for ( j = 1; j <= tubularSegments; j ++ ) {
	
					for ( i = 1; i <= radialSegments; i ++ ) {
	
						var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
						var b = ( radialSegments + 1 ) * j + ( i - 1 );
						var c = ( radialSegments + 1 ) * j + i;
						var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
	
						// faces
	
						indices.push( a, b, d );
						indices.push( b, c, d );
	
					}
	
				}
	
			}
	
			function generateUVs() {
	
				for ( i = 0; i <= tubularSegments; i ++ ) {
	
					for ( j = 0; j <= radialSegments; j ++ ) {
	
						uv.x = i / tubularSegments;
						uv.y = j / radialSegments;
	
						uvs.push( uv.x, uv.y );
	
					}
	
				}
	
			}
	
		}
	
		TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;
	
		/**
		 * @author oosmoxiecode
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * based on http://www.blackpawn.com/texts/pqtorus/
		 */
	
		// TorusKnotGeometry
	
		function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {
	
			Geometry.call( this );
	
			this.type = 'TorusKnotGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
	
			if ( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );
	
			this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
			this.mergeVertices();
	
		}
	
		TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
		TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;
	
		// TorusKnotBufferGeometry
	
		function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TorusKnotBufferGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
	
			radius = radius || 1;
			tube = tube || 0.4;
			tubularSegments = Math.floor( tubularSegments ) || 64;
			radialSegments = Math.floor( radialSegments ) || 8;
			p = p || 2;
			q = q || 3;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var i, j;
	
			var vertex = new Vector3();
			var normal = new Vector3();
	
			var P1 = new Vector3();
			var P2 = new Vector3();
	
			var B = new Vector3();
			var T = new Vector3();
			var N = new Vector3();
	
			// generate vertices, normals and uvs
	
			for ( i = 0; i <= tubularSegments; ++ i ) {
	
				// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
	
				var u = i / tubularSegments * p * Math.PI * 2;
	
				// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
	
				calculatePositionOnCurve( u, p, q, radius, P1 );
				calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
	
				// calculate orthonormal basis
	
				T.subVectors( P2, P1 );
				N.addVectors( P2, P1 );
				B.crossVectors( T, N );
				N.crossVectors( B, T );
	
				// normalize B, N. T can be ignored, we don't use it
	
				B.normalize();
				N.normalize();
	
				for ( j = 0; j <= radialSegments; ++ j ) {
	
					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
	
					var v = j / radialSegments * Math.PI * 2;
					var cx = - tube * Math.cos( v );
					var cy = tube * Math.sin( v );
	
					// now calculate the final vertex position.
					// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
	
					vertex.x = P1.x + ( cx * N.x + cy * B.x );
					vertex.y = P1.y + ( cx * N.y + cy * B.y );
					vertex.z = P1.z + ( cx * N.z + cy * B.z );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
	
					normal.subVectors( vertex, P1 ).normalize();
	
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( i / tubularSegments );
					uvs.push( j / radialSegments );
	
				}
	
			}
	
			// generate indices
	
			for ( j = 1; j <= tubularSegments; j ++ ) {
	
				for ( i = 1; i <= radialSegments; i ++ ) {
	
					// indices
	
					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			// this function calculates the current position on the torus curve
	
			function calculatePositionOnCurve( u, p, q, radius, position ) {
	
				var cu = Math.cos( u );
				var su = Math.sin( u );
				var quOverP = q / p * u;
				var cs = Math.cos( quOverP );
	
				position.x = radius * ( 2 + cs ) * 0.5 * cu;
				position.y = radius * ( 2 + cs ) * su * 0.5;
				position.z = radius * Math.sin( quOverP ) * 0.5;
	
			}
	
		}
	
		TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
	
		/**
		 * @author oosmoxiecode
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// TorusGeometry
	
		function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
	
			Geometry.call( this );
	
			this.type = 'TorusGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
	
			this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
			this.mergeVertices();
	
		}
	
		TorusGeometry.prototype = Object.create( Geometry.prototype );
		TorusGeometry.prototype.constructor = TorusGeometry;
	
		// TorusBufferGeometry
	
		function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TorusBufferGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
	
			radius = radius || 1;
			tube = tube || 0.4;
			radialSegments = Math.floor( radialSegments ) || 8;
			tubularSegments = Math.floor( tubularSegments ) || 6;
			arc = arc || Math.PI * 2;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var center = new Vector3();
			var vertex = new Vector3();
			var normal = new Vector3();
	
			var j, i;
	
			// generate vertices, normals and uvs
	
			for ( j = 0; j <= radialSegments; j ++ ) {
	
				for ( i = 0; i <= tubularSegments; i ++ ) {
	
					var u = i / tubularSegments * arc;
					var v = j / radialSegments * Math.PI * 2;
	
					// vertex
	
					vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
					vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
					vertex.z = tube * Math.sin( v );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					center.x = radius * Math.cos( u );
					center.y = radius * Math.sin( u );
					normal.subVectors( vertex, center ).normalize();
	
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( i / tubularSegments );
					uvs.push( j / radialSegments );
	
				}
	
			}
	
			// generate indices
	
			for ( j = 1; j <= radialSegments; j ++ ) {
	
				for ( i = 1; i <= tubularSegments; i ++ ) {
	
					// indices
	
					var a = ( tubularSegments + 1 ) * j + i - 1;
					var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
					var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
					var d = ( tubularSegments + 1 ) * j + i;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */
	
		var ShapeUtils = {
	
			// calculate area of the contour polygon
	
			area: function ( contour ) {
	
				var n = contour.length;
				var a = 0.0;
	
				for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
	
					a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
	
				}
	
				return a * 0.5;
	
			},
	
			triangulate: ( function () {
	
				/**
				 * This code is a quick port of code written in C++ which was submitted to
				 * flipcode.com by John W. Ratcliff  // July 22, 2000
				 * See original code and more information here:
				 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
				 *
				 * ported to actionscript by Zevan Rosser
				 * www.actionsnippet.com
				 *
				 * ported to javascript by Joshua Koo
				 * http://www.lab4games.net/zz85/blog
				 *
				 */
	
				function snip( contour, u, v, w, n, verts ) {
	
					var p;
					var ax, ay, bx, by;
					var cx, cy, px, py;
	
					ax = contour[ verts[ u ] ].x;
					ay = contour[ verts[ u ] ].y;
	
					bx = contour[ verts[ v ] ].x;
					by = contour[ verts[ v ] ].y;
	
					cx = contour[ verts[ w ] ].x;
					cy = contour[ verts[ w ] ].y;
	
					if ( ( bx - ax ) * ( cy - ay ) - ( by - ay ) * ( cx - ax ) <= 0 ) return false;
	
					var aX, aY, bX, bY, cX, cY;
					var apx, apy, bpx, bpy, cpx, cpy;
					var cCROSSap, bCROSScp, aCROSSbp;
	
					aX = cx - bx; aY = cy - by;
					bX = ax - cx; bY = ay - cy;
					cX = bx - ax; cY = by - ay;
	
					for ( p = 0; p < n; p ++ ) {
	
						px = contour[ verts[ p ] ].x;
						py = contour[ verts[ p ] ].y;
	
						if ( ( ( px === ax ) && ( py === ay ) ) ||
							 ( ( px === bx ) && ( py === by ) ) ||
							 ( ( px === cx ) && ( py === cy ) ) )	continue;
	
						apx = px - ax; apy = py - ay;
						bpx = px - bx; bpy = py - by;
						cpx = px - cx; cpy = py - cy;
	
						// see if p is inside triangle abc
	
						aCROSSbp = aX * bpy - aY * bpx;
						cCROSSap = cX * apy - cY * apx;
						bCROSScp = bX * cpy - bY * cpx;
	
						if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;
	
					}
	
					return true;
	
				}
	
				// takes in an contour array and returns
	
				return function triangulate( contour, indices ) {
	
					var n = contour.length;
	
					if ( n < 3 ) return null;
	
					var result = [],
						verts = [],
						vertIndices = [];
	
					/* we want a counter-clockwise polygon in verts */
	
					var u, v, w;
	
					if ( ShapeUtils.area( contour ) > 0.0 ) {
	
						for ( v = 0; v < n; v ++ ) verts[ v ] = v;
	
					} else {
	
						for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;
	
					}
	
					var nv = n;
	
					/*  remove nv - 2 vertices, creating 1 triangle every time */
	
					var count = 2 * nv; /* error detection */
	
					for ( v = nv - 1; nv > 2; ) {
	
						/* if we loop, it is probably a non-simple polygon */
	
						if ( ( count -- ) <= 0 ) {
	
							//** Triangulate: ERROR - probable bad polygon!
	
							//throw ( "Warning, unable to triangulate polygon!" );
							//return null;
							// Sometimes warning is fine, especially polygons are triangulated in reverse.
							console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );
	
							if ( indices ) return vertIndices;
							return result;
	
						}
	
						/* three consecutive vertices in current polygon, <u,v,w> */
	
						u = v; if ( nv <= u ) u = 0; /* previous */
						v = u + 1; if ( nv <= v ) v = 0; /* new v    */
						w = v + 1; if ( nv <= w ) w = 0; /* next     */
	
						if ( snip( contour, u, v, w, nv, verts ) ) {
	
							var a, b, c, s, t;
	
							/* true names of the vertices */
	
							a = verts[ u ];
							b = verts[ v ];
							c = verts[ w ];
	
							/* output Triangle */
	
							result.push( [ contour[ a ],
								contour[ b ],
								contour[ c ] ] );
	
	
							vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );
	
							/* remove v from the remaining polygon */
	
							for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {
	
								verts[ s ] = verts[ t ];
	
							}
	
							nv --;
	
							/* reset error detection counter */
	
							count = 2 * nv;
	
						}
	
					}
	
					if ( indices ) return vertIndices;
					return result;
	
				};
	
			} )(),
	
			triangulateShape: function ( contour, holes ) {
	
				function removeDupEndPts( points ) {
	
					var l = points.length;
	
					if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
	
						points.pop();
	
					}
	
				}
	
				removeDupEndPts( contour );
				holes.forEach( removeDupEndPts );
	
				function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {
	
					// inOtherPt needs to be collinear to the inSegment
					if ( inSegPt1.x !== inSegPt2.x ) {
	
						if ( inSegPt1.x < inSegPt2.x ) {
	
							return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );
	
						} else {
	
							return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );
	
						}
	
					} else {
	
						if ( inSegPt1.y < inSegPt2.y ) {
	
							return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );
	
						} else {
	
							return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );
	
						}
	
					}
	
				}
	
				function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {
	
					var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x, seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
					var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x, seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;
	
					var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
					var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;
	
					var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
					var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;
	
					if ( Math.abs( limit ) > Number.EPSILON ) {
	
						// not parallel
	
						var perpSeg2;
						if ( limit > 0 ) {
	
							if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];
	
						} else {
	
							if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
							perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
							if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];
	
						}
	
						// i.e. to reduce rounding errors
						// intersection at endpoint of segment#1?
						if ( perpSeg2 === 0 ) {
	
							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt1 ];
	
						}
						if ( perpSeg2 === limit ) {
	
							if ( ( inExcludeAdjacentSegs ) &&
								 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
							return [ inSeg1Pt2 ];
	
						}
						// intersection at endpoint of segment#2?
						if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
						if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];
	
						// return real intersection point
						var factorSeg1 = perpSeg2 / limit;
						return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx, y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];
	
					} else {
	
						// parallel or collinear
						if ( ( perpSeg1 !== 0 ) ||
							 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];
	
						// they are collinear or degenerate
						var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
						var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
						// both segments are points
						if ( seg1Pt && seg2Pt ) {
	
							if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
								 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
							return [ inSeg1Pt1 ];	// they are the same point
	
						}
						// segment#1  is a single point
						if ( seg1Pt ) {
	
							if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
							return [ inSeg1Pt1 ];
	
						}
						// segment#2  is a single point
						if ( seg2Pt ) {
	
							if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
							return [ inSeg2Pt1 ];
	
						}
	
						// they are collinear segments, which might overlap
						var seg1min, seg1max, seg1minVal, seg1maxVal;
						var seg2min, seg2max, seg2minVal, seg2maxVal;
						if ( seg1dx !== 0 ) {
	
							// the segments are NOT on a vertical line
							if ( inSeg1Pt1.x < inSeg1Pt2.x ) {
	
								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;
	
							} else {
	
								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;
	
							}
							if ( inSeg2Pt1.x < inSeg2Pt2.x ) {
	
								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;
	
							} else {
	
								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;
	
							}
	
						} else {
	
							// the segments are on a vertical line
							if ( inSeg1Pt1.y < inSeg1Pt2.y ) {
	
								seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
								seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;
	
							} else {
	
								seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
								seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;
	
							}
							if ( inSeg2Pt1.y < inSeg2Pt2.y ) {
	
								seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
								seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;
	
							} else {
	
								seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
								seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;
	
							}
	
						}
						if ( seg1minVal <= seg2minVal ) {
	
							if ( seg1maxVal < seg2minVal )	return [];
							if ( seg1maxVal === seg2minVal )	{
	
								if ( inExcludeAdjacentSegs )		return [];
								return [ seg2min ];
	
							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
							return	[ seg2min, seg2max ];
	
						} else {
	
							if ( seg1minVal > seg2maxVal )	return [];
							if ( seg1minVal === seg2maxVal )	{
	
								if ( inExcludeAdjacentSegs )		return [];
								return [ seg1min ];
	
							}
							if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
							return	[ seg1min, seg2max ];
	
						}
	
					}
	
				}
	
				function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {
	
					// The order of legs is important
	
					// translation of all points, so that Vertex is at (0,0)
					var legFromPtX	= inLegFromPt.x - inVertex.x, legFromPtY = inLegFromPt.y - inVertex.y;
					var legToPtX	= inLegToPt.x	- inVertex.x, legToPtY = inLegToPt.y	- inVertex.y;
					var otherPtX	= inOtherPt.x	- inVertex.x, otherPtY = inOtherPt.y	- inVertex.y;
	
					// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
					var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
					var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;
	
					if ( Math.abs( from2toAngle ) > Number.EPSILON ) {
	
						// angle != 180 deg.
	
						var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
						// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );
	
						if ( from2toAngle > 0 ) {
	
							// main angle < 180 deg.
							return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );
	
						} else {
	
							// main angle > 180 deg.
							return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );
	
						}
	
					} else {
	
						// angle == 180 deg.
						// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
						return	( from2otherAngle > 0 );
	
					}
	
				}
	
	
				function removeHoles( contour, holes ) {
	
					var shape = contour.concat(); // work on this shape
					var hole;
	
					function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {
	
						// Check if hole point lies within angle around shape point
						var lastShapeIdx = shape.length - 1;
	
						var prevShapeIdx = inShapeIdx - 1;
						if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;
	
						var nextShapeIdx = inShapeIdx + 1;
						if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;
	
						var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
						if ( ! insideAngle ) {
	
							// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
							return	false;
	
						}
	
						// Check if shape point lies within angle around hole point
						var lastHoleIdx = hole.length - 1;
	
						var prevHoleIdx = inHoleIdx - 1;
						if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;
	
						var nextHoleIdx = inHoleIdx + 1;
						if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;
	
						insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
						if ( ! insideAngle ) {
	
							// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
							return	false;
	
						}
	
						return	true;
	
					}
	
					function intersectsShapeEdge( inShapePt, inHolePt ) {
	
						// checks for intersections with shape edges
						var sIdx, nextIdx, intersection;
						for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {
	
							nextIdx = sIdx + 1; nextIdx %= shape.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;
	
						}
	
						return	false;
	
					}
	
					var indepHoles = [];
	
					function intersectsHoleEdge( inShapePt, inHolePt ) {
	
						// checks for intersections with hole edges
						var ihIdx, chkHole,
							hIdx, nextIdx, intersection;
						for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {
	
							chkHole = holes[ indepHoles[ ihIdx ] ];
							for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {
	
								nextIdx = hIdx + 1; nextIdx %= chkHole.length;
								intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
								if ( intersection.length > 0 )		return	true;
	
							}
	
						}
						return	false;
	
					}
	
					var holeIndex, shapeIndex,
						shapePt, holePt,
						holeIdx, cutKey, failedCuts = [],
						tmpShape1, tmpShape2,
						tmpHole1, tmpHole2;
	
					for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
	
						indepHoles.push( h );
	
					}
	
					var minShapeIndex = 0;
					var counter = indepHoles.length * 2;
					while ( indepHoles.length > 0 ) {
	
						counter --;
						if ( counter < 0 ) {
	
							console.log( 'THREE.ShapeUtils: Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!' );
							break;
	
						}
	
						// search for shape-vertex and hole-vertex,
						// which can be connected without intersections
						for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {
	
							shapePt = shape[ shapeIndex ];
							holeIndex	= - 1;
	
							// search for hole which can be reached without intersections
							for ( var h = 0; h < indepHoles.length; h ++ ) {
	
								holeIdx = indepHoles[ h ];
	
								// prevent multiple checks
								cutKey = shapePt.x + ':' + shapePt.y + ':' + holeIdx;
								if ( failedCuts[ cutKey ] !== undefined )			continue;
	
								hole = holes[ holeIdx ];
								for ( var h2 = 0; h2 < hole.length; h2 ++ ) {
	
									holePt = hole[ h2 ];
									if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
									if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
									if ( intersectsHoleEdge( shapePt, holePt ) )		continue;
	
									holeIndex = h2;
									indepHoles.splice( h, 1 );
	
									tmpShape1 = shape.slice( 0, shapeIndex + 1 );
									tmpShape2 = shape.slice( shapeIndex );
									tmpHole1 = hole.slice( holeIndex );
									tmpHole2 = hole.slice( 0, holeIndex + 1 );
	
									shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );
	
									minShapeIndex = shapeIndex;
	
									// Debug only, to show the selected cuts
									// glob_CutLines.push( [ shapePt, holePt ] );
	
									break;
	
								}
								if ( holeIndex >= 0 )	break;		// hole-vertex found
	
								failedCuts[ cutKey ] = true;			// remember failure
	
							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found
	
						}
	
					}
	
					return shape; 			/* shape with no holes */
	
				}
	
	
				var i, il, f, face,
					key, index,
					allPointsMap = {};
	
				// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.
	
				var allpoints = contour.concat();
	
				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
	
					Array.prototype.push.apply( allpoints, holes[ h ] );
	
				}
	
				//console.log( "allpoints",allpoints, allpoints.length );
	
				// prepare all points map
	
				for ( i = 0, il = allpoints.length; i < il; i ++ ) {
	
					key = allpoints[ i ].x + ':' + allpoints[ i ].y;
	
					if ( allPointsMap[ key ] !== undefined ) {
	
						console.warn( 'THREE.ShapeUtils: Duplicate point', key, i );
	
					}
	
					allPointsMap[ key ] = i;
	
				}
	
				// remove holes by cutting paths to holes and adding them to the shape
				var shapeWithoutHoles = removeHoles( contour, holes );
	
				var triangles = ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
				//console.log( "triangles",triangles, triangles.length );
	
				// check all face vertices against all points map
	
				for ( i = 0, il = triangles.length; i < il; i ++ ) {
	
					face = triangles[ i ];
	
					for ( f = 0; f < 3; f ++ ) {
	
						key = face[ f ].x + ':' + face[ f ].y;
	
						index = allPointsMap[ key ];
	
						if ( index !== undefined ) {
	
							face[ f ] = index;
	
						}
	
					}
	
				}
	
				return triangles.concat();
	
			},
	
			isClockWise: function ( pts ) {
	
				return ShapeUtils.area( pts ) < 0;
	
			}
	
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Creates extruded geometry from a path shape.
		 *
		 * parameters = {
		 *
		 *  curveSegments: <int>, // number of points on the curves
		 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
		 *  amount: <int>, // Depth to extrude the shape
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into the original shape bevel goes
		 *  bevelSize: <float>, // how far from shape outline is bevel
		 *  bevelSegments: <int>, // number of bevel layers
		 *
		 *  extrudePath: <THREE.Curve> // curve to extrude shape along
		 *  frames: <Object> // containing arrays of tangents, normals, binormals
		 *
		 *  UVGenerator: <Object> // object that provides UV generator functions
		 *
		 * }
		 */
	
		// ExtrudeGeometry
	
		function ExtrudeGeometry( shapes, options ) {
	
			Geometry.call( this );
	
			this.type = 'ExtrudeGeometry';
	
			this.parameters = {
				shapes: shapes,
				options: options
			};
	
			this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
			this.mergeVertices();
	
		}
	
		ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
		ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;
	
		// ExtrudeBufferGeometry
	
		function ExtrudeBufferGeometry( shapes, options ) {
	
			if ( typeof ( shapes ) === "undefined" ) {
	
				return;
	
			}
	
			BufferGeometry.call( this );
	
			this.type = 'ExtrudeBufferGeometry';
	
			shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
	
			this.addShapeList( shapes, options );
	
			this.computeVertexNormals();
	
			// can't really use automatic vertex normals
			// as then front and back sides get smoothed too
			// should do separate smoothing just for sides
	
			//this.computeVertexNormals();
	
			//console.log( "took", ( Date.now() - startTime ) );
	
		}
	
		ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;
	
		ExtrudeBufferGeometry.prototype.getArrays = function () {
	
			var positionAttribute = this.getAttribute( "position" );
			var verticesArray = positionAttribute ? Array.prototype.slice.call( positionAttribute.array ) : [];
	
			var uvAttribute = this.getAttribute( "uv" );
			var uvArray = uvAttribute ? Array.prototype.slice.call( uvAttribute.array ) : [];
	
			var IndexAttribute = this.index;
			var indicesArray = IndexAttribute ? Array.prototype.slice.call( IndexAttribute.array ) : [];
	
			return {
				position: verticesArray,
				uv: uvArray,
				index: indicesArray
			};
	
		};
	
		ExtrudeBufferGeometry.prototype.addShapeList = function ( shapes, options ) {
	
			var sl = shapes.length;
			options.arrays = this.getArrays();
	
			for ( var s = 0; s < sl; s ++ ) {
	
				var shape = shapes[ s ];
				this.addShape( shape, options );
	
			}
	
			this.setIndex( options.arrays.index );
			this.addAttribute( 'position', new Float32BufferAttribute( options.arrays.position, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );
	
		};
	
		ExtrudeBufferGeometry.prototype.addShape = function ( shape, options ) {
	
			var arrays = options.arrays ? options.arrays : this.getArrays();
			var verticesArray = arrays.position;
			var indicesArray = arrays.index;
			var uvArray = arrays.uv;
	
			var placeholder = [];
	
	
			var amount = options.amount !== undefined ? options.amount : 100;
	
			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
	
			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false
	
			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
	
			var steps = options.steps !== undefined ? options.steps : 1;
	
			var extrudePath = options.extrudePath;
			var extrudePts, extrudeByPath = false;
	
			// Use default WorldUVGenerator if no UV generators are specified.
			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : ExtrudeGeometry.WorldUVGenerator;
	
			var splineTube, binormal, normal, position2;
			if ( extrudePath ) {
	
				extrudePts = extrudePath.getSpacedPoints( steps );
	
				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion
	
				// SETUP TNB variables
	
				// TODO1 - have a .isClosed in spline?
	
				splineTube = options.frames !== undefined ? options.frames : extrudePath.computeFrenetFrames( steps, false );
	
				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
	
				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();
	
			}
	
			// Safeguards if bevels are not enabled
	
			if ( ! bevelEnabled ) {
	
				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;
	
			}
	
			// Variables initialization
	
			var ahole, h, hl; // looping of holes
			var scope = this;
	
			var shapePoints = shape.extractPoints( curveSegments );
	
			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;
	
			var reverse = ! ShapeUtils.isClockWise( vertices );
	
			if ( reverse ) {
	
				vertices = vertices.reverse();
	
				// Maybe we should also check if holes are in the opposite direction, just to be safe ...
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
	
					if ( ShapeUtils.isClockWise( ahole ) ) {
	
						holes[ h ] = ahole.reverse();
	
					}
	
				}
	
			}
	
	
			var faces = ShapeUtils.triangulateShape( vertices, holes );
	
			/* Vertices */
	
			var contour = vertices; // vertices has all points but contour has only points of circumference
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
	
				vertices = vertices.concat( ahole );
	
			}
	
	
			function scalePt2( pt, vec, size ) {
	
				if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );
	
				return vec.clone().multiplyScalar( size ).add( pt );
	
			}
	
			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;
	
	
			// Find directions for point movement
	
	
			function getBevelVec( inPt, inPrev, inNext ) {
	
				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.
	
				var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
	
				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html
	
				var v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;
	
				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
	
				// check for collinear edges
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
				if ( Math.abs( collinear0 ) > Number.EPSILON ) {
	
					// not collinear
	
					// length of vectors for normalizing
	
					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
	
					// shift adjacent points by unit vectors to the left
	
					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
	
					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
	
					// scaling factor for v_prev to intersection point
	
					var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
					// vector from inPt to intersection point
	
					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
	
					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {
	
						return new Vector2( v_trans_x, v_trans_y );
	
					} else {
	
						shrink_by = Math.sqrt( v_trans_lensq / 2 );
	
					}
	
				} else {
	
					// handle special case of collinear edges
	
					var direction_eq = false; // assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {
	
						if ( v_next_x > Number.EPSILON ) {
	
							direction_eq = true;
	
						}
	
					} else {
	
						if ( v_prev_x < - Number.EPSILON ) {
	
							if ( v_next_x < - Number.EPSILON ) {
	
								direction_eq = true;
	
							}
	
						} else {
	
							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
	
								direction_eq = true;
	
							}
	
						}
	
					}
	
					if ( direction_eq ) {
	
						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );
	
					} else {
	
						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );
	
					}
	
				}
	
				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
	
			}
	
	
			var contourMovements = [];
	
			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
				if ( j === il ) j = 0;
				if ( k === il ) k = 0;
	
				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)
	
				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
	
			}
	
			var holesMovements = [],
				oneHoleMovements, verticesMovements = contourMovements.concat();
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
	
				oneHoleMovements = [];
	
				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
					if ( j === il ) j = 0;
					if ( k === il ) k = 0;
	
					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
	
				}
	
				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );
	
			}
	
	
			// Loop bevelSegments, 1 for the front, 1 for the back
	
			for ( b = 0; b < bevelSegments; b ++ ) {
	
				//for ( b = bevelSegments; b > 0; b -- ) {
	
				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );
	
				// contract shape
	
				for ( i = 0, il = contour.length; i < il; i ++ ) {
	
					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
	
					v( vert.x, vert.y, - z );
	
				}
	
				// expand holes
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];
	
					for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
						v( vert.x, vert.y, - z );
	
					}
	
				}
	
			}
	
			bs = bevelSize;
	
			// Back facing vertices
	
			for ( i = 0; i < vlen; i ++ ) {
	
				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
				if ( ! extrudeByPath ) {
	
					v( vert.x, vert.y, 0 );
	
				} else {
	
					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
	
					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
	
					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
	
					v( position2.x, position2.y, position2.z );
	
				}
	
			}
	
			// Add stepped vertices...
			// Including front facing vertices
	
			var s;
	
			for ( s = 1; s <= steps; s ++ ) {
	
				for ( i = 0; i < vlen; i ++ ) {
	
					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
					if ( ! extrudeByPath ) {
	
						v( vert.x, vert.y, amount / steps * s );
	
					} else {
	
						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
	
						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
	
						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
	
						v( position2.x, position2.y, position2.z );
	
					}
	
				}
	
			}
	
	
			// Add bevel segments planes
	
			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( b = bevelSegments - 1; b >= 0; b -- ) {
	
				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 );
	
				// contract shape
	
				for ( i = 0, il = contour.length; i < il; i ++ ) {
	
					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, amount + z );
	
				}
	
				// expand holes
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];
	
					for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
						if ( ! extrudeByPath ) {
	
							v( vert.x, vert.y, amount + z );
	
						} else {
	
							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
	
						}
	
					}
	
				}
	
			}
	
			/* Faces */
	
			// Top and bottom faces
	
			buildLidFaces();
	
			// Sides faces
	
			buildSideFaces();
	
	
			/////  Internal functions
	
			function buildLidFaces() {
	
				var start = verticesArray.length / 3;
	
				if ( bevelEnabled ) {
	
					var layer = 0; // steps + 1
					var offset = vlen * layer;
	
					// Bottom faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
	
					}
	
					layer = steps + bevelSegments * 2;
					offset = vlen * layer;
	
					// Top faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
	
					}
	
				} else {
	
					// Bottom faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );
	
					}
	
					// Top faces
	
					for ( i = 0; i < flen; i ++ ) {
	
						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
	
					}
	
				}
	
				scope.addGroup( start, verticesArray.length / 3 - start, options.material !== undefined ? options.material : 0 );
	
			}
	
			// Create faces for the z-sides of the shape
	
			function buildSideFaces() {
	
				var start = verticesArray.length / 3;
				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );
	
					//, true
					layeroffset += ahole.length;
	
				}
	
	
				scope.addGroup( start, verticesArray.length / 3 - start, options.extrudeMaterial !== undefined ? options.extrudeMaterial : 1 );
	
	
			}
	
			function sidewalls( contour, layeroffset ) {
	
				var j, k;
				i = contour.length;
	
				while ( -- i >= 0 ) {
	
					j = i;
					k = i - 1;
					if ( k < 0 ) k = contour.length - 1;
	
					//console.log('b', i,j, i-1, k,vertices.length);
	
					var s = 0,
						sl = steps + bevelSegments * 2;
	
					for ( s = 0; s < sl; s ++ ) {
	
						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );
	
						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;
	
						f4( a, b, c, d );
	
					}
	
				}
	
			}
	
			function v( x, y, z ) {
	
				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );
	
			}
	
	
			function f3( a, b, c ) {
	
				addVertex( a );
				addVertex( b );
				addVertex( c );
	
				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
	
				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
	
			}
	
			function f4( a, b, c, d ) {
	
				addVertex( a );
				addVertex( b );
				addVertex( d );
	
				addVertex( b );
				addVertex( c );
				addVertex( d );
	
	
				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
	
				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );
	
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );
	
			}
	
			function addVertex( index ) {
	
				indicesArray.push( verticesArray.length / 3 );
				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );
	
			}
	
	
			function addUV( vector2 ) {
	
				uvArray.push( vector2.x );
				uvArray.push( vector2.y );
	
			}
	
			if ( ! options.arrays ) {
	
				this.setIndex( indicesArray );
				this.addAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
				this.addAttribute( 'uv', new Float32BufferAttribute( options.arrays.uv, 2 ) );
	
			}
	
		};
	
		ExtrudeGeometry.WorldUVGenerator = {
	
			generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {
	
				var a_x = vertices[ indexA * 3 ];
				var a_y = vertices[ indexA * 3 + 1 ];
				var b_x = vertices[ indexB * 3 ];
				var b_y = vertices[ indexB * 3 + 1 ];
				var c_x = vertices[ indexC * 3 ];
				var c_y = vertices[ indexC * 3 + 1 ];
	
				return [
					new Vector2( a_x, a_y ),
					new Vector2( b_x, b_y ),
					new Vector2( c_x, c_y )
				];
	
			},
	
			generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {
	
				var a_x = vertices[ indexA * 3 ];
				var a_y = vertices[ indexA * 3 + 1 ];
				var a_z = vertices[ indexA * 3 + 2 ];
				var b_x = vertices[ indexB * 3 ];
				var b_y = vertices[ indexB * 3 + 1 ];
				var b_z = vertices[ indexB * 3 + 2 ];
				var c_x = vertices[ indexC * 3 ];
				var c_y = vertices[ indexC * 3 + 1 ];
				var c_z = vertices[ indexC * 3 + 2 ];
				var d_x = vertices[ indexD * 3 ];
				var d_y = vertices[ indexD * 3 + 1 ];
				var d_z = vertices[ indexD * 3 + 2 ];
	
				if ( Math.abs( a_y - b_y ) < 0.01 ) {
	
					return [
						new Vector2( a_x, 1 - a_z ),
						new Vector2( b_x, 1 - b_z ),
						new Vector2( c_x, 1 - c_z ),
						new Vector2( d_x, 1 - d_z )
					];
	
				} else {
	
					return [
						new Vector2( a_y, 1 - a_z ),
						new Vector2( b_y, 1 - b_z ),
						new Vector2( c_y, 1 - c_z ),
						new Vector2( d_y, 1 - d_z )
					];
	
				}
	
			}
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Text = 3D Text
		 *
		 * parameters = {
		 *  font: <THREE.Font>, // font
		 *
		 *  size: <float>, // size of the text
		 *  height: <float>, // thickness to extrude text
		 *  curveSegments: <int>, // number of points on the curves
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into text bevel goes
		 *  bevelSize: <float> // how far from text outline is bevel
		 * }
		 */
	
		// TextGeometry
	
		function TextGeometry( text, parameters ) {
	
			Geometry.call( this );
	
			this.type = 'TextGeometry';
	
			this.parameters = {
				text: text,
				parameters: parameters
			};
	
			this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
			this.mergeVertices();
	
		}
	
		TextGeometry.prototype = Object.create( Geometry.prototype );
		TextGeometry.prototype.constructor = TextGeometry;
	
		// TextBufferGeometry
	
		function TextBufferGeometry( text, parameters ) {
	
			parameters = parameters || {};
	
			var font = parameters.font;
	
			if ( ! ( font && font.isFont ) ) {
	
				console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
				return new Geometry();
	
			}
	
			var shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );
	
			// translate parameters to ExtrudeGeometry API
	
			parameters.amount = parameters.height !== undefined ? parameters.height : 50;
	
			// defaults
	
			if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
			if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
			if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;
	
			ExtrudeBufferGeometry.call( this, shapes, parameters );
	
			this.type = 'TextBufferGeometry';
	
		}
	
		TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
		TextBufferGeometry.prototype.constructor = TextBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// SphereGeometry
	
		function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'SphereGeometry';
	
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		SphereGeometry.prototype = Object.create( Geometry.prototype );
		SphereGeometry.prototype.constructor = SphereGeometry;
	
		// SphereBufferGeometry
	
		function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'SphereBufferGeometry';
	
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			radius = radius || 1;
	
			widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
			heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
	
			phiStart = phiStart !== undefined ? phiStart : 0;
			phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
	
			var thetaEnd = thetaStart + thetaLength;
	
			var ix, iy;
	
			var index = 0;
			var grid = [];
	
			var vertex = new Vector3();
			var normal = new Vector3();
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// generate vertices, normals and uvs
	
			for ( iy = 0; iy <= heightSegments; iy ++ ) {
	
				var verticesRow = [];
	
				var v = iy / heightSegments;
	
				for ( ix = 0; ix <= widthSegments; ix ++ ) {
	
					var u = ix / widthSegments;
	
					// vertex
	
					vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
					vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
					vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					normal.set( vertex.x, vertex.y, vertex.z ).normalize();
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( u, 1 - v );
	
					verticesRow.push( index ++ );
	
				}
	
				grid.push( verticesRow );
	
			}
	
			// indices
	
			for ( iy = 0; iy < heightSegments; iy ++ ) {
	
				for ( ix = 0; ix < widthSegments; ix ++ ) {
	
					var a = grid[ iy ][ ix + 1 ];
					var b = grid[ iy ][ ix ];
					var c = grid[ iy + 1 ][ ix ];
					var d = grid[ iy + 1 ][ ix + 1 ];
	
					if ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );
					if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
	
		/**
		 * @author Kaleb Murphy
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// RingGeometry
	
		function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'RingGeometry';
	
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		RingGeometry.prototype = Object.create( Geometry.prototype );
		RingGeometry.prototype.constructor = RingGeometry;
	
		// RingBufferGeometry
	
		function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'RingBufferGeometry';
	
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			innerRadius = innerRadius || 0.5;
			outerRadius = outerRadius || 1;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
			phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// some helper variables
	
			var segment;
			var radius = innerRadius;
			var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
			var vertex = new Vector3();
			var uv = new Vector2();
			var j, i;
	
			// generate vertices, normals and uvs
	
			for ( j = 0; j <= phiSegments; j ++ ) {
	
				for ( i = 0; i <= thetaSegments; i ++ ) {
	
					// values are generate from the inside of the ring to the outside
	
					segment = thetaStart + i / thetaSegments * thetaLength;
	
					// vertex
	
					vertex.x = radius * Math.cos( segment );
					vertex.y = radius * Math.sin( segment );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					normals.push( 0, 0, 1 );
	
					// uv
	
					uv.x = ( vertex.x / outerRadius + 1 ) / 2;
					uv.y = ( vertex.y / outerRadius + 1 ) / 2;
	
					uvs.push( uv.x, uv.y );
	
				}
	
				// increase the radius for next row of vertices
	
				radius += radiusStep;
	
			}
	
			// indices
	
			for ( j = 0; j < phiSegments; j ++ ) {
	
				var thetaSegmentLevel = j * ( thetaSegments + 1 );
	
				for ( i = 0; i < thetaSegments; i ++ ) {
	
					segment = i + thetaSegmentLevel;
	
					var a = segment;
					var b = segment + thetaSegments + 1;
					var c = segment + thetaSegments + 2;
					var d = segment + 1;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		RingBufferGeometry.prototype.constructor = RingBufferGeometry;
	
		/**
		 * @author astrodud / http://astrodud.isgreat.org/
		 * @author zz85 / https://github.com/zz85
		 * @author bhouston / http://clara.io
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// LatheGeometry
	
		function LatheGeometry( points, segments, phiStart, phiLength ) {
	
			Geometry.call( this );
	
			this.type = 'LatheGeometry';
	
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
	
			this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
			this.mergeVertices();
	
		}
	
		LatheGeometry.prototype = Object.create( Geometry.prototype );
		LatheGeometry.prototype.constructor = LatheGeometry;
	
		// LatheBufferGeometry
	
		function LatheBufferGeometry( points, segments, phiStart, phiLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'LatheBufferGeometry';
	
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
	
			segments = Math.floor( segments ) || 12;
			phiStart = phiStart || 0;
			phiLength = phiLength || Math.PI * 2;
	
			// clamp phiLength so it's in range of [ 0, 2PI ]
	
			phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );
	
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var uvs = [];
	
			// helper variables
	
			var base;
			var inverseSegments = 1.0 / segments;
			var vertex = new Vector3();
			var uv = new Vector2();
			var i, j;
	
			// generate vertices and uvs
	
			for ( i = 0; i <= segments; i ++ ) {
	
				var phi = phiStart + i * inverseSegments * phiLength;
	
				var sin = Math.sin( phi );
				var cos = Math.cos( phi );
	
				for ( j = 0; j <= ( points.length - 1 ); j ++ ) {
	
					// vertex
	
					vertex.x = points[ j ].x * sin;
					vertex.y = points[ j ].y;
					vertex.z = points[ j ].x * cos;
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// uv
	
					uv.x = i / segments;
					uv.y = j / ( points.length - 1 );
	
					uvs.push( uv.x, uv.y );
	
	
				}
	
			}
	
			// indices
	
			for ( i = 0; i < segments; i ++ ) {
	
				for ( j = 0; j < ( points.length - 1 ); j ++ ) {
	
					base = j + i * points.length;
	
					var a = base;
					var b = base + points.length;
					var c = base + points.length + 1;
					var d = base + 1;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			// generate normals
	
			this.computeVertexNormals();
	
			// if the geometry is closed, we need to average the normals along the seam.
			// because the corresponding vertices are identical (but still have different UVs).
	
			if ( phiLength === Math.PI * 2 ) {
	
				var normals = this.attributes.normal.array;
				var n1 = new Vector3();
				var n2 = new Vector3();
				var n = new Vector3();
	
				// this is the buffer offset for the last line of vertices
	
				base = segments * points.length * 3;
	
				for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {
	
					// select the normal of the vertex in the first line
	
					n1.x = normals[ j + 0 ];
					n1.y = normals[ j + 1 ];
					n1.z = normals[ j + 2 ];
	
					// select the normal of the vertex in the last line
	
					n2.x = normals[ base + j + 0 ];
					n2.y = normals[ base + j + 1 ];
					n2.z = normals[ base + j + 2 ];
	
					// average normals
	
					n.addVectors( n1, n2 ).normalize();
	
					// assign the new values to both normals
	
					normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
					normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
					normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;
	
				}
	
			}
	
		}
	
		LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
	
		/**
		 * @author jonobr1 / http://jonobr1.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// ShapeGeometry
	
		function ShapeGeometry( shapes, curveSegments ) {
	
			Geometry.call( this );
	
			this.type = 'ShapeGeometry';
	
			if ( typeof curveSegments === 'object' ) {
	
				console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );
	
				curveSegments = curveSegments.curveSegments;
	
			}
	
			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			};
	
			this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
			this.mergeVertices();
	
		}
	
		ShapeGeometry.prototype = Object.create( Geometry.prototype );
		ShapeGeometry.prototype.constructor = ShapeGeometry;
	
		// ShapeBufferGeometry
	
		function ShapeBufferGeometry( shapes, curveSegments ) {
	
			BufferGeometry.call( this );
	
			this.type = 'ShapeBufferGeometry';
	
			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			};
	
			curveSegments = curveSegments || 12;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var groupStart = 0;
			var groupCount = 0;
	
			// allow single and array values for "shapes" parameter
	
			if ( Array.isArray( shapes ) === false ) {
	
				addShape( shapes );
	
			} else {
	
				for ( var i = 0; i < shapes.length; i ++ ) {
	
					addShape( shapes[ i ] );
	
					this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support
	
					groupStart += groupCount;
					groupCount = 0;
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
	
			// helper functions
	
			function addShape( shape ) {
	
				var i, l, shapeHole;
	
				var indexOffset = vertices.length / 3;
				var points = shape.extractPoints( curveSegments );
	
				var shapeVertices = points.shape;
				var shapeHoles = points.holes;
	
				// check direction of vertices
	
				if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {
	
					shapeVertices = shapeVertices.reverse();
	
					// also check if holes are in the opposite direction
	
					for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
	
						shapeHole = shapeHoles[ i ];
	
						if ( ShapeUtils.isClockWise( shapeHole ) === true ) {
	
							shapeHoles[ i ] = shapeHole.reverse();
	
						}
	
					}
	
				}
	
				var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );
	
				// join vertices of inner and outer paths to a single array
	
				for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
	
					shapeHole = shapeHoles[ i ];
					shapeVertices = shapeVertices.concat( shapeHole );
	
				}
	
				// vertices, normals, uvs
	
				for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {
	
					var vertex = shapeVertices[ i ];
	
					vertices.push( vertex.x, vertex.y, 0 );
					normals.push( 0, 0, 1 );
					uvs.push( vertex.x, vertex.y ); // world uvs
	
				}
	
				// incides
	
				for ( i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					var a = face[ 0 ] + indexOffset;
					var b = face[ 1 ] + indexOffset;
					var c = face[ 2 ] + indexOffset;
	
					indices.push( a, b, c );
					groupCount += 3;
	
				}
	
			}
	
		}
	
		ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function EdgesGeometry( geometry, thresholdAngle ) {
	
			BufferGeometry.call( this );
	
			this.type = 'EdgesGeometry';
	
			this.parameters = {
				thresholdAngle: thresholdAngle
			};
	
			thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;
	
			// buffer
	
			var vertices = [];
	
			// helper variables
	
			var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
			var edge = [ 0, 0 ], edges = {}, edge1, edge2;
			var key, keys = [ 'a', 'b', 'c' ];
	
			// prepare source geometry
	
			var geometry2;
	
			if ( geometry.isBufferGeometry ) {
	
				geometry2 = new Geometry();
				geometry2.fromBufferGeometry( geometry );
	
			} else {
	
				geometry2 = geometry.clone();
	
			}
	
			geometry2.mergeVertices();
			geometry2.computeFaceNormals();
	
			var sourceVertices = geometry2.vertices;
			var faces = geometry2.faces;
	
			// now create a data structure where each entry represents an edge with its adjoining faces
	
			for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
				var face = faces[ i ];
	
				for ( var j = 0; j < 3; j ++ ) {
	
					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 );
					edge[ 1 ] = Math.max( edge1, edge2 );
	
					key = edge[ 0 ] + ',' + edge[ 1 ];
	
					if ( edges[ key ] === undefined ) {
	
						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };
	
					} else {
	
						edges[ key ].face2 = i;
	
					}
	
				}
	
			}
	
			// generate vertices
	
			for ( key in edges ) {
	
				var e = edges[ key ];
	
				// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.
	
				if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {
	
					var vertex = sourceVertices[ e.index1 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					vertex = sourceVertices[ e.index2 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
			}
	
			// build geometry
	
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	
		}
	
		EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
		EdgesGeometry.prototype.constructor = EdgesGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// CylinderGeometry
	
		function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'CylinderGeometry';
	
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		CylinderGeometry.prototype = Object.create( Geometry.prototype );
		CylinderGeometry.prototype.constructor = CylinderGeometry;
	
		// CylinderBufferGeometry
	
		function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'CylinderBufferGeometry';
	
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			var scope = this;
	
			radiusTop = radiusTop !== undefined ? radiusTop : 1;
			radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
			height = height || 1;
	
			radialSegments = Math.floor( radialSegments ) || 8;
			heightSegments = Math.floor( heightSegments ) || 1;
	
			openEnded = openEnded !== undefined ? openEnded : false;
			thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var index = 0;
			var indexArray = [];
			var halfHeight = height / 2;
			var groupStart = 0;
	
			// generate geometry
	
			generateTorso();
	
			if ( openEnded === false ) {
	
				if ( radiusTop > 0 ) generateCap( true );
				if ( radiusBottom > 0 ) generateCap( false );
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			function generateTorso() {
	
				var x, y;
				var normal = new Vector3();
				var vertex = new Vector3();
	
				var groupCount = 0;
	
				// this will be used to calculate the normal
				var slope = ( radiusBottom - radiusTop ) / height;
	
				// generate vertices, normals and uvs
	
				for ( y = 0; y <= heightSegments; y ++ ) {
	
					var indexRow = [];
	
					var v = y / heightSegments;
	
					// calculate the radius of the current row
	
					var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
	
					for ( x = 0; x <= radialSegments; x ++ ) {
	
						var u = x / radialSegments;
	
						var theta = u * thetaLength + thetaStart;
	
						var sinTheta = Math.sin( theta );
						var cosTheta = Math.cos( theta );
	
						// vertex
	
						vertex.x = radius * sinTheta;
						vertex.y = - v * height + halfHeight;
						vertex.z = radius * cosTheta;
						vertices.push( vertex.x, vertex.y, vertex.z );
	
						// normal
	
						normal.set( sinTheta, slope, cosTheta ).normalize();
						normals.push( normal.x, normal.y, normal.z );
	
						// uv
	
						uvs.push( u, 1 - v );
	
						// save index of vertex in respective row
	
						indexRow.push( index ++ );
	
					}
	
					// now save vertices of the row in our index array
	
					indexArray.push( indexRow );
	
				}
	
				// generate indices
	
				for ( x = 0; x < radialSegments; x ++ ) {
	
					for ( y = 0; y < heightSegments; y ++ ) {
	
						// we use the index array to access the correct indices
	
						var a = indexArray[ y ][ x ];
						var b = indexArray[ y + 1 ][ x ];
						var c = indexArray[ y + 1 ][ x + 1 ];
						var d = indexArray[ y ][ x + 1 ];
	
						// faces
	
						indices.push( a, b, d );
						indices.push( b, c, d );
	
						// update group counter
	
						groupCount += 6;
	
					}
	
				}
	
				// add a group to the geometry. this will ensure multi material support
	
				scope.addGroup( groupStart, groupCount, 0 );
	
				// calculate new start value for groups
	
				groupStart += groupCount;
	
			}
	
			function generateCap( top ) {
	
				var x, centerIndexStart, centerIndexEnd;
	
				var uv = new Vector2();
				var vertex = new Vector3();
	
				var groupCount = 0;
	
				var radius = ( top === true ) ? radiusTop : radiusBottom;
				var sign = ( top === true ) ? 1 : - 1;
	
				// save the index of the first center vertex
				centerIndexStart = index;
	
				// first we generate the center vertex data of the cap.
				// because the geometry needs one set of uvs per face,
				// we must generate a center vertex per face/segment
	
				for ( x = 1; x <= radialSegments; x ++ ) {
	
					// vertex
	
					vertices.push( 0, halfHeight * sign, 0 );
	
					// normal
	
					normals.push( 0, sign, 0 );
	
					// uv
	
					uvs.push( 0.5, 0.5 );
	
					// increase index
	
					index ++;
	
				}
	
				// save the index of the last center vertex
	
				centerIndexEnd = index;
	
				// now we generate the surrounding vertices, normals and uvs
	
				for ( x = 0; x <= radialSegments; x ++ ) {
	
					var u = x / radialSegments;
					var theta = u * thetaLength + thetaStart;
	
					var cosTheta = Math.cos( theta );
					var sinTheta = Math.sin( theta );
	
					// vertex
	
					vertex.x = radius * sinTheta;
					vertex.y = halfHeight * sign;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					normals.push( 0, sign, 0 );
	
					// uv
	
					uv.x = ( cosTheta * 0.5 ) + 0.5;
					uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
					uvs.push( uv.x, uv.y );
	
					// increase index
	
					index ++;
	
				}
	
				// generate indices
	
				for ( x = 0; x < radialSegments; x ++ ) {
	
					var c = centerIndexStart + x;
					var i = centerIndexEnd + x;
	
					if ( top === true ) {
	
						// face top
	
						indices.push( i, i + 1, c );
	
					} else {
	
						// face bottom
	
						indices.push( i + 1, i, c );
	
					}
	
					groupCount += 3;
	
				}
	
				// add a group to the geometry. this will ensure multi material support
	
				scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
	
				// calculate new start value for groups
	
				groupStart += groupCount;
	
			}
	
		}
	
		CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
	
		/**
		 * @author abelnation / http://github.com/abelnation
		 */
	
		// ConeGeometry
	
		function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
	
			this.type = 'ConeGeometry';
	
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
		}
	
		ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
		ConeGeometry.prototype.constructor = ConeGeometry;
	
		// ConeBufferGeometry
	
		function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
	
			this.type = 'ConeBufferGeometry';
	
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
		}
	
		ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
		ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * @author Mugen87 / https://github.com/Mugen87
		 * @author hughes
		 */
	
		// CircleGeometry
	
		function CircleGeometry( radius, segments, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'CircleGeometry';
	
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		CircleGeometry.prototype = Object.create( Geometry.prototype );
		CircleGeometry.prototype.constructor = CircleGeometry;
	
		// CircleBufferGeometry
	
		function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'CircleBufferGeometry';
	
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			radius = radius || 1;
			segments = segments !== undefined ? Math.max( 3, segments ) : 8;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var i, s;
			var vertex = new Vector3();
			var uv = new Vector2();
	
			// center point
	
			vertices.push( 0, 0, 0 );
			normals.push( 0, 0, 1 );
			uvs.push( 0.5, 0.5 );
	
			for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {
	
				var segment = thetaStart + s / segments * thetaLength;
	
				// vertex
	
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
	
				vertices.push( vertex.x, vertex.y, vertex.z );
	
				// normal
	
				normals.push( 0, 0, 1 );
	
				// uvs
	
				uv.x = ( vertices[ i ] / radius + 1 ) / 2;
				uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;
	
				uvs.push( uv.x, uv.y );
	
			}
	
			// indices
	
			for ( i = 1; i <= segments; i ++ ) {
	
				indices.push( i, i + 1, 0 );
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.addAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.addAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
	
	
	
		var Geometries = Object.freeze({
			WireframeGeometry: WireframeGeometry,
			ParametricGeometry: ParametricGeometry,
			ParametricBufferGeometry: ParametricBufferGeometry,
			TetrahedronGeometry: TetrahedronGeometry,
			TetrahedronBufferGeometry: TetrahedronBufferGeometry,
			OctahedronGeometry: OctahedronGeometry,
			OctahedronBufferGeometry: OctahedronBufferGeometry,
			IcosahedronGeometry: IcosahedronGeometry,
			IcosahedronBufferGeometry: IcosahedronBufferGeometry,
			DodecahedronGeometry: DodecahedronGeometry,
			DodecahedronBufferGeometry: DodecahedronBufferGeometry,
			PolyhedronGeometry: PolyhedronGeometry,
			PolyhedronBufferGeometry: PolyhedronBufferGeometry,
			TubeGeometry: TubeGeometry,
			TubeBufferGeometry: TubeBufferGeometry,
			TorusKnotGeometry: TorusKnotGeometry,
			TorusKnotBufferGeometry: TorusKnotBufferGeometry,
			TorusGeometry: TorusGeometry,
			TorusBufferGeometry: TorusBufferGeometry,
			TextGeometry: TextGeometry,
			TextBufferGeometry: TextBufferGeometry,
			SphereGeometry: SphereGeometry,
			SphereBufferGeometry: SphereBufferGeometry,
			RingGeometry: RingGeometry,
			RingBufferGeometry: RingBufferGeometry,
			PlaneGeometry: PlaneGeometry,
			PlaneBufferGeometry: PlaneBufferGeometry,
			LatheGeometry: LatheGeometry,
			LatheBufferGeometry: LatheBufferGeometry,
			ShapeGeometry: ShapeGeometry,
			ShapeBufferGeometry: ShapeBufferGeometry,
			ExtrudeGeometry: ExtrudeGeometry,
			ExtrudeBufferGeometry: ExtrudeBufferGeometry,
			EdgesGeometry: EdgesGeometry,
			ConeGeometry: ConeGeometry,
			ConeBufferGeometry: ConeBufferGeometry,
			CylinderGeometry: CylinderGeometry,
			CylinderBufferGeometry: CylinderBufferGeometry,
			CircleGeometry: CircleGeometry,
			CircleBufferGeometry: CircleBufferGeometry,
			BoxGeometry: BoxGeometry,
			BoxBufferGeometry: BoxBufferGeometry
		});
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * parameters = {
		 *  color: <THREE.Color>,
		 *  opacity: <float>
		 * }
		 */
	
		function ShadowMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'ShadowMaterial';
	
			this.color = new Color( 0x000000 );
			this.opacity = 1.0;
	
			this.lights = true;
			this.transparent = true;
	
			this.setValues( parameters );
	
		}
	
		ShadowMaterial.prototype = Object.create( Material.prototype );
		ShadowMaterial.prototype.constructor = ShadowMaterial;
	
		ShadowMaterial.prototype.isShadowMaterial = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function RawShaderMaterial( parameters ) {
	
			ShaderMaterial.call( this, parameters );
	
			this.type = 'RawShaderMaterial';
	
		}
	
		RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
		RawShaderMaterial.prototype.constructor = RawShaderMaterial;
	
		RawShaderMaterial.prototype.isRawShaderMaterial = true;
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  roughness: <float>,
		 *  metalness: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  roughnessMap: new THREE.Texture( <Image> ),
		 *
		 *  metalnessMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  envMapIntensity: <float>
		 *
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshStandardMaterial( parameters ) {
	
			Material.call( this );
	
			this.defines = { 'STANDARD': '' };
	
			this.type = 'MeshStandardMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
			this.roughness = 0.5;
			this.metalness = 0.5;
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.roughnessMap = null;
	
			this.metalnessMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.envMapIntensity = 1.0;
	
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshStandardMaterial.prototype = Object.create( Material.prototype );
		MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
	
		MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
	
		MeshStandardMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.defines = { 'STANDARD': '' };
	
			this.color.copy( source.color );
			this.roughness = source.roughness;
			this.metalness = source.metalness;
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.roughnessMap = source.roughnessMap;
	
			this.metalnessMap = source.metalnessMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.envMapIntensity = source.envMapIntensity;
	
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  reflectivity: <float>
		 * }
		 */
	
		function MeshPhysicalMaterial( parameters ) {
	
			MeshStandardMaterial.call( this );
	
			this.defines = { 'PHYSICAL': '' };
	
			this.type = 'MeshPhysicalMaterial';
	
			this.reflectivity = 0.5; // maps to F0 = 0.04
	
			this.clearCoat = 0.0;
			this.clearCoatRoughness = 0.0;
	
			this.setValues( parameters );
	
		}
	
		MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
		MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
	
		MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
	
		MeshPhysicalMaterial.prototype.copy = function ( source ) {
	
			MeshStandardMaterial.prototype.copy.call( this, source );
	
			this.defines = { 'PHYSICAL': '' };
	
			this.reflectivity = source.reflectivity;
	
			this.clearCoat = source.clearCoat;
			this.clearCoatRoughness = source.clearCoatRoughness;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  specular: <hex>,
		 *  shininess: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshPhongMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshPhongMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
			this.specular = new Color( 0x111111 );
			this.shininess = 30;
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshPhongMaterial.prototype = Object.create( Material.prototype );
		MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
	
		MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
	
		MeshPhongMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
			this.specular.copy( source.specular );
			this.shininess = source.shininess;
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author takahirox / http://github.com/takahirox
		 *
		 * parameters = {
		 *  gradientMap: new THREE.Texture( <Image> )
		 * }
		 */
	
		function MeshToonMaterial( parameters ) {
	
			MeshPhongMaterial.call( this );
	
			this.defines = { 'TOON': '' };
	
			this.type = 'MeshToonMaterial';
	
			this.gradientMap = null;
	
			this.setValues( parameters );
	
		}
	
		MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
		MeshToonMaterial.prototype.constructor = MeshToonMaterial;
	
		MeshToonMaterial.prototype.isMeshToonMaterial = true;
	
		MeshToonMaterial.prototype.copy = function ( source ) {
	
			MeshPhongMaterial.prototype.copy.call( this, source );
	
			this.gradientMap = source.gradientMap;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  opacity: <float>,
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshNormalMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshNormalMaterial';
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false;
			this.lights = false;
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshNormalMaterial.prototype = Object.create( Material.prototype );
		MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
	
		MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
	
		MeshNormalMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshLambertMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshLambertMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshLambertMaterial.prototype = Object.create( Material.prototype );
		MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
	
		MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
	
		MeshLambertMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *
		 *  scale: <float>,
		 *  dashSize: <float>,
		 *  gapSize: <float>
		 * }
		 */
	
		function LineDashedMaterial( parameters ) {
	
			LineBasicMaterial.call( this );
	
			this.type = 'LineDashedMaterial';
	
			this.scale = 1;
			this.dashSize = 3;
			this.gapSize = 1;
	
			this.setValues( parameters );
	
		}
	
		LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
		LineDashedMaterial.prototype.constructor = LineDashedMaterial;
	
		LineDashedMaterial.prototype.isLineDashedMaterial = true;
	
		LineDashedMaterial.prototype.copy = function ( source ) {
	
			LineBasicMaterial.prototype.copy.call( this, source );
	
			this.scale = source.scale;
			this.dashSize = source.dashSize;
			this.gapSize = source.gapSize;
	
			return this;
	
		};
	
	
	
		var Materials = Object.freeze({
			ShadowMaterial: ShadowMaterial,
			SpriteMaterial: SpriteMaterial,
			RawShaderMaterial: RawShaderMaterial,
			ShaderMaterial: ShaderMaterial,
			PointsMaterial: PointsMaterial,
			MeshPhysicalMaterial: MeshPhysicalMaterial,
			MeshStandardMaterial: MeshStandardMaterial,
			MeshPhongMaterial: MeshPhongMaterial,
			MeshToonMaterial: MeshToonMaterial,
			MeshNormalMaterial: MeshNormalMaterial,
			MeshLambertMaterial: MeshLambertMaterial,
			MeshDepthMaterial: MeshDepthMaterial,
			MeshDistanceMaterial: MeshDistanceMaterial,
			MeshBasicMaterial: MeshBasicMaterial,
			LineDashedMaterial: LineDashedMaterial,
			LineBasicMaterial: LineBasicMaterial,
			Material: Material
		});
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var Cache = {
	
			enabled: false,
	
			files: {},
	
			add: function ( key, file ) {
	
				if ( this.enabled === false ) return;
	
				// console.log( 'THREE.Cache', 'Adding key:', key );
	
				this.files[ key ] = file;
	
			},
	
			get: function ( key ) {
	
				if ( this.enabled === false ) return;
	
				// console.log( 'THREE.Cache', 'Checking key:', key );
	
				return this.files[ key ];
	
			},
	
			remove: function ( key ) {
	
				delete this.files[ key ];
	
			},
	
			clear: function () {
	
				this.files = {};
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LoadingManager( onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var isLoading = false;
			var itemsLoaded = 0;
			var itemsTotal = 0;
			var urlModifier = undefined;
	
			this.onStart = undefined;
			this.onLoad = onLoad;
			this.onProgress = onProgress;
			this.onError = onError;
	
			this.itemStart = function ( url ) {
	
				itemsTotal ++;
	
				if ( isLoading === false ) {
	
					if ( scope.onStart !== undefined ) {
	
						scope.onStart( url, itemsLoaded, itemsTotal );
	
					}
	
				}
	
				isLoading = true;
	
			};
	
			this.itemEnd = function ( url ) {
	
				itemsLoaded ++;
	
				if ( scope.onProgress !== undefined ) {
	
					scope.onProgress( url, itemsLoaded, itemsTotal );
	
				}
	
				if ( itemsLoaded === itemsTotal ) {
	
					isLoading = false;
	
					if ( scope.onLoad !== undefined ) {
	
						scope.onLoad();
	
					}
	
				}
	
			};
	
			this.itemError = function ( url ) {
	
				if ( scope.onError !== undefined ) {
	
					scope.onError( url );
	
				}
	
			};
	
			this.resolveURL = function ( url ) {
	
				if ( urlModifier ) {
	
					return urlModifier( url );
	
				}
	
				return url;
	
			};
	
			this.setURLModifier = function ( transform ) {
	
				urlModifier = transform;
	
			};
	
		}
	
		var DefaultLoadingManager = new LoadingManager();
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var loading = {};
	
		function FileLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( FileLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( url === undefined ) url = '';
	
				if ( this.path !== undefined ) url = this.path + url;
	
				url = this.manager.resolveURL( url );
	
				var scope = this;
	
				var cached = Cache.get( url );
	
				if ( cached !== undefined ) {
	
					scope.manager.itemStart( url );
	
					setTimeout( function () {
	
						if ( onLoad ) onLoad( cached );
	
						scope.manager.itemEnd( url );
	
					}, 0 );
	
					return cached;
	
				}
	
				// Check if request is duplicate
	
				if ( loading[ url ] !== undefined ) {
	
					loading[ url ].push( {
	
						onLoad: onLoad,
						onProgress: onProgress,
						onError: onError
	
					} );
	
					return;
	
				}
	
				// Check for data: URI
				var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
				var dataUriRegexResult = url.match( dataUriRegex );
	
				// Safari can not handle Data URIs through XMLHttpRequest so process manually
				if ( dataUriRegexResult ) {
	
					var mimeType = dataUriRegexResult[ 1 ];
					var isBase64 = !! dataUriRegexResult[ 2 ];
					var data = dataUriRegexResult[ 3 ];
	
					data = window.decodeURIComponent( data );
	
					if ( isBase64 ) data = window.atob( data );
	
					try {
	
						var response;
						var responseType = ( this.responseType || '' ).toLowerCase();
	
						switch ( responseType ) {
	
							case 'arraybuffer':
							case 'blob':
	
								var view = new Uint8Array( data.length );
	
								for ( var i = 0; i < data.length; i ++ ) {
	
									view[ i ] = data.charCodeAt( i );
	
								}
	
								if ( responseType === 'blob' ) {
	
									response = new Blob( [ view.buffer ], { type: mimeType } );
	
								} else {
	
									response = view.buffer;
	
								}
	
								break;
	
							case 'document':
	
								var parser = new DOMParser();
								response = parser.parseFromString( data, mimeType );
	
								break;
	
							case 'json':
	
								response = JSON.parse( data );
	
								break;
	
							default: // 'text' or other
	
								response = data;
	
								break;
	
						}
	
						// Wait for next browser tick like standard XMLHttpRequest event dispatching does
						window.setTimeout( function () {
	
							if ( onLoad ) onLoad( response );
	
							scope.manager.itemEnd( url );
	
						}, 0 );
	
					} catch ( error ) {
	
						// Wait for next browser tick like standard XMLHttpRequest event dispatching does
						window.setTimeout( function () {
	
							if ( onError ) onError( error );
	
							scope.manager.itemEnd( url );
							scope.manager.itemError( url );
	
						}, 0 );
	
					}
	
				} else {
	
					// Initialise array for duplicate requests
	
					loading[ url ] = [];
	
					loading[ url ].push( {
	
						onLoad: onLoad,
						onProgress: onProgress,
						onError: onError
	
					} );
	
					var request = new XMLHttpRequest();
	
					request.open( 'GET', url, true );
	
					request.addEventListener( 'load', function ( event ) {
	
						var response = event.target.response;
	
						Cache.add( url, response );
	
						var callbacks = loading[ url ];
	
						delete loading[ url ];
	
						if ( this.status === 200 ) {
	
							for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
								var callback = callbacks[ i ];
								if ( callback.onLoad ) callback.onLoad( response );
	
							}
	
							scope.manager.itemEnd( url );
	
						} else if ( this.status === 0 ) {
	
							// Some browsers return HTTP Status 0 when using non-http protocol
							// e.g. 'file://' or 'data://'. Handle as success.
	
							console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );
	
							for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
								var callback = callbacks[ i ];
								if ( callback.onLoad ) callback.onLoad( response );
	
							}
	
							scope.manager.itemEnd( url );
	
						} else {
	
							for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
								var callback = callbacks[ i ];
								if ( callback.onError ) callback.onError( event );
	
							}
	
							scope.manager.itemEnd( url );
							scope.manager.itemError( url );
	
						}
	
					}, false );
	
					request.addEventListener( 'progress', function ( event ) {
	
						var callbacks = loading[ url ];
	
						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
							var callback = callbacks[ i ];
							if ( callback.onProgress ) callback.onProgress( event );
	
						}
	
					}, false );
	
					request.addEventListener( 'error', function ( event ) {
	
						var callbacks = loading[ url ];
	
						delete loading[ url ];
	
						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
							var callback = callbacks[ i ];
							if ( callback.onError ) callback.onError( event );
	
						}
	
						scope.manager.itemEnd( url );
						scope.manager.itemError( url );
	
					}, false );
	
					if ( this.responseType !== undefined ) request.responseType = this.responseType;
					if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;
	
					if ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );
	
					for ( var header in this.requestHeader ) {
	
						request.setRequestHeader( header, this.requestHeader[ header ] );
	
					}
	
					request.send( null );
	
				}
	
				scope.manager.itemStart( url );
	
				return request;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			},
	
			setResponseType: function ( value ) {
	
				this.responseType = value;
				return this;
	
			},
	
			setWithCredentials: function ( value ) {
	
				this.withCredentials = value;
				return this;
	
			},
	
			setMimeType: function ( value ) {
	
				this.mimeType = value;
				return this;
	
			},
	
			setRequestHeader: function ( value ) {
	
				this.requestHeader = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * Abstract Base class to block based textures loader (dds, pvr, ...)
		 */
	
		function CompressedTextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
			// override in sub classes
			this._parser = null;
	
		}
	
		Object.assign( CompressedTextureLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var images = [];
	
				var texture = new CompressedTexture();
				texture.image = images;
	
				var loader = new FileLoader( this.manager );
				loader.setPath( this.path );
				loader.setResponseType( 'arraybuffer' );
	
				function loadTexture( i ) {
	
					loader.load( url[ i ], function ( buffer ) {
	
						var texDatas = scope._parser( buffer, true );
	
						images[ i ] = {
							width: texDatas.width,
							height: texDatas.height,
							format: texDatas.format,
							mipmaps: texDatas.mipmaps
						};
	
						loaded += 1;
	
						if ( loaded === 6 ) {
	
							if ( texDatas.mipmapCount === 1 )
								texture.minFilter = LinearFilter;
	
							texture.format = texDatas.format;
							texture.needsUpdate = true;
	
							if ( onLoad ) onLoad( texture );
	
						}
	
					}, onProgress, onError );
	
				}
	
				if ( Array.isArray( url ) ) {
	
					var loaded = 0;
	
					for ( var i = 0, il = url.length; i < il; ++ i ) {
	
						loadTexture( i );
	
					}
	
				} else {
	
					// compressed cubemap texture stored in a single DDS file
	
					loader.load( url, function ( buffer ) {
	
						var texDatas = scope._parser( buffer, true );
	
						if ( texDatas.isCubemap ) {
	
							var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
	
							for ( var f = 0; f < faces; f ++ ) {
	
								images[ f ] = { mipmaps: [] };
	
								for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
	
									images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
									images[ f ].format = texDatas.format;
									images[ f ].width = texDatas.width;
									images[ f ].height = texDatas.height;
	
								}
	
							}
	
						} else {
	
							texture.image.width = texDatas.width;
							texture.image.height = texDatas.height;
							texture.mipmaps = texDatas.mipmaps;
	
						}
	
						if ( texDatas.mipmapCount === 1 ) {
	
							texture.minFilter = LinearFilter;
	
						}
	
						texture.format = texDatas.format;
						texture.needsUpdate = true;
	
						if ( onLoad ) onLoad( texture );
	
					}, onProgress, onError );
	
				}
	
				return texture;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author Nikos M. / https://github.com/foo123/
		 *
		 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
		 */
	
		function DataTextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
			// override in sub classes
			this._parser = null;
	
		}
	
		Object.assign( DataTextureLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var texture = new DataTexture();
	
				var loader = new FileLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
	
				loader.load( url, function ( buffer ) {
	
					var texData = scope._parser( buffer );
	
					if ( ! texData ) return;
	
					if ( undefined !== texData.image ) {
	
						texture.image = texData.image;
	
					} else if ( undefined !== texData.data ) {
	
						texture.image.width = texData.width;
						texture.image.height = texData.height;
						texture.image.data = texData.data;
	
					}
	
					texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : ClampToEdgeWrapping;
					texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : ClampToEdgeWrapping;
	
					texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : LinearFilter;
					texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : LinearMipMapLinearFilter;
	
					texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;
	
					if ( undefined !== texData.format ) {
	
						texture.format = texData.format;
	
					}
					if ( undefined !== texData.type ) {
	
						texture.type = texData.type;
	
					}
	
					if ( undefined !== texData.mipmaps ) {
	
						texture.mipmaps = texData.mipmaps;
	
					}
	
					if ( 1 === texData.mipmapCount ) {
	
						texture.minFilter = LinearFilter;
	
					}
	
					texture.needsUpdate = true;
	
					if ( onLoad ) onLoad( texture, texData );
	
				}, onProgress, onError );
	
	
				return texture;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ImageLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( ImageLoader.prototype, {
	
			crossOrigin: 'Anonymous',
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( url === undefined ) url = '';
	
				if ( this.path !== undefined ) url = this.path + url;
	
				url = this.manager.resolveURL( url );
	
				var scope = this;
	
				var cached = Cache.get( url );
	
				if ( cached !== undefined ) {
	
					scope.manager.itemStart( url );
	
					setTimeout( function () {
	
						if ( onLoad ) onLoad( cached );
	
						scope.manager.itemEnd( url );
	
					}, 0 );
	
					return cached;
	
				}
	
				var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
	
				image.addEventListener( 'load', function () {
	
					Cache.add( url, this );
	
					if ( onLoad ) onLoad( this );
	
					scope.manager.itemEnd( url );
	
				}, false );
	
				/*
				image.addEventListener( 'progress', function ( event ) {
	
					if ( onProgress ) onProgress( event );
	
				}, false );
				*/
	
				image.addEventListener( 'error', function ( event ) {
	
					if ( onError ) onError( event );
	
					scope.manager.itemEnd( url );
					scope.manager.itemError( url );
	
				}, false );
	
				if ( url.substr( 0, 5 ) !== 'data:' ) {
	
					if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
	
				}
	
				scope.manager.itemStart( url );
	
				image.src = url;
	
				return image;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
				return this;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CubeTextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( CubeTextureLoader.prototype, {
	
			crossOrigin: 'Anonymous',
	
			load: function ( urls, onLoad, onProgress, onError ) {
	
				var texture = new CubeTexture();
	
				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );
	
				var loaded = 0;
	
				function loadTexture( i ) {
	
					loader.load( urls[ i ], function ( image ) {
	
						texture.images[ i ] = image;
	
						loaded ++;
	
						if ( loaded === 6 ) {
	
							texture.needsUpdate = true;
	
							if ( onLoad ) onLoad( texture );
	
						}
	
					}, undefined, onError );
	
				}
	
				for ( var i = 0; i < urls.length; ++ i ) {
	
					loadTexture( i );
	
				}
	
				return texture;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
				return this;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function TextureLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( TextureLoader.prototype, {
	
			crossOrigin: 'Anonymous',
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );
	
				var texture = new Texture();
				texture.image = loader.load( url, function () {
	
					// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
					var isJPEG = url.search( /\.(jpg|jpeg)$/ ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;
	
					texture.format = isJPEG ? RGBFormat : RGBAFormat;
					texture.needsUpdate = true;
	
					if ( onLoad !== undefined ) {
	
						onLoad( texture );
	
					}
	
				}, onProgress, onError );
	
				return texture;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
				return this;
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Light( color, intensity ) {
	
			Object3D.call( this );
	
			this.type = 'Light';
	
			this.color = new Color( color );
			this.intensity = intensity !== undefined ? intensity : 1;
	
			this.receiveShadow = undefined;
	
		}
	
		Light.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Light,
	
			isLight: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.color.copy( source.color );
				this.intensity = source.intensity;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.color = this.color.getHex();
				data.object.intensity = this.intensity;
	
				if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
	
				if ( this.distance !== undefined ) data.object.distance = this.distance;
				if ( this.angle !== undefined ) data.object.angle = this.angle;
				if ( this.decay !== undefined ) data.object.decay = this.decay;
				if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;
	
				if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function HemisphereLight( skyColor, groundColor, intensity ) {
	
			Light.call( this, skyColor, intensity );
	
			this.type = 'HemisphereLight';
	
			this.castShadow = undefined;
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.groundColor = new Color( groundColor );
	
		}
	
		HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: HemisphereLight,
	
			isHemisphereLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.groundColor.copy( source.groundColor );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LightShadow( camera ) {
	
			this.camera = camera;
	
			this.bias = 0;
			this.radius = 1;
	
			this.mapSize = new Vector2( 512, 512 );
	
			this.map = null;
			this.matrix = new Matrix4();
	
		}
	
		Object.assign( LightShadow.prototype, {
	
			copy: function ( source ) {
	
				this.camera = source.camera.clone();
	
				this.bias = source.bias;
				this.radius = source.radius;
	
				this.mapSize.copy( source.mapSize );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			toJSON: function () {
	
				var object = {};
	
				if ( this.bias !== 0 ) object.bias = this.bias;
				if ( this.radius !== 1 ) object.radius = this.radius;
				if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();
	
				object.camera = this.camera.toJSON( false ).object;
				delete object.camera.matrix;
	
				return object;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function SpotLightShadow() {
	
			LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );
	
		}
	
		SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
	
			constructor: SpotLightShadow,
	
			isSpotLightShadow: true,
	
			update: function ( light ) {
	
				var camera = this.camera;
	
				var fov = _Math.RAD2DEG * 2 * light.angle;
				var aspect = this.mapSize.width / this.mapSize.height;
				var far = light.distance || camera.far;
	
				if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
	
					camera.fov = fov;
					camera.aspect = aspect;
					camera.far = far;
					camera.updateProjectionMatrix();
	
				}
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function SpotLight( color, intensity, distance, angle, penumbra, decay ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'SpotLight';
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.target = new Object3D();
	
			Object.defineProperty( this, 'power', {
				get: function () {
	
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * Math.PI;
	
				},
				set: function ( power ) {
	
					// intensity = power per solid angle.
					// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / Math.PI;
	
				}
			} );
	
			this.distance = ( distance !== undefined ) ? distance : 0;
			this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
			this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
			this.shadow = new SpotLightShadow();
	
		}
	
		SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: SpotLight,
	
			isSpotLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.distance = source.distance;
				this.angle = source.angle;
				this.penumbra = source.penumbra;
				this.decay = source.decay;
	
				this.target = source.target.clone();
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
	
		function PointLight( color, intensity, distance, decay ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'PointLight';
	
			Object.defineProperty( this, 'power', {
				get: function () {
	
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					return this.intensity * 4 * Math.PI;
	
				},
				set: function ( power ) {
	
					// intensity = power per solid angle.
					// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf
					this.intensity = power / ( 4 * Math.PI );
	
				}
			} );
	
			this.distance = ( distance !== undefined ) ? distance : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
			this.shadow = new LightShadow( new PerspectiveCamera( 90, 1, 0.5, 500 ) );
	
		}
	
		PointLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: PointLight,
	
			isPointLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.distance = source.distance;
				this.decay = source.decay;
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function DirectionalLightShadow( ) {
	
			LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
	
		}
	
		DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
	
			constructor: DirectionalLightShadow
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function DirectionalLight( color, intensity ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'DirectionalLight';
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.target = new Object3D();
	
			this.shadow = new DirectionalLightShadow();
	
		}
	
		DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: DirectionalLight,
	
			isDirectionalLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.target = source.target.clone();
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AmbientLight( color, intensity ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'AmbientLight';
	
			this.castShadow = undefined;
	
		}
	
		AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: AmbientLight,
	
			isAmbientLight: true
	
		} );
	
		/**
		 * @author abelnation / http://github.com/abelnation
		 */
	
		function RectAreaLight( color, intensity, width, height ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'RectAreaLight';
	
			this.position.set( 0, 1, 0 );
			this.updateMatrix();
	
			this.width = ( width !== undefined ) ? width : 10;
			this.height = ( height !== undefined ) ? height : 10;
	
			// TODO (abelnation): distance/decay
	
			// TODO (abelnation): update method for RectAreaLight to update transform to lookat target
	
			// TODO (abelnation): shadows
	
		}
	
		// TODO (abelnation): RectAreaLight update when light shape is changed
		RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: RectAreaLight,
	
			isRectAreaLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.width = source.width;
				this.height = source.height;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Light.prototype.toJSON.call( this, meta );
	
				data.object.width = this.width;
				data.object.height = this.height;
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author tschw
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */
	
		var AnimationUtils = {
	
			// same as Array.prototype.slice, but also works on typed arrays
			arraySlice: function ( array, from, to ) {
	
				if ( AnimationUtils.isTypedArray( array ) ) {
	
					// in ios9 array.subarray(from, undefined) will return empty array
					// but array.subarray(from) or array.subarray(from, len) is correct
					return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );
	
				}
	
				return array.slice( from, to );
	
			},
	
			// converts an array to a specific type
			convertArray: function ( array, type, forceClone ) {
	
				if ( ! array || // let 'undefined' and 'null' pass
						! forceClone && array.constructor === type ) return array;
	
				if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
	
					return new type( array ); // create typed array
	
				}
	
				return Array.prototype.slice.call( array ); // create Array
	
			},
	
			isTypedArray: function ( object ) {
	
				return ArrayBuffer.isView( object ) &&
						! ( object instanceof DataView );
	
			},
	
			// returns an array by which times and values can be sorted
			getKeyframeOrder: function ( times ) {
	
				function compareTime( i, j ) {
	
					return times[ i ] - times[ j ];
	
				}
	
				var n = times.length;
				var result = new Array( n );
				for ( var i = 0; i !== n; ++ i ) result[ i ] = i;
	
				result.sort( compareTime );
	
				return result;
	
			},
	
			// uses the array previously returned by 'getKeyframeOrder' to sort data
			sortedArray: function ( values, stride, order ) {
	
				var nValues = values.length;
				var result = new values.constructor( nValues );
	
				for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
	
					var srcOffset = order[ i ] * stride;
	
					for ( var j = 0; j !== stride; ++ j ) {
	
						result[ dstOffset ++ ] = values[ srcOffset + j ];
	
					}
	
				}
	
				return result;
	
			},
	
			// function for parsing AOS keyframe formats
			flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {
	
				var i = 1, key = jsonKeys[ 0 ];
	
				while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
	
					key = jsonKeys[ i ++ ];
	
				}
	
				if ( key === undefined ) return; // no data
	
				var value = key[ valuePropertyName ];
				if ( value === undefined ) return; // no data
	
				if ( Array.isArray( value ) ) {
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							values.push.apply( values, value ); // push all elements
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				} else if ( value.toArray !== undefined ) {
	
					// ...assume THREE.Math-ish
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							value.toArray( values, values.length );
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				} else {
	
					// otherwise push as-is
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							values.push( value );
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				}
	
			}
	
		};
	
		/**
		 * Abstract base class of interpolants over parametric samples.
		 *
		 * The parameter domain is one dimensional, typically the time or a path
		 * along a curve defined by the data.
		 *
		 * The sample values can have any dimensionality and derived classes may
		 * apply special interpretations to the data.
		 *
		 * This class provides the interval seek in a Template Method, deferring
		 * the actual interpolation to derived classes.
		 *
		 * Time complexity is O(1) for linear access crossing at most two points
		 * and O(log N) for random access, where N is the number of positions.
		 *
		 * References:
		 *
		 * 		http://www.oodesign.com/template-method-pattern.html
		 *
		 * @author tschw
		 */
	
		function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			this.parameterPositions = parameterPositions;
			this._cachedIndex = 0;
	
			this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
			this.sampleValues = sampleValues;
			this.valueSize = sampleSize;
	
		}
	
		Object.assign( Interpolant.prototype, {
	
			evaluate: function ( t ) {
	
				var pp = this.parameterPositions,
					i1 = this._cachedIndex,
	
					t1 = pp[ i1 ],
					t0 = pp[ i1 - 1 ];
	
				validate_interval: {
	
					seek: {
	
						var right;
	
						linear_scan: {
	
							//- See http://jsperf.com/comparison-to-undefined/3
							//- slower code:
							//-
							//- 				if ( t >= t1 || t1 === undefined ) {
							forward_scan: if ( ! ( t < t1 ) ) {
	
								for ( var giveUpAt = i1 + 2; ; ) {
	
									if ( t1 === undefined ) {
	
										if ( t < t0 ) break forward_scan;
	
										// after end
	
										i1 = pp.length;
										this._cachedIndex = i1;
										return this.afterEnd_( i1 - 1, t, t0 );
	
									}
	
									if ( i1 === giveUpAt ) break; // this loop
	
									t0 = t1;
									t1 = pp[ ++ i1 ];
	
									if ( t < t1 ) {
	
										// we have arrived at the sought interval
										break seek;
	
									}
	
								}
	
								// prepare binary search on the right side of the index
								right = pp.length;
								break linear_scan;
	
							}
	
							//- slower code:
							//-					if ( t < t0 || t0 === undefined ) {
							if ( ! ( t >= t0 ) ) {
	
								// looping?
	
								var t1global = pp[ 1 ];
	
								if ( t < t1global ) {
	
									i1 = 2; // + 1, using the scan for the details
									t0 = t1global;
	
								}
	
								// linear reverse scan
	
								for ( var giveUpAt = i1 - 2; ; ) {
	
									if ( t0 === undefined ) {
	
										// before start
	
										this._cachedIndex = 0;
										return this.beforeStart_( 0, t, t1 );
	
									}
	
									if ( i1 === giveUpAt ) break; // this loop
	
									t1 = t0;
									t0 = pp[ -- i1 - 1 ];
	
									if ( t >= t0 ) {
	
										// we have arrived at the sought interval
										break seek;
	
									}
	
								}
	
								// prepare binary search on the left side of the index
								right = i1;
								i1 = 0;
								break linear_scan;
	
							}
	
							// the interval is valid
	
							break validate_interval;
	
						} // linear scan
	
						// binary search
	
						while ( i1 < right ) {
	
							var mid = ( i1 + right ) >>> 1;
	
							if ( t < pp[ mid ] ) {
	
								right = mid;
	
							} else {
	
								i1 = mid + 1;
	
							}
	
						}
	
						t1 = pp[ i1 ];
						t0 = pp[ i1 - 1 ];
	
						// check boundary cases, again
	
						if ( t0 === undefined ) {
	
							this._cachedIndex = 0;
							return this.beforeStart_( 0, t, t1 );
	
						}
	
						if ( t1 === undefined ) {
	
							i1 = pp.length;
							this._cachedIndex = i1;
							return this.afterEnd_( i1 - 1, t0, t );
	
						}
	
					} // seek
	
					this._cachedIndex = i1;
	
					this.intervalChanged_( i1, t0, t1 );
	
				} // validate_interval
	
				return this.interpolate_( i1, t0, t, t1 );
	
			},
	
			settings: null, // optional, subclass-specific settings structure
			// Note: The indirection allows central control of many interpolants.
	
			// --- Protected interface
	
			DefaultSettings_: {},
	
			getSettings_: function () {
	
				return this.settings || this.DefaultSettings_;
	
			},
	
			copySampleValue_: function ( index ) {
	
				// copies a sample value to the result buffer
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
					offset = index * stride;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] = values[ offset + i ];
	
				}
	
				return result;
	
			},
	
			// Template methods for derived classes:
	
			interpolate_: function ( /* i1, t0, t, t1 */ ) {
	
				throw new Error( 'call to abstract method' );
				// implementations shall return this.resultBuffer
	
			},
	
			intervalChanged_: function ( /* i1, t0, t1 */ ) {
	
				// empty
	
			}
	
		} );
	
		//!\ DECLARE ALIAS AFTER assign prototype !
		Object.assign( Interpolant.prototype, {
	
			//( 0, t, t0 ), returns this.resultBuffer
			beforeStart_: Interpolant.prototype.copySampleValue_,
	
			//( N-1, tN-1, t ), returns this.resultBuffer
			afterEnd_: Interpolant.prototype.copySampleValue_,
	
		} );
	
		/**
		 * Fast and simple cubic spline interpolant.
		 *
		 * It was derived from a Hermitian construction setting the first derivative
		 * at each sample position to the linear slope between neighboring positions
		 * over their parameter interval.
		 *
		 * @author tschw
		 */
	
		function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
			this._weightPrev = - 0;
			this._offsetPrev = - 0;
			this._weightNext = - 0;
			this._offsetNext = - 0;
	
		}
	
		CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: CubicInterpolant,
	
			DefaultSettings_: {
	
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
	
			},
	
			intervalChanged_: function ( i1, t0, t1 ) {
	
				var pp = this.parameterPositions,
					iPrev = i1 - 2,
					iNext = i1 + 1,
	
					tPrev = pp[ iPrev ],
					tNext = pp[ iNext ];
	
				if ( tPrev === undefined ) {
	
					switch ( this.getSettings_().endingStart ) {
	
						case ZeroSlopeEnding:
	
							// f'(t0) = 0
							iPrev = i1;
							tPrev = 2 * t0 - t1;
	
							break;
	
						case WrapAroundEnding:
	
							// use the other end of the curve
							iPrev = pp.length - 2;
							tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
	
							break;
	
						default: // ZeroCurvatureEnding
	
							// f''(t0) = 0 a.k.a. Natural Spline
							iPrev = i1;
							tPrev = t1;
	
					}
	
				}
	
				if ( tNext === undefined ) {
	
					switch ( this.getSettings_().endingEnd ) {
	
						case ZeroSlopeEnding:
	
							// f'(tN) = 0
							iNext = i1;
							tNext = 2 * t1 - t0;
	
							break;
	
						case WrapAroundEnding:
	
							// use the other end of the curve
							iNext = 1;
							tNext = t1 + pp[ 1 ] - pp[ 0 ];
	
							break;
	
						default: // ZeroCurvatureEnding
	
							// f''(tN) = 0, a.k.a. Natural Spline
							iNext = i1 - 1;
							tNext = t0;
	
					}
	
				}
	
				var halfDt = ( t1 - t0 ) * 0.5,
					stride = this.valueSize;
	
				this._weightPrev = halfDt / ( t0 - tPrev );
				this._weightNext = halfDt / ( tNext - t1 );
				this._offsetPrev = iPrev * stride;
				this._offsetNext = iNext * stride;
	
			},
	
			interpolate_: function ( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					o1 = i1 * stride,		o0 = o1 - stride,
					oP = this._offsetPrev, 	oN = this._offsetNext,
					wP = this._weightPrev,	wN = this._weightNext,
	
					p = ( t - t0 ) / ( t1 - t0 ),
					pp = p * p,
					ppp = pp * p;
	
				// evaluate polynomials
	
				var sP = - wP * ppp + 2 * wP * pp - wP * p;
				var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
				var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
				var sN = wN * ppp - wN * pp;
	
				// combine data linearly
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] =
							sP * values[ oP + i ] +
							s0 * values[ o0 + i ] +
							s1 * values[ o1 + i ] +
							sN * values[ oN + i ];
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 * @author tschw
		 */
	
		function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: LinearInterpolant,
	
			interpolate_: function ( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					offset1 = i1 * stride,
					offset0 = offset1 - stride,
	
					weight1 = ( t - t0 ) / ( t1 - t0 ),
					weight0 = 1 - weight1;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] =
							values[ offset0 + i ] * weight0 +
							values[ offset1 + i ] * weight1;
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 *
		 * Interpolant that evaluates to the sample value at the position preceeding
		 * the parameter.
		 *
		 * @author tschw
		 */
	
		function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: DiscreteInterpolant,
	
			interpolate_: function ( i1 /*, t0, t, t1 */ ) {
	
				return this.copySampleValue_( i1 - 1 );
	
			}
	
		} );
	
		var KeyframeTrackPrototype;
	
		KeyframeTrackPrototype = {
	
			TimeBufferType: Float32Array,
			ValueBufferType: Float32Array,
	
			DefaultInterpolation: InterpolateLinear,
	
			InterpolantFactoryMethodDiscrete: function ( result ) {
	
				return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodLinear: function ( result ) {
	
				return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodSmooth: function ( result ) {
	
				return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			setInterpolation: function ( interpolation ) {
	
				var factoryMethod;
	
				switch ( interpolation ) {
	
					case InterpolateDiscrete:
	
						factoryMethod = this.InterpolantFactoryMethodDiscrete;
	
						break;
	
					case InterpolateLinear:
	
						factoryMethod = this.InterpolantFactoryMethodLinear;
	
						break;
	
					case InterpolateSmooth:
	
						factoryMethod = this.InterpolantFactoryMethodSmooth;
	
						break;
	
				}
	
				if ( factoryMethod === undefined ) {
	
					var message = "unsupported interpolation for " +
							this.ValueTypeName + " keyframe track named " + this.name;
	
					if ( this.createInterpolant === undefined ) {
	
						// fall back to default, unless the default itself is messed up
						if ( interpolation !== this.DefaultInterpolation ) {
	
							this.setInterpolation( this.DefaultInterpolation );
	
						} else {
	
							throw new Error( message ); // fatal, in this case
	
						}
	
					}
	
					console.warn( 'THREE.KeyframeTrackPrototype:', message );
					return;
	
				}
	
				this.createInterpolant = factoryMethod;
	
			},
	
			getInterpolation: function () {
	
				switch ( this.createInterpolant ) {
	
					case this.InterpolantFactoryMethodDiscrete:
	
						return InterpolateDiscrete;
	
					case this.InterpolantFactoryMethodLinear:
	
						return InterpolateLinear;
	
					case this.InterpolantFactoryMethodSmooth:
	
						return InterpolateSmooth;
	
				}
	
			},
	
			getValueSize: function () {
	
				return this.values.length / this.times.length;
	
			},
	
			// move all keyframes either forwards or backwards in time
			shift: function ( timeOffset ) {
	
				if ( timeOffset !== 0.0 ) {
	
					var times = this.times;
	
					for ( var i = 0, n = times.length; i !== n; ++ i ) {
	
						times[ i ] += timeOffset;
	
					}
	
				}
	
				return this;
	
			},
	
			// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
			scale: function ( timeScale ) {
	
				if ( timeScale !== 1.0 ) {
	
					var times = this.times;
	
					for ( var i = 0, n = times.length; i !== n; ++ i ) {
	
						times[ i ] *= timeScale;
	
					}
	
				}
	
				return this;
	
			},
	
			// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
			// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
			trim: function ( startTime, endTime ) {
	
				var times = this.times,
					nKeys = times.length,
					from = 0,
					to = nKeys - 1;
	
				while ( from !== nKeys && times[ from ] < startTime ) ++ from;
				while ( to !== - 1 && times[ to ] > endTime ) -- to;
	
				++ to; // inclusive -> exclusive bound
	
				if ( from !== 0 || to !== nKeys ) {
	
					// empty tracks are forbidden, so keep at least one keyframe
					if ( from >= to ) to = Math.max( to, 1 ), from = to - 1;
	
					var stride = this.getValueSize();
					this.times = AnimationUtils.arraySlice( times, from, to );
					this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );
	
				}
	
				return this;
	
			},
	
			// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
			validate: function () {
	
				var valid = true;
	
				var valueSize = this.getValueSize();
				if ( valueSize - Math.floor( valueSize ) !== 0 ) {
	
					console.error( 'THREE.KeyframeTrackPrototype: Invalid value size in track.', this );
					valid = false;
	
				}
	
				var times = this.times,
					values = this.values,
	
					nKeys = times.length;
	
				if ( nKeys === 0 ) {
	
					console.error( 'THREE.KeyframeTrackPrototype: Track is empty.', this );
					valid = false;
	
				}
	
				var prevTime = null;
	
				for ( var i = 0; i !== nKeys; i ++ ) {
	
					var currTime = times[ i ];
	
					if ( typeof currTime === 'number' && isNaN( currTime ) ) {
	
						console.error( 'THREE.KeyframeTrackPrototype: Time is not a valid number.', this, i, currTime );
						valid = false;
						break;
	
					}
	
					if ( prevTime !== null && prevTime > currTime ) {
	
						console.error( 'THREE.KeyframeTrackPrototype: Out of order keys.', this, i, currTime, prevTime );
						valid = false;
						break;
	
					}
	
					prevTime = currTime;
	
				}
	
				if ( values !== undefined ) {
	
					if ( AnimationUtils.isTypedArray( values ) ) {
	
						for ( var i = 0, n = values.length; i !== n; ++ i ) {
	
							var value = values[ i ];
	
							if ( isNaN( value ) ) {
	
								console.error( 'THREE.KeyframeTrackPrototype: Value is not a valid number.', this, i, value );
								valid = false;
								break;
	
							}
	
						}
	
					}
	
				}
	
				return valid;
	
			},
	
			// removes equivalent sequential keys as common in morph target sequences
			// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
			optimize: function () {
	
				var times = this.times,
					values = this.values,
					stride = this.getValueSize(),
	
					smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
	
					writeIndex = 1,
					lastIndex = times.length - 1;
	
				for ( var i = 1; i < lastIndex; ++ i ) {
	
					var keep = false;
	
					var time = times[ i ];
					var timeNext = times[ i + 1 ];
	
					// remove adjacent keyframes scheduled at the same time
	
					if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {
	
						if ( ! smoothInterpolation ) {
	
							// remove unnecessary keyframes same as their neighbors
	
							var offset = i * stride,
								offsetP = offset - stride,
								offsetN = offset + stride;
	
							for ( var j = 0; j !== stride; ++ j ) {
	
								var value = values[ offset + j ];
	
								if ( value !== values[ offsetP + j ] ||
										value !== values[ offsetN + j ] ) {
	
									keep = true;
									break;
	
								}
	
							}
	
						} else keep = true;
	
					}
	
					// in-place compaction
	
					if ( keep ) {
	
						if ( i !== writeIndex ) {
	
							times[ writeIndex ] = times[ i ];
	
							var readOffset = i * stride,
								writeOffset = writeIndex * stride;
	
							for ( var j = 0; j !== stride; ++ j )
	
								values[ writeOffset + j ] = values[ readOffset + j ];
	
						}
	
						++ writeIndex;
	
					}
	
				}
	
				// flush last keyframe (compaction looks ahead)
	
				if ( lastIndex > 0 ) {
	
					times[ writeIndex ] = times[ lastIndex ];
	
					for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j )
	
						values[ writeOffset + j ] = values[ readOffset + j ];
	
					++ writeIndex;
	
				}
	
				if ( writeIndex !== times.length ) {
	
					this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
					this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );
	
				}
	
				return this;
	
			}
	
		};
	
		function KeyframeTrackConstructor( name, times, values, interpolation ) {
	
			if ( name === undefined ) throw new Error( 'track name is undefined' );
	
			if ( times === undefined || times.length === 0 ) {
	
				throw new Error( 'no keyframes in track named ' + name );
	
			}
	
			this.name = name;
	
			this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
			this.values = AnimationUtils.convertArray( values, this.ValueBufferType );
	
			this.setInterpolation( interpolation || this.DefaultInterpolation );
	
			this.validate();
			this.optimize();
	
		}
	
		/**
		 *
		 * A Track of vectored keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function VectorKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: VectorKeyframeTrack,
	
			ValueTypeName: 'vector'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
		} );
	
		/**
		 * Spherical linear unit quaternion interpolant.
		 *
		 * @author tschw
		 */
	
		function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: QuaternionLinearInterpolant,
	
			interpolate_: function ( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					offset = i1 * stride,
	
					alpha = ( t - t0 ) / ( t1 - t0 );
	
				for ( var end = offset + stride; offset !== end; offset += 4 ) {
	
					Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 *
		 * A Track of quaternion keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function QuaternionKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: QuaternionKeyframeTrack,
	
			ValueTypeName: 'quaternion',
	
			// ValueBufferType is inherited
	
			DefaultInterpolation: InterpolateLinear,
	
			InterpolantFactoryMethodLinear: function ( result ) {
	
				return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodSmooth: undefined // not yet implemented
	
		} );
	
		/**
		 *
		 * A Track of numeric keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function NumberKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: NumberKeyframeTrack,
	
			ValueTypeName: 'number'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
		} );
	
		/**
		 *
		 * A Track that interpolates Strings
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function StringKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: StringKeyframeTrack,
	
			ValueTypeName: 'string',
			ValueBufferType: Array,
	
			DefaultInterpolation: InterpolateDiscrete,
	
			InterpolantFactoryMethodLinear: undefined,
	
			InterpolantFactoryMethodSmooth: undefined
	
		} );
	
		/**
		 *
		 * A Track of Boolean keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function BooleanKeyframeTrack( name, times, values ) {
	
			KeyframeTrackConstructor.call( this, name, times, values );
	
		}
	
		BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: BooleanKeyframeTrack,
	
			ValueTypeName: 'bool',
			ValueBufferType: Array,
	
			DefaultInterpolation: InterpolateDiscrete,
	
			InterpolantFactoryMethodLinear: undefined,
			InterpolantFactoryMethodSmooth: undefined
	
			// Note: Actually this track could have a optimized / compressed
			// representation of a single value and a custom interpolant that
			// computes "firstValue ^ isOdd( index )".
	
		} );
	
		/**
		 *
		 * A Track of keyframe values that represent color.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function ColorKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.call( this, name, times, values, interpolation );
	
		}
	
		ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrackPrototype ), {
	
			constructor: ColorKeyframeTrack,
	
			ValueTypeName: 'color'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
	
			// Note: Very basic implementation and nothing special yet.
			// However, this is the place for color space parameterization.
	
		} );
	
		/**
		 *
		 * A timed sequence of keyframes for a specific property.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function KeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrackConstructor.apply( this, name, times, values, interpolation );
	
		}
	
		KeyframeTrack.prototype = KeyframeTrackPrototype;
		KeyframeTrackPrototype.constructor = KeyframeTrack;
	
		// Static methods:
	
		Object.assign( KeyframeTrack, {
	
			// Serialization (in static context, because of constructor invocation
			// and automatic invocation of .toJSON):
	
			parse: function ( json ) {
	
				if ( json.type === undefined ) {
	
					throw new Error( 'track type undefined, can not parse' );
	
				}
	
				var trackType = KeyframeTrack._getTrackTypeForValueTypeName( json.type );
	
				if ( json.times === undefined ) {
	
					var times = [], values = [];
	
					AnimationUtils.flattenJSON( json.keys, times, values, 'value' );
	
					json.times = times;
					json.values = values;
	
				}
	
				// derived classes can define a static parse method
				if ( trackType.parse !== undefined ) {
	
					return trackType.parse( json );
	
				} else {
	
					// by default, we assume a constructor compatible with the base
					return new trackType( json.name, json.times, json.values, json.interpolation );
	
				}
	
			},
	
			toJSON: function ( track ) {
	
				var trackType = track.constructor;
	
				var json;
	
				// derived classes can define a static toJSON method
				if ( trackType.toJSON !== undefined ) {
	
					json = trackType.toJSON( track );
	
				} else {
	
					// by default, we assume the data can be serialized as-is
					json = {
	
						'name': track.name,
						'times': AnimationUtils.convertArray( track.times, Array ),
						'values': AnimationUtils.convertArray( track.values, Array )
	
					};
	
					var interpolation = track.getInterpolation();
	
					if ( interpolation !== track.DefaultInterpolation ) {
	
						json.interpolation = interpolation;
	
					}
	
				}
	
				json.type = track.ValueTypeName; // mandatory
	
				return json;
	
			},
	
			_getTrackTypeForValueTypeName: function ( typeName ) {
	
				switch ( typeName.toLowerCase() ) {
	
					case 'scalar':
					case 'double':
					case 'float':
					case 'number':
					case 'integer':
	
						return NumberKeyframeTrack;
	
					case 'vector':
					case 'vector2':
					case 'vector3':
					case 'vector4':
	
						return VectorKeyframeTrack;
	
					case 'color':
	
						return ColorKeyframeTrack;
	
					case 'quaternion':
	
						return QuaternionKeyframeTrack;
	
					case 'bool':
					case 'boolean':
	
						return BooleanKeyframeTrack;
	
					case 'string':
	
						return StringKeyframeTrack;
	
				}
	
				throw new Error( 'Unsupported typeName: ' + typeName );
	
			}
	
		} );
	
		/**
		 *
		 * Reusable set of Tracks that represent an animation.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */
	
		function AnimationClip( name, duration, tracks ) {
	
			this.name = name;
			this.tracks = tracks;
			this.duration = ( duration !== undefined ) ? duration : - 1;
	
			this.uuid = _Math.generateUUID();
	
			// this means it should figure out its duration by scanning the tracks
			if ( this.duration < 0 ) {
	
				this.resetDuration();
	
			}
	
			this.optimize();
	
		}
	
		Object.assign( AnimationClip, {
	
			parse: function ( json ) {
	
				var tracks = [],
					jsonTracks = json.tracks,
					frameTime = 1.0 / ( json.fps || 1.0 );
	
				for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {
	
					tracks.push( KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );
	
				}
	
				return new AnimationClip( json.name, json.duration, tracks );
	
			},
	
			toJSON: function ( clip ) {
	
				var tracks = [],
					clipTracks = clip.tracks;
	
				var json = {
	
					'name': clip.name,
					'duration': clip.duration,
					'tracks': tracks
	
				};
	
				for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {
	
					tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
	
				}
	
				return json;
	
			},
	
			CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {
	
				var numMorphTargets = morphTargetSequence.length;
				var tracks = [];
	
				for ( var i = 0; i < numMorphTargets; i ++ ) {
	
					var times = [];
					var values = [];
	
					times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );
	
					values.push( 0, 1, 0 );
	
					var order = AnimationUtils.getKeyframeOrder( times );
					times = AnimationUtils.sortedArray( times, 1, order );
					values = AnimationUtils.sortedArray( values, 1, order );
	
					// if there is a key at the first frame, duplicate it as the
					// last frame as well for perfect loop.
					if ( ! noLoop && times[ 0 ] === 0 ) {
	
						times.push( numMorphTargets );
						values.push( values[ 0 ] );
	
					}
	
					tracks.push(
						new NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
	
				}
	
				return new AnimationClip( name, - 1, tracks );
	
			},
	
			findByName: function ( objectOrClipArray, name ) {
	
				var clipArray = objectOrClipArray;
	
				if ( ! Array.isArray( objectOrClipArray ) ) {
	
					var o = objectOrClipArray;
					clipArray = o.geometry && o.geometry.animations || o.animations;
	
				}
	
				for ( var i = 0; i < clipArray.length; i ++ ) {
	
					if ( clipArray[ i ].name === name ) {
	
						return clipArray[ i ];
	
					}
	
				}
	
				return null;
	
			},
	
			CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {
	
				var animationToMorphTargets = {};
	
				// tested with https://regex101.com/ on trick sequences
				// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
				var pattern = /^([\w-]*?)([\d]+)$/;
	
				// sort morph target names into animation groups based
				// patterns like Walk_001, Walk_002, Run_001, Run_002
				for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {
	
					var morphTarget = morphTargets[ i ];
					var parts = morphTarget.name.match( pattern );
	
					if ( parts && parts.length > 1 ) {
	
						var name = parts[ 1 ];
	
						var animationMorphTargets = animationToMorphTargets[ name ];
						if ( ! animationMorphTargets ) {
	
							animationToMorphTargets[ name ] = animationMorphTargets = [];
	
						}
	
						animationMorphTargets.push( morphTarget );
	
					}
	
				}
	
				var clips = [];
	
				for ( var name in animationToMorphTargets ) {
	
					clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
	
				}
	
				return clips;
	
			},
	
			// parse the animation.hierarchy format
			parseAnimation: function ( animation, bones ) {
	
				if ( ! animation ) {
	
					console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
					return null;
	
				}
	
				var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {
	
					// only return track if there are actually keys.
					if ( animationKeys.length !== 0 ) {
	
						var times = [];
						var values = [];
	
						AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );
	
						// empty keys are filtered out, so check again
						if ( times.length !== 0 ) {
	
							destTracks.push( new trackType( trackName, times, values ) );
	
						}
	
					}
	
				};
	
				var tracks = [];
	
				var clipName = animation.name || 'default';
				// automatic length determination in AnimationClip.
				var duration = animation.length || - 1;
				var fps = animation.fps || 30;
	
				var hierarchyTracks = animation.hierarchy || [];
	
				for ( var h = 0; h < hierarchyTracks.length; h ++ ) {
	
					var animationKeys = hierarchyTracks[ h ].keys;
	
					// skip empty tracks
					if ( ! animationKeys || animationKeys.length === 0 ) continue;
	
					// process morph targets
					if ( animationKeys[ 0 ].morphTargets ) {
	
						// figure out all morph targets used in this track
						var morphTargetNames = {};
	
						for ( var k = 0; k < animationKeys.length; k ++ ) {
	
							if ( animationKeys[ k ].morphTargets ) {
	
								for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {
	
									morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;
	
								}
	
							}
	
						}
	
						// create a track for each morph target with all zero
						// morphTargetInfluences except for the keys in which
						// the morphTarget is named.
						for ( var morphTargetName in morphTargetNames ) {
	
							var times = [];
							var values = [];
	
							for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {
	
								var animationKey = animationKeys[ k ];
	
								times.push( animationKey.time );
								values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
	
							}
	
							tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
	
						}
	
						duration = morphTargetNames.length * ( fps || 1.0 );
	
					} else {
	
						// ...assume skeletal animation
	
						var boneName = '.bones[' + bones[ h ].name + ']';
	
						addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );
	
						addNonemptyTrack(
							QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );
	
						addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );
	
					}
	
				}
	
				if ( tracks.length === 0 ) {
	
					return null;
	
				}
	
				var clip = new AnimationClip( clipName, duration, tracks );
	
				return clip;
	
			}
	
		} );
	
		Object.assign( AnimationClip.prototype, {
	
			resetDuration: function () {
	
				var tracks = this.tracks, duration = 0;
	
				for ( var i = 0, n = tracks.length; i !== n; ++ i ) {
	
					var track = this.tracks[ i ];
	
					duration = Math.max( duration, track.times[ track.times.length - 1 ] );
	
				}
	
				this.duration = duration;
	
			},
	
			trim: function () {
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					this.tracks[ i ].trim( 0, this.duration );
	
				}
	
				return this;
	
			},
	
			optimize: function () {
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					this.tracks[ i ].optimize();
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function MaterialLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
			this.textures = {};
	
		}
	
		Object.assign( MaterialLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new FileLoader( scope.manager );
				loader.load( url, function ( text ) {
	
					onLoad( scope.parse( JSON.parse( text ) ) );
	
				}, onProgress, onError );
	
			},
	
			setTextures: function ( value ) {
	
				this.textures = value;
	
			},
	
			parse: function ( json ) {
	
				var textures = this.textures;
	
				function getTexture( name ) {
	
					if ( textures[ name ] === undefined ) {
	
						console.warn( 'THREE.MaterialLoader: Undefined texture', name );
	
					}
	
					return textures[ name ];
	
				}
	
				var material = new Materials[ json.type ]();
	
				if ( json.uuid !== undefined ) material.uuid = json.uuid;
				if ( json.name !== undefined ) material.name = json.name;
				if ( json.color !== undefined ) material.color.setHex( json.color );
				if ( json.roughness !== undefined ) material.roughness = json.roughness;
				if ( json.metalness !== undefined ) material.metalness = json.metalness;
				if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
				if ( json.specular !== undefined ) material.specular.setHex( json.specular );
				if ( json.shininess !== undefined ) material.shininess = json.shininess;
				if ( json.clearCoat !== undefined ) material.clearCoat = json.clearCoat;
				if ( json.clearCoatRoughness !== undefined ) material.clearCoatRoughness = json.clearCoatRoughness;
				if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
				if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
				if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
				if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
				if ( json.fog !== undefined ) material.fog = json.fog;
				if ( json.flatShading !== undefined ) material.flatShading = json.flatShading;
				if ( json.blending !== undefined ) material.blending = json.blending;
				if ( json.side !== undefined ) material.side = json.side;
				if ( json.opacity !== undefined ) material.opacity = json.opacity;
				if ( json.transparent !== undefined ) material.transparent = json.transparent;
				if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
				if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
				if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
				if ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;
				if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
				if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
				if ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;
				if ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;
	
				if ( json.rotation !== undefined ) material.rotation = json.rotation;
	
				if ( json.linewidth !== 1 ) material.linewidth = json.linewidth;
				if ( json.dashSize !== undefined ) material.dashSize = json.dashSize;
				if ( json.gapSize !== undefined ) material.gapSize = json.gapSize;
				if ( json.scale !== undefined ) material.scale = json.scale;
	
				if ( json.skinning !== undefined ) material.skinning = json.skinning;
				if ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;
				if ( json.dithering !== undefined ) material.dithering = json.dithering;
	
				if ( json.visible !== undefined ) material.visible = json.visible;
				if ( json.userData !== undefined ) material.userData = json.userData;
	
				// Deprecated
	
				if ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading
	
				// for PointsMaterial
	
				if ( json.size !== undefined ) material.size = json.size;
				if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
	
				// maps
	
				if ( json.map !== undefined ) material.map = getTexture( json.map );
	
				if ( json.alphaMap !== undefined ) {
	
					material.alphaMap = getTexture( json.alphaMap );
					material.transparent = true;
	
				}
	
				if ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );
				if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
	
				if ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );
				if ( json.normalScale !== undefined ) {
	
					var normalScale = json.normalScale;
	
					if ( Array.isArray( normalScale ) === false ) {
	
						// Blender exporter used to export a scalar. See #7459
	
						normalScale = [ normalScale, normalScale ];
	
					}
	
					material.normalScale = new Vector2().fromArray( normalScale );
	
				}
	
				if ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );
				if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
				if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
	
				if ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );
				if ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );
	
				if ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );
				if ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;
	
				if ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );
	
				if ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );
	
				if ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;
	
				if ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );
				if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
	
				if ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );
				if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
	
				if ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );
	
				return material;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function BufferGeometryLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( BufferGeometryLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new FileLoader( scope.manager );
				loader.load( url, function ( text ) {
	
					onLoad( scope.parse( JSON.parse( text ) ) );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				var geometry = new BufferGeometry();
	
				var index = json.data.index;
	
				if ( index !== undefined ) {
	
					var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
					geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
	
				}
	
				var attributes = json.data.attributes;
	
				for ( var key in attributes ) {
	
					var attribute = attributes[ key ];
					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
	
					geometry.addAttribute( key, new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );
	
				}
	
				var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
	
				if ( groups !== undefined ) {
	
					for ( var i = 0, n = groups.length; i !== n; ++ i ) {
	
						var group = groups[ i ];
	
						geometry.addGroup( group.start, group.count, group.materialIndex );
	
					}
	
				}
	
				var boundingSphere = json.data.boundingSphere;
	
				if ( boundingSphere !== undefined ) {
	
					var center = new Vector3();
	
					if ( boundingSphere.center !== undefined ) {
	
						center.fromArray( boundingSphere.center );
	
					}
	
					geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
	
				}
	
				return geometry;
	
			}
	
		} );
	
		var TYPED_ARRAYS = {
			Int8Array: Int8Array,
			Uint8Array: Uint8Array,
			// Workaround for IE11 pre KB2929437. See #11440
			Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
			Int16Array: Int16Array,
			Uint16Array: Uint16Array,
			Int32Array: Int32Array,
			Uint32Array: Uint32Array,
			Float32Array: Float32Array,
			Float64Array: Float64Array
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Loader() {
	
			this.onLoadStart = function () {};
			this.onLoadProgress = function () {};
			this.onLoadComplete = function () {};
	
		}
	
		Loader.Handlers = {
	
			handlers: [],
	
			add: function ( regex, loader ) {
	
				this.handlers.push( regex, loader );
	
			},
	
			get: function ( file ) {
	
				var handlers = this.handlers;
	
				for ( var i = 0, l = handlers.length; i < l; i += 2 ) {
	
					var regex = handlers[ i ];
					var loader = handlers[ i + 1 ];
	
					if ( regex.test( file ) ) {
	
						return loader;
	
					}
	
				}
	
				return null;
	
			}
	
		};
	
		Object.assign( Loader.prototype, {
	
			crossOrigin: undefined,
	
			extractUrlBase: function ( url ) {
	
				var parts = url.split( '/' );
	
				if ( parts.length === 1 ) return './';
	
				parts.pop();
	
				return parts.join( '/' ) + '/';
	
			},
	
			initMaterials: function ( materials, texturePath, crossOrigin ) {
	
				var array = [];
	
				for ( var i = 0; i < materials.length; ++ i ) {
	
					array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );
	
				}
	
				return array;
	
			},
	
			createMaterial: ( function () {
	
				var BlendingMode = {
					NoBlending: NoBlending,
					NormalBlending: NormalBlending,
					AdditiveBlending: AdditiveBlending,
					SubtractiveBlending: SubtractiveBlending,
					MultiplyBlending: MultiplyBlending,
					CustomBlending: CustomBlending
				};
	
				var color = new Color();
				var textureLoader = new TextureLoader();
				var materialLoader = new MaterialLoader();
	
				return function createMaterial( m, texturePath, crossOrigin ) {
	
					// convert from old material format
	
					var textures = {};
	
					function loadTexture( path, repeat, offset, wrap, anisotropy ) {
	
						var fullPath = texturePath + path;
						var loader = Loader.Handlers.get( fullPath );
	
						var texture;
	
						if ( loader !== null ) {
	
							texture = loader.load( fullPath );
	
						} else {
	
							textureLoader.setCrossOrigin( crossOrigin );
							texture = textureLoader.load( fullPath );
	
						}
	
						if ( repeat !== undefined ) {
	
							texture.repeat.fromArray( repeat );
	
							if ( repeat[ 0 ] !== 1 ) texture.wrapS = RepeatWrapping;
							if ( repeat[ 1 ] !== 1 ) texture.wrapT = RepeatWrapping;
	
						}
	
						if ( offset !== undefined ) {
	
							texture.offset.fromArray( offset );
	
						}
	
						if ( wrap !== undefined ) {
	
							if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = RepeatWrapping;
							if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = MirroredRepeatWrapping;
	
							if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = RepeatWrapping;
							if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = MirroredRepeatWrapping;
	
						}
	
						if ( anisotropy !== undefined ) {
	
							texture.anisotropy = anisotropy;
	
						}
	
						var uuid = _Math.generateUUID();
	
						textures[ uuid ] = texture;
	
						return uuid;
	
					}
	
					//
	
					var json = {
						uuid: _Math.generateUUID(),
						type: 'MeshLambertMaterial'
					};
	
					for ( var name in m ) {
	
						var value = m[ name ];
	
						switch ( name ) {
	
							case 'DbgColor':
							case 'DbgIndex':
							case 'opticalDensity':
							case 'illumination':
								break;
							case 'DbgName':
								json.name = value;
								break;
							case 'blending':
								json.blending = BlendingMode[ value ];
								break;
							case 'colorAmbient':
							case 'mapAmbient':
								console.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );
								break;
							case 'colorDiffuse':
								json.color = color.fromArray( value ).getHex();
								break;
							case 'colorSpecular':
								json.specular = color.fromArray( value ).getHex();
								break;
							case 'colorEmissive':
								json.emissive = color.fromArray( value ).getHex();
								break;
							case 'specularCoef':
								json.shininess = value;
								break;
							case 'shading':
								if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
								if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
								if ( value.toLowerCase() === 'standard' ) json.type = 'MeshStandardMaterial';
								break;
							case 'mapDiffuse':
								json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
								break;
							case 'mapDiffuseRepeat':
							case 'mapDiffuseOffset':
							case 'mapDiffuseWrap':
							case 'mapDiffuseAnisotropy':
								break;
							case 'mapEmissive':
								json.emissiveMap = loadTexture( value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy );
								break;
							case 'mapEmissiveRepeat':
							case 'mapEmissiveOffset':
							case 'mapEmissiveWrap':
							case 'mapEmissiveAnisotropy':
								break;
							case 'mapLight':
								json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
								break;
							case 'mapLightRepeat':
							case 'mapLightOffset':
							case 'mapLightWrap':
							case 'mapLightAnisotropy':
								break;
							case 'mapAO':
								json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
								break;
							case 'mapAORepeat':
							case 'mapAOOffset':
							case 'mapAOWrap':
							case 'mapAOAnisotropy':
								break;
							case 'mapBump':
								json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
								break;
							case 'mapBumpScale':
								json.bumpScale = value;
								break;
							case 'mapBumpRepeat':
							case 'mapBumpOffset':
							case 'mapBumpWrap':
							case 'mapBumpAnisotropy':
								break;
							case 'mapNormal':
								json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
								break;
							case 'mapNormalFactor':
								json.normalScale = [ value, value ];
								break;
							case 'mapNormalRepeat':
							case 'mapNormalOffset':
							case 'mapNormalWrap':
							case 'mapNormalAnisotropy':
								break;
							case 'mapSpecular':
								json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
								break;
							case 'mapSpecularRepeat':
							case 'mapSpecularOffset':
							case 'mapSpecularWrap':
							case 'mapSpecularAnisotropy':
								break;
							case 'mapMetalness':
								json.metalnessMap = loadTexture( value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy );
								break;
							case 'mapMetalnessRepeat':
							case 'mapMetalnessOffset':
							case 'mapMetalnessWrap':
							case 'mapMetalnessAnisotropy':
								break;
							case 'mapRoughness':
								json.roughnessMap = loadTexture( value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy );
								break;
							case 'mapRoughnessRepeat':
							case 'mapRoughnessOffset':
							case 'mapRoughnessWrap':
							case 'mapRoughnessAnisotropy':
								break;
							case 'mapAlpha':
								json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
								break;
							case 'mapAlphaRepeat':
							case 'mapAlphaOffset':
							case 'mapAlphaWrap':
							case 'mapAlphaAnisotropy':
								break;
							case 'flipSided':
								json.side = BackSide;
								break;
							case 'doubleSided':
								json.side = DoubleSide;
								break;
							case 'transparency':
								console.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );
								json.opacity = value;
								break;
							case 'depthTest':
							case 'depthWrite':
							case 'colorWrite':
							case 'opacity':
							case 'reflectivity':
							case 'transparent':
							case 'visible':
							case 'wireframe':
								json[ name ] = value;
								break;
							case 'vertexColors':
								if ( value === true ) json.vertexColors = VertexColors;
								if ( value === 'face' ) json.vertexColors = FaceColors;
								break;
							default:
								console.error( 'THREE.Loader.createMaterial: Unsupported', name, value );
								break;
	
						}
	
					}
	
					if ( json.type === 'MeshBasicMaterial' ) delete json.emissive;
					if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;
	
					if ( json.opacity < 1 ) json.transparent = true;
	
					materialLoader.setTextures( textures );
	
					return materialLoader.parse( json );
	
				};
	
			} )()
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function JSONLoader( manager ) {
	
			if ( typeof manager === 'boolean' ) {
	
				console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
				manager = undefined;
	
			}
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
			this.withCredentials = false;
	
		}
	
		Object.assign( JSONLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : Loader.prototype.extractUrlBase( url );
	
				var loader = new FileLoader( this.manager );
				loader.setWithCredentials( this.withCredentials );
				loader.load( url, function ( text ) {
	
					var json = JSON.parse( text );
					var metadata = json.metadata;
	
					if ( metadata !== undefined ) {
	
						var type = metadata.type;
	
						if ( type !== undefined ) {
	
							if ( type.toLowerCase() === 'object' ) {
	
								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
								return;
	
							}
	
							if ( type.toLowerCase() === 'scene' ) {
	
								console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
								return;
	
							}
	
						}
	
					}
	
					var object = scope.parse( json, texturePath );
					onLoad( object.geometry, object.materials );
	
				}, onProgress, onError );
	
			},
	
			setTexturePath: function ( value ) {
	
				this.texturePath = value;
	
			},
	
			parse: ( function () {
	
				function parseModel( json, geometry ) {
	
					function isBitSet( value, position ) {
	
						return value & ( 1 << position );
	
					}
	
					var i, j, fi,
	
						offset, zLength,
	
						colorIndex, normalIndex, uvIndex, materialIndex,
	
						type,
						isQuad,
						hasMaterial,
						hasFaceVertexUv,
						hasFaceNormal, hasFaceVertexNormal,
						hasFaceColor, hasFaceVertexColor,
	
						vertex, face, faceA, faceB, hex, normal,
	
						uvLayer, uv, u, v,
	
						faces = json.faces,
						vertices = json.vertices,
						normals = json.normals,
						colors = json.colors,
	
						scale = json.scale,
	
						nUvLayers = 0;
	
	
					if ( json.uvs !== undefined ) {
	
						// disregard empty arrays
	
						for ( i = 0; i < json.uvs.length; i ++ ) {
	
							if ( json.uvs[ i ].length ) nUvLayers ++;
	
						}
	
						for ( i = 0; i < nUvLayers; i ++ ) {
	
							geometry.faceVertexUvs[ i ] = [];
	
						}
	
					}
	
					offset = 0;
					zLength = vertices.length;
	
					while ( offset < zLength ) {
	
						vertex = new Vector3();
	
						vertex.x = vertices[ offset ++ ] * scale;
						vertex.y = vertices[ offset ++ ] * scale;
						vertex.z = vertices[ offset ++ ] * scale;
	
						geometry.vertices.push( vertex );
	
					}
	
					offset = 0;
					zLength = faces.length;
	
					while ( offset < zLength ) {
	
						type = faces[ offset ++ ];
	
						isQuad = isBitSet( type, 0 );
						hasMaterial = isBitSet( type, 1 );
						hasFaceVertexUv = isBitSet( type, 3 );
						hasFaceNormal = isBitSet( type, 4 );
						hasFaceVertexNormal = isBitSet( type, 5 );
						hasFaceColor = isBitSet( type, 6 );
						hasFaceVertexColor = isBitSet( type, 7 );
	
						// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);
	
						if ( isQuad ) {
	
							faceA = new Face3();
							faceA.a = faces[ offset ];
							faceA.b = faces[ offset + 1 ];
							faceA.c = faces[ offset + 3 ];
	
							faceB = new Face3();
							faceB.a = faces[ offset + 1 ];
							faceB.b = faces[ offset + 2 ];
							faceB.c = faces[ offset + 3 ];
	
							offset += 4;
	
							if ( hasMaterial ) {
	
								materialIndex = faces[ offset ++ ];
								faceA.materialIndex = materialIndex;
								faceB.materialIndex = materialIndex;
	
							}
	
							// to get face <=> uv index correspondence
	
							fi = geometry.faces.length;
	
							if ( hasFaceVertexUv ) {
	
								for ( i = 0; i < nUvLayers; i ++ ) {
	
									uvLayer = json.uvs[ i ];
	
									geometry.faceVertexUvs[ i ][ fi ] = [];
									geometry.faceVertexUvs[ i ][ fi + 1 ] = [];
	
									for ( j = 0; j < 4; j ++ ) {
	
										uvIndex = faces[ offset ++ ];
	
										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];
	
										uv = new Vector2( u, v );
	
										if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
										if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );
	
									}
	
								}
	
							}
	
							if ( hasFaceNormal ) {
	
								normalIndex = faces[ offset ++ ] * 3;
	
								faceA.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);
	
								faceB.normal.copy( faceA.normal );
	
							}
	
							if ( hasFaceVertexNormal ) {
	
								for ( i = 0; i < 4; i ++ ) {
	
									normalIndex = faces[ offset ++ ] * 3;
	
									normal = new Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);
	
	
									if ( i !== 2 ) faceA.vertexNormals.push( normal );
									if ( i !== 0 ) faceB.vertexNormals.push( normal );
	
								}
	
							}
	
	
							if ( hasFaceColor ) {
	
								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];
	
								faceA.color.setHex( hex );
								faceB.color.setHex( hex );
	
							}
	
	
							if ( hasFaceVertexColor ) {
	
								for ( i = 0; i < 4; i ++ ) {
	
									colorIndex = faces[ offset ++ ];
									hex = colors[ colorIndex ];
	
									if ( i !== 2 ) faceA.vertexColors.push( new Color( hex ) );
									if ( i !== 0 ) faceB.vertexColors.push( new Color( hex ) );
	
								}
	
							}
	
							geometry.faces.push( faceA );
							geometry.faces.push( faceB );
	
						} else {
	
							face = new Face3();
							face.a = faces[ offset ++ ];
							face.b = faces[ offset ++ ];
							face.c = faces[ offset ++ ];
	
							if ( hasMaterial ) {
	
								materialIndex = faces[ offset ++ ];
								face.materialIndex = materialIndex;
	
							}
	
							// to get face <=> uv index correspondence
	
							fi = geometry.faces.length;
	
							if ( hasFaceVertexUv ) {
	
								for ( i = 0; i < nUvLayers; i ++ ) {
	
									uvLayer = json.uvs[ i ];
	
									geometry.faceVertexUvs[ i ][ fi ] = [];
	
									for ( j = 0; j < 3; j ++ ) {
	
										uvIndex = faces[ offset ++ ];
	
										u = uvLayer[ uvIndex * 2 ];
										v = uvLayer[ uvIndex * 2 + 1 ];
	
										uv = new Vector2( u, v );
	
										geometry.faceVertexUvs[ i ][ fi ].push( uv );
	
									}
	
								}
	
							}
	
							if ( hasFaceNormal ) {
	
								normalIndex = faces[ offset ++ ] * 3;
	
								face.normal.set(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);
	
							}
	
							if ( hasFaceVertexNormal ) {
	
								for ( i = 0; i < 3; i ++ ) {
	
									normalIndex = faces[ offset ++ ] * 3;
	
									normal = new Vector3(
										normals[ normalIndex ++ ],
										normals[ normalIndex ++ ],
										normals[ normalIndex ]
									);
	
									face.vertexNormals.push( normal );
	
								}
	
							}
	
	
							if ( hasFaceColor ) {
	
								colorIndex = faces[ offset ++ ];
								face.color.setHex( colors[ colorIndex ] );
	
							}
	
	
							if ( hasFaceVertexColor ) {
	
								for ( i = 0; i < 3; i ++ ) {
	
									colorIndex = faces[ offset ++ ];
									face.vertexColors.push( new Color( colors[ colorIndex ] ) );
	
								}
	
							}
	
							geometry.faces.push( face );
	
						}
	
					}
	
				}
	
				function parseSkin( json, geometry ) {
	
					var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;
	
					if ( json.skinWeights ) {
	
						for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {
	
							var x = json.skinWeights[ i ];
							var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
							var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
							var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;
	
							geometry.skinWeights.push( new Vector4( x, y, z, w ) );
	
						}
	
					}
	
					if ( json.skinIndices ) {
	
						for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {
	
							var a = json.skinIndices[ i ];
							var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
							var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
							var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;
	
							geometry.skinIndices.push( new Vector4( a, b, c, d ) );
	
						}
	
					}
	
					geometry.bones = json.bones;
	
					if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {
	
						console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
							geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );
	
					}
	
				}
	
				function parseMorphing( json, geometry ) {
	
					var scale = json.scale;
	
					if ( json.morphTargets !== undefined ) {
	
						for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {
	
							geometry.morphTargets[ i ] = {};
							geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
							geometry.morphTargets[ i ].vertices = [];
	
							var dstVertices = geometry.morphTargets[ i ].vertices;
							var srcVertices = json.morphTargets[ i ].vertices;
	
							for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {
	
								var vertex = new Vector3();
								vertex.x = srcVertices[ v ] * scale;
								vertex.y = srcVertices[ v + 1 ] * scale;
								vertex.z = srcVertices[ v + 2 ] * scale;
	
								dstVertices.push( vertex );
	
							}
	
						}
	
					}
	
					if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {
	
						console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );
	
						var faces = geometry.faces;
						var morphColors = json.morphColors[ 0 ].colors;
	
						for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
							faces[ i ].color.fromArray( morphColors, i * 3 );
	
						}
	
					}
	
				}
	
				function parseAnimations( json, geometry ) {
	
					var outputAnimations = [];
	
					// parse old style Bone/Hierarchy animations
					var animations = [];
	
					if ( json.animation !== undefined ) {
	
						animations.push( json.animation );
	
					}
	
					if ( json.animations !== undefined ) {
	
						if ( json.animations.length ) {
	
							animations = animations.concat( json.animations );
	
						} else {
	
							animations.push( json.animations );
	
						}
	
					}
	
					for ( var i = 0; i < animations.length; i ++ ) {
	
						var clip = AnimationClip.parseAnimation( animations[ i ], geometry.bones );
						if ( clip ) outputAnimations.push( clip );
	
					}
	
					// parse implicit morph animations
					if ( geometry.morphTargets ) {
	
						// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
						var morphAnimationClips = AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
						outputAnimations = outputAnimations.concat( morphAnimationClips );
	
					}
	
					if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;
	
				}
	
				return function ( json, texturePath ) {
	
					if ( json.data !== undefined ) {
	
						// Geometry 4.0 spec
						json = json.data;
	
					}
	
					if ( json.scale !== undefined ) {
	
						json.scale = 1.0 / json.scale;
	
					} else {
	
						json.scale = 1.0;
	
					}
	
					var geometry = new Geometry();
	
					parseModel( json, geometry );
					parseSkin( json, geometry );
					parseMorphing( json, geometry );
					parseAnimations( json, geometry );
	
					geometry.computeFaceNormals();
					geometry.computeBoundingSphere();
	
					if ( json.materials === undefined || json.materials.length === 0 ) {
	
						return { geometry: geometry };
	
					} else {
	
						var materials = Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );
	
						return { geometry: geometry, materials: materials };
	
					}
	
				};
	
			} )()
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ObjectLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
			this.texturePath = '';
	
		}
	
		Object.assign( ObjectLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( this.texturePath === '' ) {
	
					this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );
	
				}
	
				var scope = this;
	
				var loader = new FileLoader( scope.manager );
				loader.load( url, function ( text ) {
	
					var json = null;
	
					try {
	
						json = JSON.parse( text );
	
					} catch ( error ) {
	
						if ( onError !== undefined ) onError( error );
	
						console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );
	
						return;
	
					}
	
					var metadata = json.metadata;
	
					if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
	
						console.error( 'THREE.ObjectLoader: Can\'t load ' + url + '. Use THREE.JSONLoader instead.' );
						return;
	
					}
	
					scope.parse( json, onLoad );
	
				}, onProgress, onError );
	
			},
	
			setTexturePath: function ( value ) {
	
				this.texturePath = value;
	
			},
	
			setCrossOrigin: function ( value ) {
	
				this.crossOrigin = value;
	
			},
	
			parse: function ( json, onLoad ) {
	
				var geometries = this.parseGeometries( json.geometries );
	
				var images = this.parseImages( json.images, function () {
	
					if ( onLoad !== undefined ) onLoad( object );
	
				} );
	
				var textures = this.parseTextures( json.textures, images );
				var materials = this.parseMaterials( json.materials, textures );
	
				var object = this.parseObject( json.object, geometries, materials );
	
				if ( json.animations ) {
	
					object.animations = this.parseAnimations( json.animations );
	
				}
	
				if ( json.images === undefined || json.images.length === 0 ) {
	
					if ( onLoad !== undefined ) onLoad( object );
	
				}
	
				return object;
	
			},
	
			parseGeometries: function ( json ) {
	
				var geometries = {};
	
				if ( json !== undefined ) {
	
					var geometryLoader = new JSONLoader();
					var bufferGeometryLoader = new BufferGeometryLoader();
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var geometry;
						var data = json[ i ];
	
						switch ( data.type ) {
	
							case 'PlaneGeometry':
							case 'PlaneBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.widthSegments,
									data.heightSegments
								);
	
								break;
	
							case 'BoxGeometry':
							case 'BoxBufferGeometry':
							case 'CubeGeometry': // backwards compatible
	
								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.depth,
									data.widthSegments,
									data.heightSegments,
									data.depthSegments
								);
	
								break;
	
							case 'CircleGeometry':
							case 'CircleBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.segments,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'CylinderGeometry':
							case 'CylinderBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radiusTop,
									data.radiusBottom,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'ConeGeometry':
							case 'ConeBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'SphereGeometry':
							case 'SphereBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.widthSegments,
									data.heightSegments,
									data.phiStart,
									data.phiLength,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'DodecahedronGeometry':
							case 'DodecahedronBufferGeometry':
							case 'IcosahedronGeometry':
							case 'IcosahedronBufferGeometry':
							case 'OctahedronGeometry':
							case 'OctahedronBufferGeometry':
							case 'TetrahedronGeometry':
							case 'TetrahedronBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.detail
								);
	
								break;
	
							case 'RingGeometry':
							case 'RingBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.innerRadius,
									data.outerRadius,
									data.thetaSegments,
									data.phiSegments,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'TorusGeometry':
							case 'TorusBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.radialSegments,
									data.tubularSegments,
									data.arc
								);
	
								break;
	
							case 'TorusKnotGeometry':
							case 'TorusKnotBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.tubularSegments,
									data.radialSegments,
									data.p,
									data.q
								);
	
								break;
	
							case 'LatheGeometry':
							case 'LatheBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.points,
									data.segments,
									data.phiStart,
									data.phiLength
								);
	
								break;
	
							case 'PolyhedronGeometry':
							case 'PolyhedronBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.vertices,
									data.indices,
									data.radius,
									data.details
								);
	
								break;
	
							case 'BufferGeometry':
	
								geometry = bufferGeometryLoader.parse( data );
	
								break;
	
							case 'Geometry':
	
								geometry = geometryLoader.parse( data, this.texturePath ).geometry;
	
								break;
	
							default:
	
								console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );
	
								continue;
	
						}
	
						geometry.uuid = data.uuid;
	
						if ( data.name !== undefined ) geometry.name = data.name;
	
						geometries[ data.uuid ] = geometry;
	
					}
	
				}
	
				return geometries;
	
			},
	
			parseMaterials: function ( json, textures ) {
	
				var materials = {};
	
				if ( json !== undefined ) {
	
					var loader = new MaterialLoader();
					loader.setTextures( textures );
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var data = json[ i ];
	
						if ( data.type === 'MultiMaterial' ) {
	
							// Deprecated
	
							var array = [];
	
							for ( var j = 0; j < data.materials.length; j ++ ) {
	
								array.push( loader.parse( data.materials[ j ] ) );
	
							}
	
							materials[ data.uuid ] = array;
	
						} else {
	
							materials[ data.uuid ] = loader.parse( data );
	
						}
	
					}
	
				}
	
				return materials;
	
			},
	
			parseAnimations: function ( json ) {
	
				var animations = [];
	
				for ( var i = 0; i < json.length; i ++ ) {
	
					var clip = AnimationClip.parse( json[ i ] );
	
					animations.push( clip );
	
				}
	
				return animations;
	
			},
	
			parseImages: function ( json, onLoad ) {
	
				var scope = this;
				var images = {};
	
				function loadImage( url ) {
	
					scope.manager.itemStart( url );
	
					return loader.load( url, function () {
	
						scope.manager.itemEnd( url );
	
					}, undefined, function () {
	
						scope.manager.itemEnd( url );
						scope.manager.itemError( url );
	
					} );
	
				}
	
				if ( json !== undefined && json.length > 0 ) {
	
					var manager = new LoadingManager( onLoad );
	
					var loader = new ImageLoader( manager );
					loader.setCrossOrigin( this.crossOrigin );
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var image = json[ i ];
						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;
	
						images[ image.uuid ] = loadImage( path );
	
					}
	
				}
	
				return images;
	
			},
	
			parseTextures: function ( json, images ) {
	
				function parseConstant( value, type ) {
	
					if ( typeof value === 'number' ) return value;
	
					console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
	
					return type[ value ];
	
				}
	
				var textures = {};
	
				if ( json !== undefined ) {
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var data = json[ i ];
	
						if ( data.image === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
	
						}
	
						if ( images[ data.image ] === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
	
						}
	
						var texture = new Texture( images[ data.image ] );
						texture.needsUpdate = true;
	
						texture.uuid = data.uuid;
	
						if ( data.name !== undefined ) texture.name = data.name;
	
						if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );
	
						if ( data.offset !== undefined ) texture.offset.fromArray( data.offset );
						if ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );
						if ( data.center !== undefined ) texture.center.fromArray( data.center );
						if ( data.rotation !== undefined ) texture.rotation = data.rotation;
	
						if ( data.wrap !== undefined ) {
	
							texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
							texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );
	
						}
	
						if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );
						if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );
						if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
	
						if ( data.flipY !== undefined ) texture.flipY = data.flipY;
	
						textures[ data.uuid ] = texture;
	
					}
	
				}
	
				return textures;
	
			},
	
			parseObject: function () {
	
				var matrix = new Matrix4();
	
				return function parseObject( data, geometries, materials ) {
	
					var object;
	
					function getGeometry( name ) {
	
						if ( geometries[ name ] === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
	
						}
	
						return geometries[ name ];
	
					}
	
					function getMaterial( name ) {
	
						if ( name === undefined ) return undefined;
	
						if ( Array.isArray( name ) ) {
	
							var array = [];
	
							for ( var i = 0, l = name.length; i < l; i ++ ) {
	
								var uuid = name[ i ];
	
								if ( materials[ uuid ] === undefined ) {
	
									console.warn( 'THREE.ObjectLoader: Undefined material', uuid );
	
								}
	
								array.push( materials[ uuid ] );
	
							}
	
							return array;
	
						}
	
						if ( materials[ name ] === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: Undefined material', name );
	
						}
	
						return materials[ name ];
	
					}
	
					switch ( data.type ) {
	
						case 'Scene':
	
							object = new Scene();
	
							if ( data.background !== undefined ) {
	
								if ( Number.isInteger( data.background ) ) {
	
									object.background = new Color( data.background );
	
								}
	
							}
	
							if ( data.fog !== undefined ) {
	
								if ( data.fog.type === 'Fog' ) {
	
									object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
	
								} else if ( data.fog.type === 'FogExp2' ) {
	
									object.fog = new FogExp2( data.fog.color, data.fog.density );
	
								}
	
							}
	
							break;
	
						case 'PerspectiveCamera':
	
							object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
	
							if ( data.focus !== undefined ) object.focus = data.focus;
							if ( data.zoom !== undefined ) object.zoom = data.zoom;
							if ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;
							if ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;
							if ( data.view !== undefined ) object.view = Object.assign( {}, data.view );
	
							break;
	
						case 'OrthographicCamera':
	
							object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
	
							break;
	
						case 'AmbientLight':
	
							object = new AmbientLight( data.color, data.intensity );
	
							break;
	
						case 'DirectionalLight':
	
							object = new DirectionalLight( data.color, data.intensity );
	
							break;
	
						case 'PointLight':
	
							object = new PointLight( data.color, data.intensity, data.distance, data.decay );
	
							break;
	
						case 'RectAreaLight':
	
							object = new RectAreaLight( data.color, data.intensity, data.width, data.height );
	
							break;
	
						case 'SpotLight':
	
							object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
	
							break;
	
						case 'HemisphereLight':
	
							object = new HemisphereLight( data.color, data.groundColor, data.intensity );
	
							break;
	
						case 'SkinnedMesh':
	
							console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );
	
						case 'Mesh':
	
							var geometry = getGeometry( data.geometry );
							var material = getMaterial( data.material );
	
							if ( geometry.bones && geometry.bones.length > 0 ) {
	
								object = new SkinnedMesh( geometry, material );
	
							} else {
	
								object = new Mesh( geometry, material );
	
							}
	
							break;
	
						case 'LOD':
	
							object = new LOD();
	
							break;
	
						case 'Line':
	
							object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );
	
							break;
	
						case 'LineLoop':
	
							object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );
	
							break;
	
						case 'LineSegments':
	
							object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
	
							break;
	
						case 'PointCloud':
						case 'Points':
	
							object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
	
							break;
	
						case 'Sprite':
	
							object = new Sprite( getMaterial( data.material ) );
	
							break;
	
						case 'Group':
	
							object = new Group();
	
							break;
	
						default:
	
							object = new Object3D();
	
					}
	
					object.uuid = data.uuid;
	
					if ( data.name !== undefined ) object.name = data.name;
					if ( data.matrix !== undefined ) {
	
						matrix.fromArray( data.matrix );
						matrix.decompose( object.position, object.quaternion, object.scale );
	
					} else {
	
						if ( data.position !== undefined ) object.position.fromArray( data.position );
						if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
						if ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );
						if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
	
					}
	
					if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
					if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
	
					if ( data.shadow ) {
	
						if ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;
						if ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;
						if ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );
						if ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );
	
					}
	
					if ( data.visible !== undefined ) object.visible = data.visible;
					if ( data.userData !== undefined ) object.userData = data.userData;
	
					if ( data.children !== undefined ) {
	
						var children = data.children;
	
						for ( var i = 0; i < children.length; i ++ ) {
	
							object.add( this.parseObject( children[ i ], geometries, materials ) );
	
						}
	
					}
	
					if ( data.type === 'LOD' ) {
	
						var levels = data.levels;
	
						for ( var l = 0; l < levels.length; l ++ ) {
	
							var level = levels[ l ];
							var child = object.getObjectByProperty( 'uuid', level.object );
	
							if ( child !== undefined ) {
	
								object.addLevel( child, level.distance );
	
							}
	
						}
	
					}
	
					return object;
	
				};
	
			}()
	
		} );
	
		var TEXTURE_MAPPING = {
			UVMapping: UVMapping,
			CubeReflectionMapping: CubeReflectionMapping,
			CubeRefractionMapping: CubeRefractionMapping,
			EquirectangularReflectionMapping: EquirectangularReflectionMapping,
			EquirectangularRefractionMapping: EquirectangularRefractionMapping,
			SphericalReflectionMapping: SphericalReflectionMapping,
			CubeUVReflectionMapping: CubeUVReflectionMapping,
			CubeUVRefractionMapping: CubeUVRefractionMapping
		};
	
		var TEXTURE_WRAPPING = {
			RepeatWrapping: RepeatWrapping,
			ClampToEdgeWrapping: ClampToEdgeWrapping,
			MirroredRepeatWrapping: MirroredRepeatWrapping
		};
	
		var TEXTURE_FILTER = {
			NearestFilter: NearestFilter,
			NearestMipMapNearestFilter: NearestMipMapNearestFilter,
			NearestMipMapLinearFilter: NearestMipMapLinearFilter,
			LinearFilter: LinearFilter,
			LinearMipMapNearestFilter: LinearMipMapNearestFilter,
			LinearMipMapLinearFilter: LinearMipMapLinearFilter
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Bezier Curves formulas obtained from
		 * http://en.wikipedia.org/wiki/Bézier_curve
		 */
	
		function CatmullRom( t, p0, p1, p2, p3 ) {
	
			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
	
		}
	
		//
	
		function QuadraticBezierP0( t, p ) {
	
			var k = 1 - t;
			return k * k * p;
	
		}
	
		function QuadraticBezierP1( t, p ) {
	
			return 2 * ( 1 - t ) * t * p;
	
		}
	
		function QuadraticBezierP2( t, p ) {
	
			return t * t * p;
	
		}
	
		function QuadraticBezier( t, p0, p1, p2 ) {
	
			return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
				QuadraticBezierP2( t, p2 );
	
		}
	
		//
	
		function CubicBezierP0( t, p ) {
	
			var k = 1 - t;
			return k * k * k * p;
	
		}
	
		function CubicBezierP1( t, p ) {
	
			var k = 1 - t;
			return 3 * k * k * t * p;
	
		}
	
		function CubicBezierP2( t, p ) {
	
			return 3 * ( 1 - t ) * t * t * p;
	
		}
	
		function CubicBezierP3( t, p ) {
	
			return t * t * t * p;
	
		}
	
		function CubicBezier( t, p0, p1, p2, p3 ) {
	
			return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
				CubicBezierP3( t, p3 );
	
		}
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Extensible curve object
		 *
		 * Some common of curve methods:
		 * .getPoint( t, optionalTarget ), .getTangent( t )
		 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
		 * .getPoints(), .getSpacedPoints()
		 * .getLength()
		 * .updateArcLengths()
		 *
		 * This following curves inherit from THREE.Curve:
		 *
		 * -- 2D curves --
		 * THREE.ArcCurve
		 * THREE.CubicBezierCurve
		 * THREE.EllipseCurve
		 * THREE.LineCurve
		 * THREE.QuadraticBezierCurve
		 * THREE.SplineCurve
		 *
		 * -- 3D curves --
		 * THREE.CatmullRomCurve3
		 * THREE.CubicBezierCurve3
		 * THREE.LineCurve3
		 * THREE.QuadraticBezierCurve3
		 *
		 * A series of curves can be represented as a THREE.CurvePath.
		 *
		 **/
	
		/**************************************************************
		 *	Abstract Curve base class
		 **************************************************************/
	
		function Curve() {
	
			this.type = 'Curve';
	
			this.arcLengthDivisions = 200;
	
		}
	
		Object.assign( Curve.prototype, {
	
			// Virtual base class method to overwrite and implement in subclasses
			//	- t [0 .. 1]
	
			getPoint: function ( /* t, optionalTarget */ ) {
	
				console.warn( 'THREE.Curve: .getPoint() not implemented.' );
				return null;
	
			},
	
			// Get point at relative position in curve according to arc length
			// - u [0 .. 1]
	
			getPointAt: function ( u, optionalTarget ) {
	
				var t = this.getUtoTmapping( u );
				return this.getPoint( t, optionalTarget );
	
			},
	
			// Get sequence of points using getPoint( t )
	
			getPoints: function ( divisions ) {
	
				if ( divisions === undefined ) divisions = 5;
	
				var points = [];
	
				for ( var d = 0; d <= divisions; d ++ ) {
	
					points.push( this.getPoint( d / divisions ) );
	
				}
	
				return points;
	
			},
	
			// Get sequence of points using getPointAt( u )
	
			getSpacedPoints: function ( divisions ) {
	
				if ( divisions === undefined ) divisions = 5;
	
				var points = [];
	
				for ( var d = 0; d <= divisions; d ++ ) {
	
					points.push( this.getPointAt( d / divisions ) );
	
				}
	
				return points;
	
			},
	
			// Get total curve arc length
	
			getLength: function () {
	
				var lengths = this.getLengths();
				return lengths[ lengths.length - 1 ];
	
			},
	
			// Get list of cumulative segment lengths
	
			getLengths: function ( divisions ) {
	
				if ( divisions === undefined ) divisions = this.arcLengthDivisions;
	
				if ( this.cacheArcLengths &&
					( this.cacheArcLengths.length === divisions + 1 ) &&
					! this.needsUpdate ) {
	
					return this.cacheArcLengths;
	
				}
	
				this.needsUpdate = false;
	
				var cache = [];
				var current, last = this.getPoint( 0 );
				var p, sum = 0;
	
				cache.push( 0 );
	
				for ( p = 1; p <= divisions; p ++ ) {
	
					current = this.getPoint( p / divisions );
					sum += current.distanceTo( last );
					cache.push( sum );
					last = current;
	
				}
	
				this.cacheArcLengths = cache;
	
				return cache; // { sums: cache, sum: sum }; Sum is in the last element.
	
			},
	
			updateArcLengths: function () {
	
				this.needsUpdate = true;
				this.getLengths();
	
			},
	
			// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
	
			getUtoTmapping: function ( u, distance ) {
	
				var arcLengths = this.getLengths();
	
				var i = 0, il = arcLengths.length;
	
				var targetArcLength; // The targeted u distance value to get
	
				if ( distance ) {
	
					targetArcLength = distance;
	
				} else {
	
					targetArcLength = u * arcLengths[ il - 1 ];
	
				}
	
				// binary search for the index with largest value smaller than target u distance
	
				var low = 0, high = il - 1, comparison;
	
				while ( low <= high ) {
	
					i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
	
					comparison = arcLengths[ i ] - targetArcLength;
	
					if ( comparison < 0 ) {
	
						low = i + 1;
	
					} else if ( comparison > 0 ) {
	
						high = i - 1;
	
					} else {
	
						high = i;
						break;
	
						// DONE
	
					}
	
				}
	
				i = high;
	
				if ( arcLengths[ i ] === targetArcLength ) {
	
					return i / ( il - 1 );
	
				}
	
				// we could get finer grain at lengths, or use simple interpolation between two points
	
				var lengthBefore = arcLengths[ i ];
				var lengthAfter = arcLengths[ i + 1 ];
	
				var segmentLength = lengthAfter - lengthBefore;
	
				// determine where we are between the 'before' and 'after' points
	
				var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
	
				// add that fractional amount to t
	
				var t = ( i + segmentFraction ) / ( il - 1 );
	
				return t;
	
			},
	
			// Returns a unit vector tangent at t
			// In case any sub curve does not implement its tangent derivation,
			// 2 points a small delta apart will be used to find its gradient
			// which seems to give a reasonable approximation
	
			getTangent: function ( t ) {
	
				var delta = 0.0001;
				var t1 = t - delta;
				var t2 = t + delta;
	
				// Capping in case of danger
	
				if ( t1 < 0 ) t1 = 0;
				if ( t2 > 1 ) t2 = 1;
	
				var pt1 = this.getPoint( t1 );
				var pt2 = this.getPoint( t2 );
	
				var vec = pt2.clone().sub( pt1 );
				return vec.normalize();
	
			},
	
			getTangentAt: function ( u ) {
	
				var t = this.getUtoTmapping( u );
				return this.getTangent( t );
	
			},
	
			computeFrenetFrames: function ( segments, closed ) {
	
				// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	
				var normal = new Vector3();
	
				var tangents = [];
				var normals = [];
				var binormals = [];
	
				var vec = new Vector3();
				var mat = new Matrix4();
	
				var i, u, theta;
	
				// compute the tangent vectors for each segment on the curve
	
				for ( i = 0; i <= segments; i ++ ) {
	
					u = i / segments;
	
					tangents[ i ] = this.getTangentAt( u );
					tangents[ i ].normalize();
	
				}
	
				// select an initial normal vector perpendicular to the first tangent vector,
				// and in the direction of the minimum tangent xyz component
	
				normals[ 0 ] = new Vector3();
				binormals[ 0 ] = new Vector3();
				var min = Number.MAX_VALUE;
				var tx = Math.abs( tangents[ 0 ].x );
				var ty = Math.abs( tangents[ 0 ].y );
				var tz = Math.abs( tangents[ 0 ].z );
	
				if ( tx <= min ) {
	
					min = tx;
					normal.set( 1, 0, 0 );
	
				}
	
				if ( ty <= min ) {
	
					min = ty;
					normal.set( 0, 1, 0 );
	
				}
	
				if ( tz <= min ) {
	
					normal.set( 0, 0, 1 );
	
				}
	
				vec.crossVectors( tangents[ 0 ], normal ).normalize();
	
				normals[ 0 ].crossVectors( tangents[ 0 ], vec );
				binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
	
	
				// compute the slowly-varying normal and binormal vectors for each segment on the curve
	
				for ( i = 1; i <= segments; i ++ ) {
	
					normals[ i ] = normals[ i - 1 ].clone();
	
					binormals[ i ] = binormals[ i - 1 ].clone();
	
					vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
	
					if ( vec.length() > Number.EPSILON ) {
	
						vec.normalize();
	
						theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
	
						normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
	
					}
	
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
				}
	
				// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
	
				if ( closed === true ) {
	
					theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
					theta /= segments;
	
					if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
	
						theta = - theta;
	
					}
	
					for ( i = 1; i <= segments; i ++ ) {
	
						// twist a little...
						normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
						binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
					}
	
				}
	
				return {
					tangents: tangents,
					normals: normals,
					binormals: binormals
				};
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.arcLengthDivisions = source.arcLengthDivisions;
	
				return this;
	
			}
	
		} );
	
		function LineCurve( v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'LineCurve';
	
			this.v1 = v1 || new Vector2();
			this.v2 = v2 || new Vector2();
	
		}
	
		LineCurve.prototype = Object.create( Curve.prototype );
		LineCurve.prototype.constructor = LineCurve;
	
		LineCurve.prototype.isLineCurve = true;
	
		LineCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			if ( t === 1 ) {
	
				point.copy( this.v2 );
	
			} else {
	
				point.copy( this.v2 ).sub( this.v1 );
				point.multiplyScalar( t ).add( this.v1 );
	
			}
	
			return point;
	
		};
	
		// Line curve is linear, so we can overwrite default getPointAt
	
		LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {
	
			return this.getPoint( u, optionalTarget );
	
		};
	
		LineCurve.prototype.getTangent = function ( /* t */ ) {
	
			var tangent = this.v2.clone().sub( this.v1 );
	
			return tangent.normalize();
	
		};
	
		LineCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 **/
	
		/**************************************************************
		 *	Curved Path - a curve path is simply a array of connected
		 *  curves, but retains the api of a curve
		 **************************************************************/
	
		function CurvePath() {
	
			Curve.call( this );
	
			this.type = 'CurvePath';
	
			this.curves = [];
			this.autoClose = false; // Automatically closes the path
	
		}
	
		CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {
	
			constructor: CurvePath,
	
			add: function ( curve ) {
	
				this.curves.push( curve );
	
			},
	
			closePath: function () {
	
				// Add a line curve if start and end of lines are not connected
				var startPoint = this.curves[ 0 ].getPoint( 0 );
				var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
	
				if ( ! startPoint.equals( endPoint ) ) {
	
					this.curves.push( new LineCurve( endPoint, startPoint ) );
	
				}
	
			},
	
			// To get accurate point with reference to
			// entire path distance at time t,
			// following has to be done:
	
			// 1. Length of each sub path have to be known
			// 2. Locate and identify type of curve
			// 3. Get t for the curve
			// 4. Return curve.getPointAt(t')
	
			getPoint: function ( t ) {
	
				var d = t * this.getLength();
				var curveLengths = this.getCurveLengths();
				var i = 0;
	
				// To think about boundaries points.
	
				while ( i < curveLengths.length ) {
	
					if ( curveLengths[ i ] >= d ) {
	
						var diff = curveLengths[ i ] - d;
						var curve = this.curves[ i ];
	
						var segmentLength = curve.getLength();
						var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
	
						return curve.getPointAt( u );
	
					}
	
					i ++;
	
				}
	
				return null;
	
				// loop where sum != 0, sum > d , sum+1 <d
	
			},
	
			// We cannot use the default THREE.Curve getPoint() with getLength() because in
			// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
			// getPoint() depends on getLength
	
			getLength: function () {
	
				var lens = this.getCurveLengths();
				return lens[ lens.length - 1 ];
	
			},
	
			// cacheLengths must be recalculated.
			updateArcLengths: function () {
	
				this.needsUpdate = true;
				this.cacheLengths = null;
				this.getCurveLengths();
	
			},
	
			// Compute lengths and cache them
			// We cannot overwrite getLengths() because UtoT mapping uses it.
	
			getCurveLengths: function () {
	
				// We use cache values if curves and cache array are same length
	
				if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
	
					return this.cacheLengths;
	
				}
	
				// Get length of sub-curve
				// Push sums into cached array
	
				var lengths = [], sums = 0;
	
				for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
	
					sums += this.curves[ i ].getLength();
					lengths.push( sums );
	
				}
	
				this.cacheLengths = lengths;
	
				return lengths;
	
			},
	
			getSpacedPoints: function ( divisions ) {
	
				if ( divisions === undefined ) divisions = 40;
	
				var points = [];
	
				for ( var i = 0; i <= divisions; i ++ ) {
	
					points.push( this.getPoint( i / divisions ) );
	
				}
	
				if ( this.autoClose ) {
	
					points.push( points[ 0 ] );
	
				}
	
				return points;
	
			},
	
			getPoints: function ( divisions ) {
	
				divisions = divisions || 12;
	
				var points = [], last;
	
				for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {
	
					var curve = curves[ i ];
					var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
						: ( curve && curve.isLineCurve ) ? 1
							: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
								: divisions;
	
					var pts = curve.getPoints( resolution );
	
					for ( var j = 0; j < pts.length; j ++ ) {
	
						var point = pts[ j ];
	
						if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates
	
						points.push( point );
						last = point;
	
					}
	
				}
	
				if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {
	
					points.push( points[ 0 ] );
	
				}
	
				return points;
	
			},
	
			copy: function ( source ) {
	
				Curve.prototype.copy.call( this, source );
	
				this.curves = [];
	
				for ( var i = 0, l = source.curves.length; i < l; i ++ ) {
	
					var curve = source.curves[ i ];
	
					this.curves.push( curve.clone() );
	
				}
	
				this.autoClose = source.autoClose;
	
				return this;
	
			}
	
		} );
	
		function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
			Curve.call( this );
	
			this.type = 'EllipseCurve';
	
			this.aX = aX || 0;
			this.aY = aY || 0;
	
			this.xRadius = xRadius || 1;
			this.yRadius = yRadius || 1;
	
			this.aStartAngle = aStartAngle || 0;
			this.aEndAngle = aEndAngle || 2 * Math.PI;
	
			this.aClockwise = aClockwise || false;
	
			this.aRotation = aRotation || 0;
	
		}
	
		EllipseCurve.prototype = Object.create( Curve.prototype );
		EllipseCurve.prototype.constructor = EllipseCurve;
	
		EllipseCurve.prototype.isEllipseCurve = true;
	
		EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var twoPi = Math.PI * 2;
			var deltaAngle = this.aEndAngle - this.aStartAngle;
			var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
	
			// ensures that deltaAngle is 0 .. 2 PI
			while ( deltaAngle < 0 ) deltaAngle += twoPi;
			while ( deltaAngle > twoPi ) deltaAngle -= twoPi;
	
			if ( deltaAngle < Number.EPSILON ) {
	
				if ( samePoints ) {
	
					deltaAngle = 0;
	
				} else {
	
					deltaAngle = twoPi;
	
				}
	
			}
	
			if ( this.aClockwise === true && ! samePoints ) {
	
				if ( deltaAngle === twoPi ) {
	
					deltaAngle = - twoPi;
	
				} else {
	
					deltaAngle = deltaAngle - twoPi;
	
				}
	
			}
	
			var angle = this.aStartAngle + t * deltaAngle;
			var x = this.aX + this.xRadius * Math.cos( angle );
			var y = this.aY + this.yRadius * Math.sin( angle );
	
			if ( this.aRotation !== 0 ) {
	
				var cos = Math.cos( this.aRotation );
				var sin = Math.sin( this.aRotation );
	
				var tx = x - this.aX;
				var ty = y - this.aY;
	
				// Rotate the point about the center of the ellipse.
				x = tx * cos - ty * sin + this.aX;
				y = tx * sin + ty * cos + this.aY;
	
			}
	
			return point.set( x, y );
	
		};
	
		EllipseCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.aX = source.aX;
			this.aY = source.aY;
	
			this.xRadius = source.xRadius;
			this.yRadius = source.yRadius;
	
			this.aStartAngle = source.aStartAngle;
			this.aEndAngle = source.aEndAngle;
	
			this.aClockwise = source.aClockwise;
	
			this.aRotation = source.aRotation;
	
			return this;
	
		};
	
		function SplineCurve( points /* array of Vector2 */ ) {
	
			Curve.call( this );
	
			this.type = 'SplineCurve';
	
			this.points = points || [];
	
		}
	
		SplineCurve.prototype = Object.create( Curve.prototype );
		SplineCurve.prototype.constructor = SplineCurve;
	
		SplineCurve.prototype.isSplineCurve = true;
	
		SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var points = this.points;
			var p = ( points.length - 1 ) * t;
	
			var intPoint = Math.floor( p );
			var weight = p - intPoint;
	
			var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
			var p1 = points[ intPoint ];
			var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
	
			point.set(
				CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
				CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
			);
	
			return point;
	
		};
	
		SplineCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.points = [];
	
			for ( var i = 0, l = source.points.length; i < l; i ++ ) {
	
				var point = source.points[ i ];
	
				this.points.push( point.clone() );
	
			}
	
			return this;
	
		};
	
		function CubicBezierCurve( v0, v1, v2, v3 ) {
	
			Curve.call( this );
	
			this.type = 'CubicBezierCurve';
	
			this.v0 = v0 || new Vector2();
			this.v1 = v1 || new Vector2();
			this.v2 = v2 || new Vector2();
			this.v3 = v3 || new Vector2();
	
		}
	
		CubicBezierCurve.prototype = Object.create( Curve.prototype );
		CubicBezierCurve.prototype.constructor = CubicBezierCurve;
	
		CubicBezierCurve.prototype.isCubicBezierCurve = true;
	
		CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
	
			point.set(
				CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
				CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
			);
	
			return point;
	
		};
	
		CubicBezierCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
			this.v3.copy( source.v3 );
	
			return this;
	
		};
	
		function QuadraticBezierCurve( v0, v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'QuadraticBezierCurve';
	
			this.v0 = v0 || new Vector2();
			this.v1 = v1 || new Vector2();
			this.v2 = v2 || new Vector2();
	
		}
	
		QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
		QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
	
		QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
	
		QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2;
	
			point.set(
				QuadraticBezier( t, v0.x, v1.x, v2.x ),
				QuadraticBezier( t, v0.y, v1.y, v2.y )
			);
	
			return point;
	
		};
	
		QuadraticBezierCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		var PathPrototype = Object.assign( Object.create( CurvePath.prototype ), {
	
			setFromPoints: function ( points ) {
	
				this.moveTo( points[ 0 ].x, points[ 0 ].y );
	
				for ( var i = 1, l = points.length; i < l; i ++ ) {
	
					this.lineTo( points[ i ].x, points[ i ].y );
	
				}
	
			},
	
			moveTo: function ( x, y ) {
	
				this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?
	
			},
	
			lineTo: function ( x, y ) {
	
				var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
				this.curves.push( curve );
	
				this.currentPoint.set( x, y );
	
			},
	
			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
	
				var curve = new QuadraticBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCPx, aCPy ),
					new Vector2( aX, aY )
				);
	
				this.curves.push( curve );
	
				this.currentPoint.set( aX, aY );
	
			},
	
			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
	
				var curve = new CubicBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCP1x, aCP1y ),
					new Vector2( aCP2x, aCP2y ),
					new Vector2( aX, aY )
				);
	
				this.curves.push( curve );
	
				this.currentPoint.set( aX, aY );
	
			},
	
			splineThru: function ( pts /*Array of Vector*/ ) {
	
				var npts = [ this.currentPoint.clone() ].concat( pts );
	
				var curve = new SplineCurve( npts );
				this.curves.push( curve );
	
				this.currentPoint.copy( pts[ pts.length - 1 ] );
	
			},
	
			arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;
	
				this.absarc( aX + x0, aY + y0, aRadius,
					aStartAngle, aEndAngle, aClockwise );
	
			},
	
			absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
				this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
			},
	
			ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;
	
				this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
	
			},
	
			absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
				var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
	
				if ( this.curves.length > 0 ) {
	
					// if a previous curve is present, attempt to join
					var firstPoint = curve.getPoint( 0 );
	
					if ( ! firstPoint.equals( this.currentPoint ) ) {
	
						this.lineTo( firstPoint.x, firstPoint.y );
	
					}
	
				}
	
				this.curves.push( curve );
	
				var lastPoint = curve.getPoint( 1 );
				this.currentPoint.copy( lastPoint );
	
			},
	
			copy: function ( source ) {
	
				CurvePath.prototype.copy.call( this, source );
	
				this.currentPoint.copy( source.currentPoint );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Creates free form 2d path using series of points, lines or curves.
		 **/
	
		function Path( points ) {
	
			CurvePath.call( this );
	
			this.type = 'Path';
	
			this.currentPoint = new Vector2();
	
			if ( points ) {
	
				this.setFromPoints( points );
	
			}
	
		}
	
		Path.prototype = PathPrototype;
		PathPrototype.constructor = Path;
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Defines a 2d shape plane using paths.
		 **/
	
		// STEP 1 Create a path.
		// STEP 2 Turn path into shape.
		// STEP 3 ExtrudeGeometry takes in Shape/Shapes
		// STEP 3a - Extract points from each shape, turn to vertices
		// STEP 3b - Triangulate each shape, add faces.
	
		function Shape( points ) {
	
			Path.call( this, points );
	
			this.type = 'Shape';
	
			this.holes = [];
	
		}
	
		Shape.prototype = Object.assign( Object.create( PathPrototype ), {
	
			constructor: Shape,
	
			getPointsHoles: function ( divisions ) {
	
				var holesPts = [];
	
				for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
	
					holesPts[ i ] = this.holes[ i ].getPoints( divisions );
	
				}
	
				return holesPts;
	
			},
	
			// get points of shape and holes (keypoints based on segments parameter)
	
			extractPoints: function ( divisions ) {
	
				return {
	
					shape: this.getPoints( divisions ),
					holes: this.getPointsHoles( divisions )
	
				};
	
			},
	
			copy: function ( source ) {
	
				Path.prototype.copy.call( this, source );
	
				this.holes = [];
	
				for ( var i = 0, l = source.holes.length; i < l; i ++ ) {
	
					var hole = source.holes[ i ];
	
					this.holes.push( hole.clone() );
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
		 **/
	
		function ShapePath() {
	
			this.type = 'ShapePath';
	
			this.subPaths = [];
			this.currentPath = null;
	
		}
	
		Object.assign( ShapePath.prototype, {
	
			moveTo: function ( x, y ) {
	
				this.currentPath = new Path();
				this.subPaths.push( this.currentPath );
				this.currentPath.moveTo( x, y );
	
			},
	
			lineTo: function ( x, y ) {
	
				this.currentPath.lineTo( x, y );
	
			},
	
			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
	
				this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
	
			},
	
			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
	
				this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
	
			},
	
			splineThru: function ( pts ) {
	
				this.currentPath.splineThru( pts );
	
			},
	
			toShapes: function ( isCCW, noHoles ) {
	
				function toShapesNoHoles( inSubpaths ) {
	
					var shapes = [];
	
					for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {
	
						var tmpPath = inSubpaths[ i ];
	
						var tmpShape = new Shape();
						tmpShape.curves = tmpPath.curves;
	
						shapes.push( tmpShape );
	
					}
	
					return shapes;
	
				}
	
				function isPointInsidePolygon( inPt, inPolygon ) {
	
					var polyLen = inPolygon.length;
	
					// inPt on polygon contour => immediate success    or
					// toggling of inside/outside at every single! intersection point of an edge
					//  with the horizontal line through inPt, left of inPt
					//  not counting lowerY endpoints of edges and whole edges on that line
					var inside = false;
					for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
	
						var edgeLowPt = inPolygon[ p ];
						var edgeHighPt = inPolygon[ q ];
	
						var edgeDx = edgeHighPt.x - edgeLowPt.x;
						var edgeDy = edgeHighPt.y - edgeLowPt.y;
	
						if ( Math.abs( edgeDy ) > Number.EPSILON ) {
	
							// not parallel
							if ( edgeDy < 0 ) {
	
								edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
								edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
	
							}
							if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
	
							if ( inPt.y === edgeLowPt.y ) {
	
								if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
								// continue;				// no intersection or edgeLowPt => doesn't count !!!
	
							} else {
	
								var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
								if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
								if ( perpEdge < 0 ) 				continue;
								inside = ! inside;		// true intersection left of inPt
	
							}
	
						} else {
	
							// parallel or collinear
							if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
							// edge lies on the same horizontal line as inPt
							if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
								 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
							// continue;
	
						}
	
					}
	
					return	inside;
	
				}
	
				var isClockWise = ShapeUtils.isClockWise;
	
				var subPaths = this.subPaths;
				if ( subPaths.length === 0 ) return [];
	
				if ( noHoles === true )	return	toShapesNoHoles( subPaths );
	
	
				var solid, tmpPath, tmpShape, shapes = [];
	
				if ( subPaths.length === 1 ) {
	
					tmpPath = subPaths[ 0 ];
					tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push( tmpShape );
					return shapes;
	
				}
	
				var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
				holesFirst = isCCW ? ! holesFirst : holesFirst;
	
				// console.log("Holes first", holesFirst);
	
				var betterShapeHoles = [];
				var newShapes = [];
				var newShapeHoles = [];
				var mainIdx = 0;
				var tmpPoints;
	
				newShapes[ mainIdx ] = undefined;
				newShapeHoles[ mainIdx ] = [];
	
				for ( var i = 0, l = subPaths.length; i < l; i ++ ) {
	
					tmpPath = subPaths[ i ];
					tmpPoints = tmpPath.getPoints();
					solid = isClockWise( tmpPoints );
					solid = isCCW ? ! solid : solid;
	
					if ( solid ) {
	
						if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
	
						newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
						newShapes[ mainIdx ].s.curves = tmpPath.curves;
	
						if ( holesFirst )	mainIdx ++;
						newShapeHoles[ mainIdx ] = [];
	
						//console.log('cw', i);
	
					} else {
	
						newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
	
						//console.log('ccw', i);
	
					}
	
				}
	
				// only Holes? -> probably all Shapes with wrong orientation
				if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
	
	
				if ( newShapes.length > 1 ) {
	
					var ambiguous = false;
					var toChange = [];
	
					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
						betterShapeHoles[ sIdx ] = [];
	
					}
	
					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
						var sho = newShapeHoles[ sIdx ];
	
						for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
	
							var ho = sho[ hIdx ];
							var hole_unassigned = true;
	
							for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
	
								if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
	
									if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
									if ( hole_unassigned ) {
	
										hole_unassigned = false;
										betterShapeHoles[ s2Idx ].push( ho );
	
									} else {
	
										ambiguous = true;
	
									}
	
								}
	
							}
							if ( hole_unassigned ) {
	
								betterShapeHoles[ sIdx ].push( ho );
	
							}
	
						}
	
					}
					// console.log("ambiguous: ", ambiguous);
					if ( toChange.length > 0 ) {
	
						// console.log("to change: ", toChange);
						if ( ! ambiguous )	newShapeHoles = betterShapeHoles;
	
					}
	
				}
	
				var tmpHoles;
	
				for ( var i = 0, il = newShapes.length; i < il; i ++ ) {
	
					tmpShape = newShapes[ i ].s;
					shapes.push( tmpShape );
					tmpHoles = newShapeHoles[ i ];
	
					for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
	
						tmpShape.holes.push( tmpHoles[ j ].h );
	
					}
	
				}
	
				//console.log("shape", shapes);
	
				return shapes;
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Font( data ) {
	
			this.type = 'Font';
	
			this.data = data;
	
		}
	
		Object.assign( Font.prototype, {
	
			isFont: true,
	
			generateShapes: function ( text, size, divisions ) {
	
				function createPaths( text ) {
	
					var chars = String( text ).split( '' );
					var scale = size / data.resolution;
					var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;
	
					var offsetX = 0, offsetY = 0;
	
					var paths = [];
	
					for ( var i = 0; i < chars.length; i ++ ) {
	
						var char = chars[ i ];
	
						if ( char === '\n' ) {
	
							offsetX = 0;
							offsetY -= line_height;
	
						} else {
	
							var ret = createPath( char, scale, offsetX, offsetY );
							offsetX += ret.offsetX;
							paths.push( ret.path );
	
						}
	
					}
	
					return paths;
	
				}
	
				function createPath( c, scale, offsetX, offsetY ) {
	
					var glyph = data.glyphs[ c ] || data.glyphs[ '?' ];
	
					if ( ! glyph ) return;
	
					var path = new ShapePath();
	
					var pts = [];
					var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;
	
					if ( glyph.o ) {
	
						var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
	
						for ( var i = 0, l = outline.length; i < l; ) {
	
							var action = outline[ i ++ ];
	
							switch ( action ) {
	
								case 'm': // moveTo
	
									x = outline[ i ++ ] * scale + offsetX;
									y = outline[ i ++ ] * scale + offsetY;
	
									path.moveTo( x, y );
	
									break;
	
								case 'l': // lineTo
	
									x = outline[ i ++ ] * scale + offsetX;
									y = outline[ i ++ ] * scale + offsetY;
	
									path.lineTo( x, y );
	
									break;
	
								case 'q': // quadraticCurveTo
	
									cpx = outline[ i ++ ] * scale + offsetX;
									cpy = outline[ i ++ ] * scale + offsetY;
									cpx1 = outline[ i ++ ] * scale + offsetX;
									cpy1 = outline[ i ++ ] * scale + offsetY;
	
									path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );
	
									laste = pts[ pts.length - 1 ];
	
									if ( laste ) {
	
										cpx0 = laste.x;
										cpy0 = laste.y;
	
										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {
	
											var t = i2 / divisions;
											QuadraticBezier( t, cpx0, cpx1, cpx );
											QuadraticBezier( t, cpy0, cpy1, cpy );
	
										}
	
									}
	
									break;
	
								case 'b': // bezierCurveTo
	
									cpx = outline[ i ++ ] * scale + offsetX;
									cpy = outline[ i ++ ] * scale + offsetY;
									cpx1 = outline[ i ++ ] * scale + offsetX;
									cpy1 = outline[ i ++ ] * scale + offsetY;
									cpx2 = outline[ i ++ ] * scale + offsetX;
									cpy2 = outline[ i ++ ] * scale + offsetY;
	
									path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );
	
									laste = pts[ pts.length - 1 ];
	
									if ( laste ) {
	
										cpx0 = laste.x;
										cpy0 = laste.y;
	
										for ( var i2 = 1; i2 <= divisions; i2 ++ ) {
	
											var t = i2 / divisions;
											CubicBezier( t, cpx0, cpx1, cpx2, cpx );
											CubicBezier( t, cpy0, cpy1, cpy2, cpy );
	
										}
	
									}
	
									break;
	
							}
	
						}
	
					}
	
					return { offsetX: glyph.ha * scale, path: path };
	
				}
	
				//
	
				if ( size === undefined ) size = 100;
				if ( divisions === undefined ) divisions = 4;
	
				var data = this.data;
	
				var paths = createPaths( text );
				var shapes = [];
	
				for ( var p = 0, pl = paths.length; p < pl; p ++ ) {
	
					Array.prototype.push.apply( shapes, paths[ p ].toShapes() );
	
				}
	
				return shapes;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function FontLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( FontLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new FileLoader( this.manager );
				loader.setPath( this.path );
				loader.load( url, function ( text ) {
	
					var json;
	
					try {
	
						json = JSON.parse( text );
	
					} catch ( e ) {
	
						console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
						json = JSON.parse( text.substring( 65, text.length - 2 ) );
	
					}
	
					var font = scope.parse( json );
	
					if ( onLoad ) onLoad( font );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				return new Font( json );
	
			},
	
			setPath: function ( value ) {
	
				this.path = value;
				return this;
	
			}
	
		} );
	
		var context;
	
		var AudioContext = {
	
			getContext: function () {
	
				if ( context === undefined ) {
	
					context = new ( window.AudioContext || window.webkitAudioContext )();
	
				}
	
				return context;
	
			},
	
			setContext: function ( value ) {
	
				context = value;
	
			}
	
		};
	
		/**
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */
	
		function AudioLoader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
		}
	
		Object.assign( AudioLoader.prototype, {
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var loader = new FileLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
				loader.load( url, function ( buffer ) {
	
					var context = AudioContext.getContext();
	
					context.decodeAudioData( buffer, function ( audioBuffer ) {
	
						onLoad( audioBuffer );
	
					} );
	
				}, onProgress, onError );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function StereoCamera() {
	
			this.type = 'StereoCamera';
	
			this.aspect = 1;
	
			this.eyeSep = 0.064;
	
			this.cameraL = new PerspectiveCamera();
			this.cameraL.layers.enable( 1 );
			this.cameraL.matrixAutoUpdate = false;
	
			this.cameraR = new PerspectiveCamera();
			this.cameraR.layers.enable( 2 );
			this.cameraR.matrixAutoUpdate = false;
	
		}
	
		Object.assign( StereoCamera.prototype, {
	
			update: ( function () {
	
				var instance, focus, fov, aspect, near, far, zoom, eyeSep;
	
				var eyeRight = new Matrix4();
				var eyeLeft = new Matrix4();
	
				return function update( camera ) {
	
					var needsUpdate = instance !== this || focus !== camera.focus || fov !== camera.fov ||
														aspect !== camera.aspect * this.aspect || near !== camera.near ||
														far !== camera.far || zoom !== camera.zoom || eyeSep !== this.eyeSep;
	
					if ( needsUpdate ) {
	
						instance = this;
						focus = camera.focus;
						fov = camera.fov;
						aspect = camera.aspect * this.aspect;
						near = camera.near;
						far = camera.far;
						zoom = camera.zoom;
	
						// Off-axis stereoscopic effect based on
						// http://paulbourke.net/stereographics/stereorender/
	
						var projectionMatrix = camera.projectionMatrix.clone();
						eyeSep = this.eyeSep / 2;
						var eyeSepOnProjection = eyeSep * near / focus;
						var ymax = ( near * Math.tan( _Math.DEG2RAD * fov * 0.5 ) ) / zoom;
						var xmin, xmax;
	
						// translate xOffset
	
						eyeLeft.elements[ 12 ] = - eyeSep;
						eyeRight.elements[ 12 ] = eyeSep;
	
						// for left eye
	
						xmin = - ymax * aspect + eyeSepOnProjection;
						xmax = ymax * aspect + eyeSepOnProjection;
	
						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
	
						this.cameraL.projectionMatrix.copy( projectionMatrix );
	
						// for right eye
	
						xmin = - ymax * aspect - eyeSepOnProjection;
						xmax = ymax * aspect - eyeSepOnProjection;
	
						projectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );
						projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
	
						this.cameraR.projectionMatrix.copy( projectionMatrix );
	
					}
	
					this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );
					this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );
	
				};
	
			} )()
	
		} );
	
		/**
		 * Camera for rendering cube maps
		 *	- renders scene into axis-aligned cube
		 *
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function CubeCamera( near, far, cubeResolution ) {
	
			Object3D.call( this );
	
			this.type = 'CubeCamera';
	
			var fov = 90, aspect = 1;
	
			var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
			cameraPX.up.set( 0, - 1, 0 );
			cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
			this.add( cameraPX );
	
			var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
			cameraNX.up.set( 0, - 1, 0 );
			cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
			this.add( cameraNX );
	
			var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
			cameraPY.up.set( 0, 0, 1 );
			cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
			this.add( cameraPY );
	
			var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
			cameraNY.up.set( 0, 0, - 1 );
			cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
			this.add( cameraNY );
	
			var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraPZ.up.set( 0, - 1, 0 );
			cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
			this.add( cameraPZ );
	
			var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraNZ.up.set( 0, - 1, 0 );
			cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
			this.add( cameraNZ );
	
			var options = { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };
	
			this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
			this.renderTarget.texture.name = "CubeCamera";
	
			this.update = function ( renderer, scene ) {
	
				if ( this.parent === null ) this.updateMatrixWorld();
	
				var renderTarget = this.renderTarget;
				var generateMipmaps = renderTarget.texture.generateMipmaps;
	
				renderTarget.texture.generateMipmaps = false;
	
				renderTarget.activeCubeFace = 0;
				renderer.render( scene, cameraPX, renderTarget );
	
				renderTarget.activeCubeFace = 1;
				renderer.render( scene, cameraNX, renderTarget );
	
				renderTarget.activeCubeFace = 2;
				renderer.render( scene, cameraPY, renderTarget );
	
				renderTarget.activeCubeFace = 3;
				renderer.render( scene, cameraNY, renderTarget );
	
				renderTarget.activeCubeFace = 4;
				renderer.render( scene, cameraPZ, renderTarget );
	
				renderTarget.texture.generateMipmaps = generateMipmaps;
	
				renderTarget.activeCubeFace = 5;
				renderer.render( scene, cameraNZ, renderTarget );
	
				renderer.setRenderTarget( null );
	
			};
	
			this.clear = function ( renderer, color, depth, stencil ) {
	
				var renderTarget = this.renderTarget;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					renderTarget.activeCubeFace = i;
					renderer.setRenderTarget( renderTarget );
	
					renderer.clear( color, depth, stencil );
	
				}
	
				renderer.setRenderTarget( null );
	
			};
	
		}
	
		CubeCamera.prototype = Object.create( Object3D.prototype );
		CubeCamera.prototype.constructor = CubeCamera;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AudioListener() {
	
			Object3D.call( this );
	
			this.type = 'AudioListener';
	
			this.context = AudioContext.getContext();
	
			this.gain = this.context.createGain();
			this.gain.connect( this.context.destination );
	
			this.filter = null;
	
		}
	
		AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: AudioListener,
	
			getInput: function () {
	
				return this.gain;
	
			},
	
			removeFilter: function ( ) {
	
				if ( this.filter !== null ) {
	
					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
					this.gain.connect( this.context.destination );
					this.filter = null;
	
				}
	
			},
	
			getFilter: function () {
	
				return this.filter;
	
			},
	
			setFilter: function ( value ) {
	
				if ( this.filter !== null ) {
	
					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
	
				} else {
	
					this.gain.disconnect( this.context.destination );
	
				}
	
				this.filter = value;
				this.gain.connect( this.filter );
				this.filter.connect( this.context.destination );
	
			},
	
			getMasterVolume: function () {
	
				return this.gain.gain.value;
	
			},
	
			setMasterVolume: function ( value ) {
	
				this.gain.gain.value = value;
	
			},
	
			updateMatrixWorld: ( function () {
	
				var position = new Vector3();
				var quaternion = new Quaternion();
				var scale = new Vector3();
	
				var orientation = new Vector3();
	
				return function updateMatrixWorld( force ) {
	
					Object3D.prototype.updateMatrixWorld.call( this, force );
	
					var listener = this.context.listener;
					var up = this.up;
	
					this.matrixWorld.decompose( position, quaternion, scale );
	
					orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );
	
					if ( listener.positionX ) {
	
						listener.positionX.setValueAtTime( position.x, this.context.currentTime );
						listener.positionY.setValueAtTime( position.y, this.context.currentTime );
						listener.positionZ.setValueAtTime( position.z, this.context.currentTime );
						listener.forwardX.setValueAtTime( orientation.x, this.context.currentTime );
						listener.forwardY.setValueAtTime( orientation.y, this.context.currentTime );
						listener.forwardZ.setValueAtTime( orientation.z, this.context.currentTime );
						listener.upX.setValueAtTime( up.x, this.context.currentTime );
						listener.upY.setValueAtTime( up.y, this.context.currentTime );
						listener.upZ.setValueAtTime( up.z, this.context.currentTime );
	
					} else {
	
						listener.setPosition( position.x, position.y, position.z );
						listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );
	
					}
	
				};
	
			} )()
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */
	
		function Audio( listener ) {
	
			Object3D.call( this );
	
			this.type = 'Audio';
	
			this.context = listener.context;
	
			this.gain = this.context.createGain();
			this.gain.connect( listener.getInput() );
	
			this.autoplay = false;
	
			this.buffer = null;
			this.loop = false;
			this.startTime = 0;
			this.offset = 0;
			this.playbackRate = 1;
			this.isPlaying = false;
			this.hasPlaybackControl = true;
			this.sourceType = 'empty';
	
			this.filters = [];
	
		}
	
		Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Audio,
	
			getOutput: function () {
	
				return this.gain;
	
			},
	
			setNodeSource: function ( audioNode ) {
	
				this.hasPlaybackControl = false;
				this.sourceType = 'audioNode';
				this.source = audioNode;
				this.connect();
	
				return this;
	
			},
	
			setBuffer: function ( audioBuffer ) {
	
				this.buffer = audioBuffer;
				this.sourceType = 'buffer';
	
				if ( this.autoplay ) this.play();
	
				return this;
	
			},
	
			play: function () {
	
				if ( this.isPlaying === true ) {
	
					console.warn( 'THREE.Audio: Audio is already playing.' );
					return;
	
				}
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				var source = this.context.createBufferSource();
	
				source.buffer = this.buffer;
				source.loop = this.loop;
				source.onended = this.onEnded.bind( this );
				source.playbackRate.setValueAtTime( this.playbackRate, this.startTime );
				this.startTime = this.context.currentTime;
				source.start( this.startTime, this.offset );
	
				this.isPlaying = true;
	
				this.source = source;
	
				return this.connect();
	
			},
	
			pause: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				if ( this.isPlaying === true ) {
	
					this.source.stop();
					this.offset += ( this.context.currentTime - this.startTime ) * this.playbackRate;
					this.isPlaying = false;
	
				}
	
				return this;
	
			},
	
			stop: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.source.stop();
				this.offset = 0;
				this.isPlaying = false;
	
				return this;
	
			},
	
			connect: function () {
	
				if ( this.filters.length > 0 ) {
	
					this.source.connect( this.filters[ 0 ] );
	
					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
	
						this.filters[ i - 1 ].connect( this.filters[ i ] );
	
					}
	
					this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
	
				} else {
	
					this.source.connect( this.getOutput() );
	
				}
	
				return this;
	
			},
	
			disconnect: function () {
	
				if ( this.filters.length > 0 ) {
	
					this.source.disconnect( this.filters[ 0 ] );
	
					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
	
						this.filters[ i - 1 ].disconnect( this.filters[ i ] );
	
					}
	
					this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
	
				} else {
	
					this.source.disconnect( this.getOutput() );
	
				}
	
				return this;
	
			},
	
			getFilters: function () {
	
				return this.filters;
	
			},
	
			setFilters: function ( value ) {
	
				if ( ! value ) value = [];
	
				if ( this.isPlaying === true ) {
	
					this.disconnect();
					this.filters = value;
					this.connect();
	
				} else {
	
					this.filters = value;
	
				}
	
				return this;
	
			},
	
			getFilter: function () {
	
				return this.getFilters()[ 0 ];
	
			},
	
			setFilter: function ( filter ) {
	
				return this.setFilters( filter ? [ filter ] : [] );
	
			},
	
			setPlaybackRate: function ( value ) {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.playbackRate = value;
	
				if ( this.isPlaying === true ) {
	
					this.source.playbackRate.setValueAtTime( this.playbackRate, this.context.currentTime );
	
				}
	
				return this;
	
			},
	
			getPlaybackRate: function () {
	
				return this.playbackRate;
	
			},
	
			onEnded: function () {
	
				this.isPlaying = false;
	
			},
	
			getLoop: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return false;
	
				}
	
				return this.loop;
	
			},
	
			setLoop: function ( value ) {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.loop = value;
	
				if ( this.isPlaying === true ) {
	
					this.source.loop = this.loop;
	
				}
	
				return this;
	
			},
	
			getVolume: function () {
	
				return this.gain.gain.value;
	
			},
	
			setVolume: function ( value ) {
	
				this.gain.gain.value = value;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function PositionalAudio( listener ) {
	
			Audio.call( this, listener );
	
			this.panner = this.context.createPanner();
			this.panner.connect( this.gain );
	
		}
	
		PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {
	
			constructor: PositionalAudio,
	
			getOutput: function () {
	
				return this.panner;
	
			},
	
			getRefDistance: function () {
	
				return this.panner.refDistance;
	
			},
	
			setRefDistance: function ( value ) {
	
				this.panner.refDistance = value;
	
			},
	
			getRolloffFactor: function () {
	
				return this.panner.rolloffFactor;
	
			},
	
			setRolloffFactor: function ( value ) {
	
				this.panner.rolloffFactor = value;
	
			},
	
			getDistanceModel: function () {
	
				return this.panner.distanceModel;
	
			},
	
			setDistanceModel: function ( value ) {
	
				this.panner.distanceModel = value;
	
			},
	
			getMaxDistance: function () {
	
				return this.panner.maxDistance;
	
			},
	
			setMaxDistance: function ( value ) {
	
				this.panner.maxDistance = value;
	
			},
	
			updateMatrixWorld: ( function () {
	
				var position = new Vector3();
	
				return function updateMatrixWorld( force ) {
	
					Object3D.prototype.updateMatrixWorld.call( this, force );
	
					position.setFromMatrixPosition( this.matrixWorld );
	
					this.panner.setPosition( position.x, position.y, position.z );
	
				};
	
			} )()
	
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AudioAnalyser( audio, fftSize ) {
	
			this.analyser = audio.context.createAnalyser();
			this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
	
			this.data = new Uint8Array( this.analyser.frequencyBinCount );
	
			audio.getOutput().connect( this.analyser );
	
		}
	
		Object.assign( AudioAnalyser.prototype, {
	
			getFrequencyData: function () {
	
				this.analyser.getByteFrequencyData( this.data );
	
				return this.data;
	
			},
	
			getAverageFrequency: function () {
	
				var value = 0, data = this.getFrequencyData();
	
				for ( var i = 0; i < data.length; i ++ ) {
	
					value += data[ i ];
	
				}
	
				return value / data.length;
	
			}
	
		} );
	
		/**
		 *
		 * Buffered scene graph property that allows weighted accumulation.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function PropertyMixer( binding, typeName, valueSize ) {
	
			this.binding = binding;
			this.valueSize = valueSize;
	
			var bufferType = Float64Array,
				mixFunction;
	
			switch ( typeName ) {
	
				case 'quaternion':
					mixFunction = this._slerp;
					break;
	
				case 'string':
				case 'bool':
					bufferType = Array;
					mixFunction = this._select;
					break;
	
				default:
					mixFunction = this._lerp;
	
			}
	
			this.buffer = new bufferType( valueSize * 4 );
			// layout: [ incoming | accu0 | accu1 | orig ]
			//
			// interpolators can use .buffer as their .result
			// the data then goes to 'incoming'
			//
			// 'accu0' and 'accu1' are used frame-interleaved for
			// the cumulative result and are compared to detect
			// changes
			//
			// 'orig' stores the original state of the property
	
			this._mixBufferRegion = mixFunction;
	
			this.cumulativeWeight = 0;
	
			this.useCount = 0;
			this.referenceCount = 0;
	
		}
	
		Object.assign( PropertyMixer.prototype, {
	
			// accumulate data in the 'incoming' region into 'accu<i>'
			accumulate: function ( accuIndex, weight ) {
	
				// note: happily accumulating nothing when weight = 0, the caller knows
				// the weight and shouldn't have made the call in the first place
	
				var buffer = this.buffer,
					stride = this.valueSize,
					offset = accuIndex * stride + stride,
	
					currentWeight = this.cumulativeWeight;
	
				if ( currentWeight === 0 ) {
	
					// accuN := incoming * weight
	
					for ( var i = 0; i !== stride; ++ i ) {
	
						buffer[ offset + i ] = buffer[ i ];
	
					}
	
					currentWeight = weight;
	
				} else {
	
					// accuN := accuN + incoming * weight
	
					currentWeight += weight;
					var mix = weight / currentWeight;
					this._mixBufferRegion( buffer, offset, 0, mix, stride );
	
				}
	
				this.cumulativeWeight = currentWeight;
	
			},
	
			// apply the state of 'accu<i>' to the binding when accus differ
			apply: function ( accuIndex ) {
	
				var stride = this.valueSize,
					buffer = this.buffer,
					offset = accuIndex * stride + stride,
	
					weight = this.cumulativeWeight,
	
					binding = this.binding;
	
				this.cumulativeWeight = 0;
	
				if ( weight < 1 ) {
	
					// accuN := accuN + original * ( 1 - cumulativeWeight )
	
					var originalValueOffset = stride * 3;
	
					this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );
	
				}
	
				for ( var i = stride, e = stride + stride; i !== e; ++ i ) {
	
					if ( buffer[ i ] !== buffer[ i + stride ] ) {
	
						// value has changed -> update scene graph
	
						binding.setValue( buffer, offset );
						break;
	
					}
	
				}
	
			},
	
			// remember the state of the bound property and copy it to both accus
			saveOriginalState: function () {
	
				var binding = this.binding;
	
				var buffer = this.buffer,
					stride = this.valueSize,
	
					originalValueOffset = stride * 3;
	
				binding.getValue( buffer, originalValueOffset );
	
				// accu[0..1] := orig -- initially detect changes against the original
				for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {
	
					buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
	
				}
	
				this.cumulativeWeight = 0;
	
			},
	
			// apply the state previously taken via 'saveOriginalState' to the binding
			restoreOriginalState: function () {
	
				var originalValueOffset = this.valueSize * 3;
				this.binding.setValue( this.buffer, originalValueOffset );
	
			},
	
	
			// mix functions
	
			_select: function ( buffer, dstOffset, srcOffset, t, stride ) {
	
				if ( t >= 0.5 ) {
	
					for ( var i = 0; i !== stride; ++ i ) {
	
						buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
	
					}
	
				}
	
			},
	
			_slerp: function ( buffer, dstOffset, srcOffset, t ) {
	
				Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );
	
			},
	
			_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {
	
				var s = 1 - t;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					var j = dstOffset + i;
	
					buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
	
				}
	
			}
	
		} );
	
		/**
		 *
		 * A reference to a real property in the scene graph.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function Composite( targetGroup, path, optionalParsedPath ) {
	
			var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );
	
			this._targetGroup = targetGroup;
			this._bindings = targetGroup.subscribe_( path, parsedPath );
	
		}
	
		Object.assign( Composite.prototype, {
	
			getValue: function ( array, offset ) {
	
				this.bind(); // bind all binding
	
				var firstValidIndex = this._targetGroup.nCachedObjects_,
					binding = this._bindings[ firstValidIndex ];
	
				// and only call .getValue on the first
				if ( binding !== undefined ) binding.getValue( array, offset );
	
			},
	
			setValue: function ( array, offset ) {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_,
						  n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].setValue( array, offset );
	
				}
	
			},
	
			bind: function () {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_,
						  n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].bind();
	
				}
	
			},
	
			unbind: function () {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_,
						  n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].unbind();
	
				}
	
			}
	
		} );
	
	
		function PropertyBinding( rootNode, path, parsedPath ) {
	
			this.path = path;
			this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );
	
			this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;
	
			this.rootNode = rootNode;
	
		}
	
		Object.assign( PropertyBinding, {
	
			Composite: Composite,
	
			create: function ( root, path, parsedPath ) {
	
				if ( ! ( root && root.isAnimationObjectGroup ) ) {
	
					return new PropertyBinding( root, path, parsedPath );
	
				} else {
	
					return new PropertyBinding.Composite( root, path, parsedPath );
	
				}
	
			},
	
			/**
			 * Replaces spaces with underscores and removes unsupported characters from
			 * node names, to ensure compatibility with parseTrackName().
			 *
			 * @param  {string} name Node name to be sanitized.
			 * @return {string}
			 */
			sanitizeNodeName: function ( name ) {
	
				return name.replace( /\s/g, '_' ).replace( /[^\w-]/g, '' );
	
			},
	
			parseTrackName: function () {
	
				// Parent directories, delimited by '/' or ':'. Currently unused, but must
				// be matched to parse the rest of the track name.
				var directoryRe = /((?:[\w-]+[\/:])*)/;
	
				// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
				var nodeRe = /([\w-\.]+)?/;
	
				// Object on target node, and accessor. Name may contain only word
				// characters. Accessor may contain any character except closing bracket.
				var objectRe = /(?:\.([\w-]+)(?:\[(.+)\])?)?/;
	
				// Property and accessor. May contain only word characters. Accessor may
				// contain any non-bracket characters.
				var propertyRe = /\.([\w-]+)(?:\[(.+)\])?/;
	
				var trackRe = new RegExp( ''
					+ '^'
					+ directoryRe.source
					+ nodeRe.source
					+ objectRe.source
					+ propertyRe.source
					+ '$'
				);
	
				var supportedObjectNames = [ 'material', 'materials', 'bones' ];
	
				return function ( trackName ) {
	
					var matches = trackRe.exec( trackName );
	
					if ( ! matches ) {
	
						throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );
	
					}
	
					var results = {
						// directoryName: matches[ 1 ], // (tschw) currently unused
						nodeName: matches[ 2 ],
						objectName: matches[ 3 ],
						objectIndex: matches[ 4 ],
						propertyName: matches[ 5 ], // required
						propertyIndex: matches[ 6 ]
					};
	
					var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );
	
					if ( lastDot !== undefined && lastDot !== - 1 ) {
	
						var objectName = results.nodeName.substring( lastDot + 1 );
	
						// Object names must be checked against a whitelist. Otherwise, there
						// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
						// 'bar' could be the objectName, or part of a nodeName (which can
						// include '.' characters).
						if ( supportedObjectNames.indexOf( objectName ) !== - 1 ) {
	
							results.nodeName = results.nodeName.substring( 0, lastDot );
							results.objectName = objectName;
	
						}
	
					}
	
					if ( results.propertyName === null || results.propertyName.length === 0 ) {
	
						throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );
	
					}
	
					return results;
	
				};
	
			}(),
	
			findNode: function ( root, nodeName ) {
	
				if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {
	
					return root;
	
				}
	
				// search into skeleton bones.
				if ( root.skeleton ) {
	
					var searchSkeleton = function ( skeleton ) {
	
						for ( var i = 0; i < skeleton.bones.length; i ++ ) {
	
							var bone = skeleton.bones[ i ];
	
							if ( bone.name === nodeName ) {
	
								return bone;
	
							}
	
						}
	
						return null;
	
					};
	
					var bone = searchSkeleton( root.skeleton );
	
					if ( bone ) {
	
						return bone;
	
					}
	
				}
	
				// search into node subtree.
				if ( root.children ) {
	
					var searchNodeSubtree = function ( children ) {
	
						for ( var i = 0; i < children.length; i ++ ) {
	
							var childNode = children[ i ];
	
							if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
	
								return childNode;
	
							}
	
							var result = searchNodeSubtree( childNode.children );
	
							if ( result ) return result;
	
						}
	
						return null;
	
					};
	
					var subTreeNode = searchNodeSubtree( root.children );
	
					if ( subTreeNode ) {
	
						return subTreeNode;
	
					}
	
				}
	
				return null;
	
			}
	
		} );
	
		Object.assign( PropertyBinding.prototype, { // prototype, continued
	
			// these are used to "bind" a nonexistent property
			_getValue_unavailable: function () {},
			_setValue_unavailable: function () {},
	
			BindingType: {
				Direct: 0,
				EntireArray: 1,
				ArrayElement: 2,
				HasFromToArray: 3
			},
	
			Versioning: {
				None: 0,
				NeedsUpdate: 1,
				MatrixWorldNeedsUpdate: 2
			},
	
			GetterByBindingType: [
	
				function getValue_direct( buffer, offset ) {
	
					buffer[ offset ] = this.node[ this.propertyName ];
	
				},
	
				function getValue_array( buffer, offset ) {
	
					var source = this.resolvedProperty;
	
					for ( var i = 0, n = source.length; i !== n; ++ i ) {
	
						buffer[ offset ++ ] = source[ i ];
	
					}
	
				},
	
				function getValue_arrayElement( buffer, offset ) {
	
					buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
	
				},
	
				function getValue_toArray( buffer, offset ) {
	
					this.resolvedProperty.toArray( buffer, offset );
	
				}
	
			],
	
			SetterByBindingTypeAndVersioning: [
	
				[
					// Direct
	
					function setValue_direct( buffer, offset ) {
	
						this.targetObject[ this.propertyName ] = buffer[ offset ];
	
					},
	
					function setValue_direct_setNeedsUpdate( buffer, offset ) {
	
						this.targetObject[ this.propertyName ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.targetObject[ this.propertyName ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// EntireArray
	
					function setValue_array( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
					},
	
					function setValue_array_setNeedsUpdate( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// ArrayElement
	
					function setValue_arrayElement( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
	
					},
	
					function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// HasToFromArray
	
					function setValue_fromArray( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
	
					},
	
					function setValue_fromArray_setNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				]
	
			],
	
			getValue: function getValue_unbound( targetArray, offset ) {
	
				this.bind();
				this.getValue( targetArray, offset );
	
				// Note: This class uses a State pattern on a per-method basis:
				// 'bind' sets 'this.getValue' / 'setValue' and shadows the
				// prototype version of these methods with one that represents
				// the bound state. When the property is not found, the methods
				// become no-ops.
	
			},
	
			setValue: function getValue_unbound( sourceArray, offset ) {
	
				this.bind();
				this.setValue( sourceArray, offset );
	
			},
	
			// create getter / setter pair for a property in the scene graph
			bind: function () {
	
				var targetObject = this.node,
					parsedPath = this.parsedPath,
	
					objectName = parsedPath.objectName,
					propertyName = parsedPath.propertyName,
					propertyIndex = parsedPath.propertyIndex;
	
				if ( ! targetObject ) {
	
					targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;
	
					this.node = targetObject;
	
				}
	
				// set fail state so we can just 'return' on error
				this.getValue = this._getValue_unavailable;
				this.setValue = this._setValue_unavailable;
	
				// ensure there is a value node
				if ( ! targetObject ) {
	
					console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
					return;
	
				}
	
				if ( objectName ) {
	
					var objectIndex = parsedPath.objectIndex;
	
					// special cases were we need to reach deeper into the hierarchy to get the face materials....
					switch ( objectName ) {
	
						case 'materials':
	
							if ( ! targetObject.material ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
								return;
	
							}
	
							if ( ! targetObject.material.materials ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
								return;
	
							}
	
							targetObject = targetObject.material.materials;
	
							break;
	
						case 'bones':
	
							if ( ! targetObject.skeleton ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
								return;
	
							}
	
							// potential future optimization: skip this if propertyIndex is already an integer
							// and convert the integer string to a true integer.
	
							targetObject = targetObject.skeleton.bones;
	
							// support resolving morphTarget names into indices.
							for ( var i = 0; i < targetObject.length; i ++ ) {
	
								if ( targetObject[ i ].name === objectIndex ) {
	
									objectIndex = i;
									break;
	
								}
	
							}
	
							break;
	
						default:
	
							if ( targetObject[ objectName ] === undefined ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
								return;
	
							}
	
							targetObject = targetObject[ objectName ];
	
					}
	
	
					if ( objectIndex !== undefined ) {
	
						if ( targetObject[ objectIndex ] === undefined ) {
	
							console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
							return;
	
						}
	
						targetObject = targetObject[ objectIndex ];
	
					}
	
				}
	
				// resolve property
				var nodeProperty = targetObject[ propertyName ];
	
				if ( nodeProperty === undefined ) {
	
					var nodeName = parsedPath.nodeName;
	
					console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
						'.' + propertyName + ' but it wasn\'t found.', targetObject );
					return;
	
				}
	
				// determine versioning scheme
				var versioning = this.Versioning.None;
	
				if ( targetObject.needsUpdate !== undefined ) { // material
	
					versioning = this.Versioning.NeedsUpdate;
					this.targetObject = targetObject;
	
				} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
	
					versioning = this.Versioning.MatrixWorldNeedsUpdate;
					this.targetObject = targetObject;
	
				}
	
				// determine how the property gets bound
				var bindingType = this.BindingType.Direct;
	
				if ( propertyIndex !== undefined ) {
	
					// access a sub element of the property array (only primitives are supported right now)
	
					if ( propertyName === "morphTargetInfluences" ) {
	
						// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
	
						// support resolving morphTarget names into indices.
						if ( ! targetObject.geometry ) {
	
							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
							return;
	
						}
	
						if ( targetObject.geometry.isBufferGeometry ) {
	
							if ( ! targetObject.geometry.morphAttributes ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
								return;
	
							}
	
							for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {
	
								if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {
	
									propertyIndex = i;
									break;
	
								}
	
							}
	
	
						} else {
	
							if ( ! targetObject.geometry.morphTargets ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
								return;
	
							}
	
							for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {
	
								if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {
	
									propertyIndex = i;
									break;
	
								}
	
							}
	
						}
	
					}
	
					bindingType = this.BindingType.ArrayElement;
	
					this.resolvedProperty = nodeProperty;
					this.propertyIndex = propertyIndex;
	
				} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
	
					// must use copy for Object3D.Euler/Quaternion
	
					bindingType = this.BindingType.HasFromToArray;
	
					this.resolvedProperty = nodeProperty;
	
				} else if ( Array.isArray( nodeProperty ) ) {
	
					bindingType = this.BindingType.EntireArray;
	
					this.resolvedProperty = nodeProperty;
	
				} else {
	
					this.propertyName = propertyName;
	
				}
	
				// select getter / setter
				this.getValue = this.GetterByBindingType[ bindingType ];
				this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
	
			},
	
			unbind: function () {
	
				this.node = null;
	
				// back to the prototype version of getValue / setValue
				// note: avoiding to mutate the shape of 'this' via 'delete'
				this.getValue = this._getValue_unbound;
				this.setValue = this._setValue_unbound;
	
			}
	
		} );
	
		//!\ DECLARE ALIAS AFTER assign prototype !
		Object.assign( PropertyBinding.prototype, {
	
			// initial state of these methods that calls 'bind'
			_getValue_unbound: PropertyBinding.prototype.getValue,
			_setValue_unbound: PropertyBinding.prototype.setValue,
	
		} );
	
		/**
		 *
		 * A group of objects that receives a shared animation state.
		 *
		 * Usage:
		 *
		 * 	-	Add objects you would otherwise pass as 'root' to the
		 * 		constructor or the .clipAction method of AnimationMixer.
		 *
		 * 	-	Instead pass this object as 'root'.
		 *
		 * 	-	You can also add and remove objects later when the mixer
		 * 		is running.
		 *
		 * Note:
		 *
		 *  	Objects of this class appear as one object to the mixer,
		 *  	so cache control of the individual objects must be done
		 *  	on the group.
		 *
		 * Limitation:
		 *
		 * 	- 	The animated properties must be compatible among the
		 * 		all objects in the group.
		 *
		 *  -	A single property can either be controlled through a
		 *  	target group or directly, but not both.
		 *
		 * @author tschw
		 */
	
		function AnimationObjectGroup() {
	
			this.uuid = _Math.generateUUID();
	
			// cached objects followed by the active ones
			this._objects = Array.prototype.slice.call( arguments );
	
			this.nCachedObjects_ = 0;			// threshold
			// note: read by PropertyBinding.Composite
	
			var indices = {};
			this._indicesByUUID = indices;		// for bookkeeping
	
			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
				indices[ arguments[ i ].uuid ] = i;
	
			}
	
			this._paths = [];					// inside: string
			this._parsedPaths = [];				// inside: { we don't care, here }
			this._bindings = []; 				// inside: Array< PropertyBinding >
			this._bindingsIndicesByPath = {}; 	// inside: indices in these arrays
	
			var scope = this;
	
			this.stats = {
	
				objects: {
					get total() {
	
						return scope._objects.length;
	
					},
					get inUse() {
	
						return this.total - scope.nCachedObjects_;
	
					}
				},
				get bindingsPerObject() {
	
					return scope._bindings.length;
	
				}
	
			};
	
		}
	
		Object.assign( AnimationObjectGroup.prototype, {
	
			isAnimationObjectGroup: true,
	
			add: function () {
	
				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ],
						knownObject = undefined;
	
					if ( index === undefined ) {
	
						// unknown object -> add it to the ACTIVE region
	
						index = nObjects ++;
						indicesByUUID[ uuid ] = index;
						objects.push( object );
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );
	
						}
	
					} else if ( index < nCachedObjects ) {
	
						knownObject = objects[ index ];
	
						// move existing object to the ACTIVE region
	
						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ];
	
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;
	
						indicesByUUID[ uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = object;
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								binding = bindingsForPath[ index ];
	
							bindingsForPath[ index ] = lastCached;
	
							if ( binding === undefined ) {
	
								// since we do not bother to create new bindings
								// for objects that are cached, the binding may
								// or may not exist
	
								binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );
	
							}
	
							bindingsForPath[ firstActiveIndex ] = binding;
	
						}
	
					} else if ( objects[ index ] !== knownObject ) {
	
						console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
								'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );
	
					} // else the object is already where we want it to be
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			remove: function () {
	
				var objects = this._objects,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index !== undefined && index >= nCachedObjects ) {
	
						// move existing object into the CACHED region
	
						var lastCachedIndex = nCachedObjects ++,
							firstActiveObject = objects[ lastCachedIndex ];
	
						indicesByUUID[ firstActiveObject.uuid ] = index;
						objects[ index ] = firstActiveObject;
	
						indicesByUUID[ uuid ] = lastCachedIndex;
						objects[ lastCachedIndex ] = object;
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							var bindingsForPath = bindings[ j ],
								firstActive = bindingsForPath[ lastCachedIndex ],
								binding = bindingsForPath[ index ];
	
							bindingsForPath[ index ] = firstActive;
							bindingsForPath[ lastCachedIndex ] = binding;
	
						}
	
					}
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			// remove & forget
			uncache: function () {
	
				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index !== undefined ) {
	
						delete indicesByUUID[ uuid ];
	
						if ( index < nCachedObjects ) {
	
							// object is cached, shrink the CACHED region
	
							var firstActiveIndex = -- nCachedObjects,
								lastCachedObject = objects[ firstActiveIndex ],
								lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];
	
							// last cached object takes this object's place
							indicesByUUID[ lastCachedObject.uuid ] = index;
							objects[ index ] = lastCachedObject;
	
							// last object goes to the activated slot and pop
							indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
							objects[ firstActiveIndex ] = lastObject;
							objects.pop();
	
							// accounting is done, now do the same for all bindings
	
							for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
								var bindingsForPath = bindings[ j ],
									lastCached = bindingsForPath[ firstActiveIndex ],
									last = bindingsForPath[ lastIndex ];
	
								bindingsForPath[ index ] = lastCached;
								bindingsForPath[ firstActiveIndex ] = last;
								bindingsForPath.pop();
	
							}
	
						} else {
	
							// object is active, just swap with the last and pop
	
							var lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];
	
							indicesByUUID[ lastObject.uuid ] = index;
							objects[ index ] = lastObject;
							objects.pop();
	
							// accounting is done, now do the same for all bindings
	
							for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
								var bindingsForPath = bindings[ j ];
	
								bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
								bindingsForPath.pop();
	
							}
	
						} // cached or active
	
					} // if object is known
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			// Internal interface used by befriended PropertyBinding.Composite:
	
			subscribe_: function ( path, parsedPath ) {
	
				// returns an array of bindings for the given path that is changed
				// according to the contained objects in the group
	
				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ],
					bindings = this._bindings;
	
				if ( index !== undefined ) return bindings[ index ];
	
				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					bindingsForPath = new Array( nObjects );
	
				index = bindings.length;
	
				indicesByPath[ path ] = index;
	
				paths.push( path );
				parsedPaths.push( parsedPath );
				bindings.push( bindingsForPath );
	
				for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {
	
					var object = objects[ i ];
					bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );
	
				}
	
				return bindingsForPath;
	
			},
	
			unsubscribe_: function ( path ) {
	
				// tells the group to forget about a property path and no longer
				// update the array previously obtained with 'subscribe_'
	
				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ];
	
				if ( index !== undefined ) {
	
					var paths = this._paths,
						parsedPaths = this._parsedPaths,
						bindings = this._bindings,
						lastBindingsIndex = bindings.length - 1,
						lastBindings = bindings[ lastBindingsIndex ],
						lastBindingsPath = path[ lastBindingsIndex ];
	
					indicesByPath[ lastBindingsPath ] = index;
	
					bindings[ index ] = lastBindings;
					bindings.pop();
	
					parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
					parsedPaths.pop();
	
					paths[ index ] = paths[ lastBindingsIndex ];
					paths.pop();
	
				}
	
			}
	
		} );
	
		/**
		 *
		 * Action provided by AnimationMixer for scheduling clip playback on specific
		 * objects.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 *
		 */
	
		function AnimationAction( mixer, clip, localRoot ) {
	
			this._mixer = mixer;
			this._clip = clip;
			this._localRoot = localRoot || null;
	
			var tracks = clip.tracks,
				nTracks = tracks.length,
				interpolants = new Array( nTracks );
	
			var interpolantSettings = {
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
			};
	
			for ( var i = 0; i !== nTracks; ++ i ) {
	
				var interpolant = tracks[ i ].createInterpolant( null );
				interpolants[ i ] = interpolant;
				interpolant.settings = interpolantSettings;
	
			}
	
			this._interpolantSettings = interpolantSettings;
	
			this._interpolants = interpolants;	// bound by the mixer
	
			// inside: PropertyMixer (managed by the mixer)
			this._propertyBindings = new Array( nTracks );
	
			this._cacheIndex = null;			// for the memory manager
			this._byClipCacheIndex = null;		// for the memory manager
	
			this._timeScaleInterpolant = null;
			this._weightInterpolant = null;
	
			this.loop = LoopRepeat;
			this._loopCount = - 1;
	
			// global mixer time when the action is to be started
			// it's set back to 'null' upon start of the action
			this._startTime = null;
	
			// scaled local time of the action
			// gets clamped or wrapped to 0..clip.duration according to loop
			this.time = 0;
	
			this.timeScale = 1;
			this._effectiveTimeScale = 1;
	
			this.weight = 1;
			this._effectiveWeight = 1;
	
			this.repetitions = Infinity; 		// no. of repetitions when looping
	
			this.paused = false;				// true -> zero effective time scale
			this.enabled = true;				// false -> zero effective weight
	
			this.clampWhenFinished 	= false;	// keep feeding the last frame?
	
			this.zeroSlopeAtStart 	= true;		// for smooth interpolation w/o separate
			this.zeroSlopeAtEnd		= true;		// clips for start, loop and end
	
		}
	
		Object.assign( AnimationAction.prototype, {
	
			// State & Scheduling
	
			play: function () {
	
				this._mixer._activateAction( this );
	
				return this;
	
			},
	
			stop: function () {
	
				this._mixer._deactivateAction( this );
	
				return this.reset();
	
			},
	
			reset: function () {
	
				this.paused = false;
				this.enabled = true;
	
				this.time = 0;			// restart clip
				this._loopCount = - 1;	// forget previous loops
				this._startTime = null;	// forget scheduling
	
				return this.stopFading().stopWarping();
	
			},
	
			isRunning: function () {
	
				return this.enabled && ! this.paused && this.timeScale !== 0 &&
						this._startTime === null && this._mixer._isActiveAction( this );
	
			},
	
			// return true when play has been called
			isScheduled: function () {
	
				return this._mixer._isActiveAction( this );
	
			},
	
			startAt: function ( time ) {
	
				this._startTime = time;
	
				return this;
	
			},
	
			setLoop: function ( mode, repetitions ) {
	
				this.loop = mode;
				this.repetitions = repetitions;
	
				return this;
	
			},
	
			// Weight
	
			// set the weight stopping any scheduled fading
			// although .enabled = false yields an effective weight of zero, this
			// method does *not* change .enabled, because it would be confusing
			setEffectiveWeight: function ( weight ) {
	
				this.weight = weight;
	
				// note: same logic as when updated at runtime
				this._effectiveWeight = this.enabled ? weight : 0;
	
				return this.stopFading();
	
			},
	
			// return the weight considering fading and .enabled
			getEffectiveWeight: function () {
	
				return this._effectiveWeight;
	
			},
	
			fadeIn: function ( duration ) {
	
				return this._scheduleFading( duration, 0, 1 );
	
			},
	
			fadeOut: function ( duration ) {
	
				return this._scheduleFading( duration, 1, 0 );
	
			},
	
			crossFadeFrom: function ( fadeOutAction, duration, warp ) {
	
				fadeOutAction.fadeOut( duration );
				this.fadeIn( duration );
	
				if ( warp ) {
	
					var fadeInDuration = this._clip.duration,
						fadeOutDuration = fadeOutAction._clip.duration,
	
						startEndRatio = fadeOutDuration / fadeInDuration,
						endStartRatio = fadeInDuration / fadeOutDuration;
	
					fadeOutAction.warp( 1.0, startEndRatio, duration );
					this.warp( endStartRatio, 1.0, duration );
	
				}
	
				return this;
	
			},
	
			crossFadeTo: function ( fadeInAction, duration, warp ) {
	
				return fadeInAction.crossFadeFrom( this, duration, warp );
	
			},
	
			stopFading: function () {
	
				var weightInterpolant = this._weightInterpolant;
	
				if ( weightInterpolant !== null ) {
	
					this._weightInterpolant = null;
					this._mixer._takeBackControlInterpolant( weightInterpolant );
	
				}
	
				return this;
	
			},
	
			// Time Scale Control
	
			// set the time scale stopping any scheduled warping
			// although .paused = true yields an effective time scale of zero, this
			// method does *not* change .paused, because it would be confusing
			setEffectiveTimeScale: function ( timeScale ) {
	
				this.timeScale = timeScale;
				this._effectiveTimeScale = this.paused ? 0 : timeScale;
	
				return this.stopWarping();
	
			},
	
			// return the time scale considering warping and .paused
			getEffectiveTimeScale: function () {
	
				return this._effectiveTimeScale;
	
			},
	
			setDuration: function ( duration ) {
	
				this.timeScale = this._clip.duration / duration;
	
				return this.stopWarping();
	
			},
	
			syncWith: function ( action ) {
	
				this.time = action.time;
				this.timeScale = action.timeScale;
	
				return this.stopWarping();
	
			},
	
			halt: function ( duration ) {
	
				return this.warp( this._effectiveTimeScale, 0, duration );
	
			},
	
			warp: function ( startTimeScale, endTimeScale, duration ) {
	
				var mixer = this._mixer, now = mixer.time,
					interpolant = this._timeScaleInterpolant,
	
					timeScale = this.timeScale;
	
				if ( interpolant === null ) {
	
					interpolant = mixer._lendControlInterpolant();
					this._timeScaleInterpolant = interpolant;
	
				}
	
				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;
	
				times[ 0 ] = now;
				times[ 1 ] = now + duration;
	
				values[ 0 ] = startTimeScale / timeScale;
				values[ 1 ] = endTimeScale / timeScale;
	
				return this;
	
			},
	
			stopWarping: function () {
	
				var timeScaleInterpolant = this._timeScaleInterpolant;
	
				if ( timeScaleInterpolant !== null ) {
	
					this._timeScaleInterpolant = null;
					this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
	
				}
	
				return this;
	
			},
	
			// Object Accessors
	
			getMixer: function () {
	
				return this._mixer;
	
			},
	
			getClip: function () {
	
				return this._clip;
	
			},
	
			getRoot: function () {
	
				return this._localRoot || this._mixer._root;
	
			},
	
			// Interna
	
			_update: function ( time, deltaTime, timeDirection, accuIndex ) {
	
				// called by the mixer
	
				if ( ! this.enabled ) {
	
					// call ._updateWeight() to update ._effectiveWeight
	
					this._updateWeight( time );
					return;
	
				}
	
				var startTime = this._startTime;
	
				if ( startTime !== null ) {
	
					// check for scheduled start of action
	
					var timeRunning = ( time - startTime ) * timeDirection;
					if ( timeRunning < 0 || timeDirection === 0 ) {
	
						return; // yet to come / don't decide when delta = 0
	
					}
	
					// start
	
					this._startTime = null; // unschedule
					deltaTime = timeDirection * timeRunning;
	
				}
	
				// apply time scale and advance time
	
				deltaTime *= this._updateTimeScale( time );
				var clipTime = this._updateTime( deltaTime );
	
				// note: _updateTime may disable the action resulting in
				// an effective weight of 0
	
				var weight = this._updateWeight( time );
	
				if ( weight > 0 ) {
	
					var interpolants = this._interpolants;
					var propertyMixers = this._propertyBindings;
	
					for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {
	
						interpolants[ j ].evaluate( clipTime );
						propertyMixers[ j ].accumulate( accuIndex, weight );
	
					}
	
				}
	
			},
	
			_updateWeight: function ( time ) {
	
				var weight = 0;
	
				if ( this.enabled ) {
	
					weight = this.weight;
					var interpolant = this._weightInterpolant;
	
					if ( interpolant !== null ) {
	
						var interpolantValue = interpolant.evaluate( time )[ 0 ];
	
						weight *= interpolantValue;
	
						if ( time > interpolant.parameterPositions[ 1 ] ) {
	
							this.stopFading();
	
							if ( interpolantValue === 0 ) {
	
								// faded out, disable
								this.enabled = false;
	
							}
	
						}
	
					}
	
				}
	
				this._effectiveWeight = weight;
				return weight;
	
			},
	
			_updateTimeScale: function ( time ) {
	
				var timeScale = 0;
	
				if ( ! this.paused ) {
	
					timeScale = this.timeScale;
	
					var interpolant = this._timeScaleInterpolant;
	
					if ( interpolant !== null ) {
	
						var interpolantValue = interpolant.evaluate( time )[ 0 ];
	
						timeScale *= interpolantValue;
	
						if ( time > interpolant.parameterPositions[ 1 ] ) {
	
							this.stopWarping();
	
							if ( timeScale === 0 ) {
	
								// motion has halted, pause
								this.paused = true;
	
							} else {
	
								// warp done - apply final time scale
								this.timeScale = timeScale;
	
							}
	
						}
	
					}
	
				}
	
				this._effectiveTimeScale = timeScale;
				return timeScale;
	
			},
	
			_updateTime: function ( deltaTime ) {
	
				var time = this.time + deltaTime;
	
				if ( deltaTime === 0 ) return time;
	
				var duration = this._clip.duration,
	
					loop = this.loop,
					loopCount = this._loopCount;
	
				if ( loop === LoopOnce ) {
	
					if ( loopCount === - 1 ) {
	
						// just started
	
						this._loopCount = 0;
						this._setEndings( true, true, false );
	
					}
	
					handle_stop: {
	
						if ( time >= duration ) {
	
							time = duration;
	
						} else if ( time < 0 ) {
	
							time = 0;
	
						} else break handle_stop;
	
						if ( this.clampWhenFinished ) this.paused = true;
						else this.enabled = false;
	
						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime < 0 ? - 1 : 1
						} );
	
					}
	
				} else { // repetitive Repeat or PingPong
	
					var pingPong = ( loop === LoopPingPong );
	
					if ( loopCount === - 1 ) {
	
						// just started
	
						if ( deltaTime >= 0 ) {
	
							loopCount = 0;
	
							this._setEndings( true, this.repetitions === 0, pingPong );
	
						} else {
	
							// when looping in reverse direction, the initial
							// transition through zero counts as a repetition,
							// so leave loopCount at -1
	
							this._setEndings( this.repetitions === 0, true, pingPong );
	
						}
	
					}
	
					if ( time >= duration || time < 0 ) {
	
						// wrap around
	
						var loopDelta = Math.floor( time / duration ); // signed
						time -= duration * loopDelta;
	
						loopCount += Math.abs( loopDelta );
	
						var pending = this.repetitions - loopCount;
	
						if ( pending < 0 ) {
	
							// have to stop (switch state, clamp time, fire event)
	
							if ( this.clampWhenFinished ) this.paused = true;
							else this.enabled = false;
	
							time = deltaTime > 0 ? duration : 0;
	
							this._mixer.dispatchEvent( {
								type: 'finished', action: this,
								direction: deltaTime > 0 ? 1 : - 1
							} );
	
						} else {
	
							// keep running
	
							if ( pending === 0 ) {
	
								// entering the last round
	
								var atStart = deltaTime < 0;
								this._setEndings( atStart, ! atStart, pingPong );
	
							} else {
	
								this._setEndings( false, false, pingPong );
	
							}
	
							this._loopCount = loopCount;
	
							this._mixer.dispatchEvent( {
								type: 'loop', action: this, loopDelta: loopDelta
							} );
	
						}
	
					}
	
					if ( pingPong && ( loopCount & 1 ) === 1 ) {
	
						// invert time for the "pong round"
	
						this.time = time;
						return duration - time;
	
					}
	
				}
	
				this.time = time;
				return time;
	
			},
	
			_setEndings: function ( atStart, atEnd, pingPong ) {
	
				var settings = this._interpolantSettings;
	
				if ( pingPong ) {
	
					settings.endingStart 	= ZeroSlopeEnding;
					settings.endingEnd		= ZeroSlopeEnding;
	
				} else {
	
					// assuming for LoopOnce atStart == atEnd == true
	
					if ( atStart ) {
	
						settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
	
					} else {
	
						settings.endingStart = WrapAroundEnding;
	
					}
	
					if ( atEnd ) {
	
						settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
	
					} else {
	
						settings.endingEnd 	 = WrapAroundEnding;
	
					}
	
				}
	
			},
	
			_scheduleFading: function ( duration, weightNow, weightThen ) {
	
				var mixer = this._mixer, now = mixer.time,
					interpolant = this._weightInterpolant;
	
				if ( interpolant === null ) {
	
					interpolant = mixer._lendControlInterpolant();
					this._weightInterpolant = interpolant;
	
				}
	
				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;
	
				times[ 0 ] = now; 				values[ 0 ] = weightNow;
				times[ 1 ] = now + duration;	values[ 1 ] = weightThen;
	
				return this;
	
			}
	
		} );
	
		/**
		 *
		 * Player for AnimationClips.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function AnimationMixer( root ) {
	
			this._root = root;
			this._initMemoryManager();
			this._accuIndex = 0;
	
			this.time = 0;
	
			this.timeScale = 1.0;
	
		}
	
		Object.assign( AnimationMixer.prototype, EventDispatcher.prototype, {
	
			_bindAction: function ( action, prototypeAction ) {
	
				var root = action._localRoot || this._root,
					tracks = action._clip.tracks,
					nTracks = tracks.length,
					bindings = action._propertyBindings,
					interpolants = action._interpolants,
					rootUuid = root.uuid,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingsByName = bindingsByRoot[ rootUuid ];
	
				if ( bindingsByName === undefined ) {
	
					bindingsByName = {};
					bindingsByRoot[ rootUuid ] = bindingsByName;
	
				}
	
				for ( var i = 0; i !== nTracks; ++ i ) {
	
					var track = tracks[ i ],
						trackName = track.name,
						binding = bindingsByName[ trackName ];
	
					if ( binding !== undefined ) {
	
						bindings[ i ] = binding;
	
					} else {
	
						binding = bindings[ i ];
	
						if ( binding !== undefined ) {
	
							// existing binding, make sure the cache knows
	
							if ( binding._cacheIndex === null ) {
	
								++ binding.referenceCount;
								this._addInactiveBinding( binding, rootUuid, trackName );
	
							}
	
							continue;
	
						}
	
						var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;
	
						binding = new PropertyMixer(
							PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );
	
						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );
	
						bindings[ i ] = binding;
	
					}
	
					interpolants[ i ].resultBuffer = binding.buffer;
	
				}
	
			},
	
			_activateAction: function ( action ) {
	
				if ( ! this._isActiveAction( action ) ) {
	
					if ( action._cacheIndex === null ) {
	
						// this action has been forgotten by the cache, but the user
						// appears to be still using it -> rebind
	
						var rootUuid = ( action._localRoot || this._root ).uuid,
							clipUuid = action._clip.uuid,
							actionsForClip = this._actionsByClip[ clipUuid ];
	
						this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );
	
						this._addInactiveAction( action, clipUuid, rootUuid );
	
					}
	
					var bindings = action._propertyBindings;
	
					// increment reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
						var binding = bindings[ i ];
	
						if ( binding.useCount ++ === 0 ) {
	
							this._lendBinding( binding );
							binding.saveOriginalState();
	
						}
	
					}
	
					this._lendAction( action );
	
				}
	
			},
	
			_deactivateAction: function ( action ) {
	
				if ( this._isActiveAction( action ) ) {
	
					var bindings = action._propertyBindings;
	
					// decrement reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
						var binding = bindings[ i ];
	
						if ( -- binding.useCount === 0 ) {
	
							binding.restoreOriginalState();
							this._takeBackBinding( binding );
	
						}
	
					}
	
					this._takeBackAction( action );
	
				}
	
			},
	
			// Memory manager
	
			_initMemoryManager: function () {
	
				this._actions = []; // 'nActiveActions' followed by inactive ones
				this._nActiveActions = 0;
	
				this._actionsByClip = {};
				// inside:
				// {
				// 		knownActions: Array< AnimationAction >	- used as prototypes
				// 		actionByRoot: AnimationAction			- lookup
				// }
	
	
				this._bindings = []; // 'nActiveBindings' followed by inactive ones
				this._nActiveBindings = 0;
	
				this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
	
	
				this._controlInterpolants = []; // same game as above
				this._nActiveControlInterpolants = 0;
	
				var scope = this;
	
				this.stats = {
	
					actions: {
						get total() {
	
							return scope._actions.length;
	
						},
						get inUse() {
	
							return scope._nActiveActions;
	
						}
					},
					bindings: {
						get total() {
	
							return scope._bindings.length;
	
						},
						get inUse() {
	
							return scope._nActiveBindings;
	
						}
					},
					controlInterpolants: {
						get total() {
	
							return scope._controlInterpolants.length;
	
						},
						get inUse() {
	
							return scope._nActiveControlInterpolants;
	
						}
					}
	
				};
	
			},
	
			// Memory management for AnimationAction objects
	
			_isActiveAction: function ( action ) {
	
				var index = action._cacheIndex;
				return index !== null && index < this._nActiveActions;
	
			},
	
			_addInactiveAction: function ( action, clipUuid, rootUuid ) {
	
				var actions = this._actions,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];
	
				if ( actionsForClip === undefined ) {
	
					actionsForClip = {
	
						knownActions: [ action ],
						actionByRoot: {}
	
					};
	
					action._byClipCacheIndex = 0;
	
					actionsByClip[ clipUuid ] = actionsForClip;
	
				} else {
	
					var knownActions = actionsForClip.knownActions;
	
					action._byClipCacheIndex = knownActions.length;
					knownActions.push( action );
	
				}
	
				action._cacheIndex = actions.length;
				actions.push( action );
	
				actionsForClip.actionByRoot[ rootUuid ] = action;
	
			},
	
			_removeInactiveAction: function ( action ) {
	
				var actions = this._actions,
					lastInactiveAction = actions[ actions.length - 1 ],
					cacheIndex = action._cacheIndex;
	
				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();
	
				action._cacheIndex = null;
	
	
				var clipUuid = action._clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ],
					knownActionsForClip = actionsForClip.knownActions,
	
					lastKnownAction =
						knownActionsForClip[ knownActionsForClip.length - 1 ],
	
					byClipCacheIndex = action._byClipCacheIndex;
	
				lastKnownAction._byClipCacheIndex = byClipCacheIndex;
				knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
				knownActionsForClip.pop();
	
				action._byClipCacheIndex = null;
	
	
				var actionByRoot = actionsForClip.actionByRoot,
					rootUuid = ( action._localRoot || this._root ).uuid;
	
				delete actionByRoot[ rootUuid ];
	
				if ( knownActionsForClip.length === 0 ) {
	
					delete actionsByClip[ clipUuid ];
	
				}
	
				this._removeInactiveBindingsForAction( action );
	
			},
	
			_removeInactiveBindingsForAction: function ( action ) {
	
				var bindings = action._propertyBindings;
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
					var binding = bindings[ i ];
	
					if ( -- binding.referenceCount === 0 ) {
	
						this._removeInactiveBinding( binding );
	
					}
	
				}
	
			},
	
			_lendAction: function ( action ) {
	
				// [ active actions |  inactive actions  ]
				// [  active actions >| inactive actions ]
				//                 s        a
				//                  <-swap->
				//                 a        s
	
				var actions = this._actions,
					prevIndex = action._cacheIndex,
	
					lastActiveIndex = this._nActiveActions ++,
	
					firstInactiveAction = actions[ lastActiveIndex ];
	
				action._cacheIndex = lastActiveIndex;
				actions[ lastActiveIndex ] = action;
	
				firstInactiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = firstInactiveAction;
	
			},
	
			_takeBackAction: function ( action ) {
	
				// [  active actions  | inactive actions ]
				// [ active actions |< inactive actions  ]
				//        a        s
				//         <-swap->
				//        s        a
	
				var actions = this._actions,
					prevIndex = action._cacheIndex,
	
					firstInactiveIndex = -- this._nActiveActions,
	
					lastActiveAction = actions[ firstInactiveIndex ];
	
				action._cacheIndex = firstInactiveIndex;
				actions[ firstInactiveIndex ] = action;
	
				lastActiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = lastActiveAction;
	
			},
	
			// Memory management for PropertyMixer objects
	
			_addInactiveBinding: function ( binding, rootUuid, trackName ) {
	
				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],
	
					bindings = this._bindings;
	
				if ( bindingByName === undefined ) {
	
					bindingByName = {};
					bindingsByRoot[ rootUuid ] = bindingByName;
	
				}
	
				bindingByName[ trackName ] = binding;
	
				binding._cacheIndex = bindings.length;
				bindings.push( binding );
	
			},
	
			_removeInactiveBinding: function ( binding ) {
	
				var bindings = this._bindings,
					propBinding = binding.binding,
					rootUuid = propBinding.rootNode.uuid,
					trackName = propBinding.path,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],
	
					lastInactiveBinding = bindings[ bindings.length - 1 ],
					cacheIndex = binding._cacheIndex;
	
				lastInactiveBinding._cacheIndex = cacheIndex;
				bindings[ cacheIndex ] = lastInactiveBinding;
				bindings.pop();
	
				delete bindingByName[ trackName ];
	
				remove_empty_map: {
	
					for ( var _ in bindingByName ) break remove_empty_map; // eslint-disable-line no-unused-vars
	
					delete bindingsByRoot[ rootUuid ];
	
				}
	
			},
	
			_lendBinding: function ( binding ) {
	
				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,
	
					lastActiveIndex = this._nActiveBindings ++,
	
					firstInactiveBinding = bindings[ lastActiveIndex ];
	
				binding._cacheIndex = lastActiveIndex;
				bindings[ lastActiveIndex ] = binding;
	
				firstInactiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = firstInactiveBinding;
	
			},
	
			_takeBackBinding: function ( binding ) {
	
				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,
	
					firstInactiveIndex = -- this._nActiveBindings,
	
					lastActiveBinding = bindings[ firstInactiveIndex ];
	
				binding._cacheIndex = firstInactiveIndex;
				bindings[ firstInactiveIndex ] = binding;
	
				lastActiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = lastActiveBinding;
	
			},
	
	
			// Memory management of Interpolants for weight and time scale
	
			_lendControlInterpolant: function () {
	
				var interpolants = this._controlInterpolants,
					lastActiveIndex = this._nActiveControlInterpolants ++,
					interpolant = interpolants[ lastActiveIndex ];
	
				if ( interpolant === undefined ) {
	
					interpolant = new LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
						1, this._controlInterpolantsResultBuffer );
	
					interpolant.__cacheIndex = lastActiveIndex;
					interpolants[ lastActiveIndex ] = interpolant;
	
				}
	
				return interpolant;
	
			},
	
			_takeBackControlInterpolant: function ( interpolant ) {
	
				var interpolants = this._controlInterpolants,
					prevIndex = interpolant.__cacheIndex,
	
					firstInactiveIndex = -- this._nActiveControlInterpolants,
	
					lastActiveInterpolant = interpolants[ firstInactiveIndex ];
	
				interpolant.__cacheIndex = firstInactiveIndex;
				interpolants[ firstInactiveIndex ] = interpolant;
	
				lastActiveInterpolant.__cacheIndex = prevIndex;
				interpolants[ prevIndex ] = lastActiveInterpolant;
	
			},
	
			_controlInterpolantsResultBuffer: new Float32Array( 1 ),
	
			// return an action for a clip optionally using a custom root target
			// object (this method allocates a lot of dynamic memory in case a
			// previously unknown clip/root combination is specified)
			clipAction: function ( clip, optionalRoot ) {
	
				var root = optionalRoot || this._root,
					rootUuid = root.uuid,
	
					clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,
	
					clipUuid = clipObject !== null ? clipObject.uuid : clip,
	
					actionsForClip = this._actionsByClip[ clipUuid ],
					prototypeAction = null;
	
				if ( actionsForClip !== undefined ) {
	
					var existingAction =
							actionsForClip.actionByRoot[ rootUuid ];
	
					if ( existingAction !== undefined ) {
	
						return existingAction;
	
					}
	
					// we know the clip, so we don't have to parse all
					// the bindings again but can just copy
					prototypeAction = actionsForClip.knownActions[ 0 ];
	
					// also, take the clip from the prototype action
					if ( clipObject === null )
						clipObject = prototypeAction._clip;
	
				}
	
				// clip must be known when specified via string
				if ( clipObject === null ) return null;
	
				// allocate all resources required to run it
				var newAction = new AnimationAction( this, clipObject, optionalRoot );
	
				this._bindAction( newAction, prototypeAction );
	
				// and make the action known to the memory manager
				this._addInactiveAction( newAction, clipUuid, rootUuid );
	
				return newAction;
	
			},
	
			// get an existing action
			existingAction: function ( clip, optionalRoot ) {
	
				var root = optionalRoot || this._root,
					rootUuid = root.uuid,
	
					clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,
	
					clipUuid = clipObject ? clipObject.uuid : clip,
	
					actionsForClip = this._actionsByClip[ clipUuid ];
	
				if ( actionsForClip !== undefined ) {
	
					return actionsForClip.actionByRoot[ rootUuid ] || null;
	
				}
	
				return null;
	
			},
	
			// deactivates all previously scheduled actions
			stopAllAction: function () {
	
				var actions = this._actions,
					nActions = this._nActiveActions,
					bindings = this._bindings,
					nBindings = this._nActiveBindings;
	
				this._nActiveActions = 0;
				this._nActiveBindings = 0;
	
				for ( var i = 0; i !== nActions; ++ i ) {
	
					actions[ i ].reset();
	
				}
	
				for ( var i = 0; i !== nBindings; ++ i ) {
	
					bindings[ i ].useCount = 0;
	
				}
	
				return this;
	
			},
	
			// advance the time and update apply the animation
			update: function ( deltaTime ) {
	
				deltaTime *= this.timeScale;
	
				var actions = this._actions,
					nActions = this._nActiveActions,
	
					time = this.time += deltaTime,
					timeDirection = Math.sign( deltaTime ),
	
					accuIndex = this._accuIndex ^= 1;
	
				// run active actions
	
				for ( var i = 0; i !== nActions; ++ i ) {
	
					var action = actions[ i ];
	
					action._update( time, deltaTime, timeDirection, accuIndex );
	
				}
	
				// update scene graph
	
				var bindings = this._bindings,
					nBindings = this._nActiveBindings;
	
				for ( var i = 0; i !== nBindings; ++ i ) {
	
					bindings[ i ].apply( accuIndex );
	
				}
	
				return this;
	
			},
	
			// return this mixer's root target object
			getRoot: function () {
	
				return this._root;
	
			},
	
			// free all resources specific to a particular clip
			uncacheClip: function ( clip ) {
	
				var actions = this._actions,
					clipUuid = clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];
	
				if ( actionsForClip !== undefined ) {
	
					// note: just calling _removeInactiveAction would mess up the
					// iteration state and also require updating the state we can
					// just throw away
	
					var actionsToRemove = actionsForClip.knownActions;
	
					for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
	
						var action = actionsToRemove[ i ];
	
						this._deactivateAction( action );
	
						var cacheIndex = action._cacheIndex,
							lastInactiveAction = actions[ actions.length - 1 ];
	
						action._cacheIndex = null;
						action._byClipCacheIndex = null;
	
						lastInactiveAction._cacheIndex = cacheIndex;
						actions[ cacheIndex ] = lastInactiveAction;
						actions.pop();
	
						this._removeInactiveBindingsForAction( action );
	
					}
	
					delete actionsByClip[ clipUuid ];
	
				}
	
			},
	
			// free all resources specific to a particular root target object
			uncacheRoot: function ( root ) {
	
				var rootUuid = root.uuid,
					actionsByClip = this._actionsByClip;
	
				for ( var clipUuid in actionsByClip ) {
	
					var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
						action = actionByRoot[ rootUuid ];
	
					if ( action !== undefined ) {
	
						this._deactivateAction( action );
						this._removeInactiveAction( action );
	
					}
	
				}
	
				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ];
	
				if ( bindingByName !== undefined ) {
	
					for ( var trackName in bindingByName ) {
	
						var binding = bindingByName[ trackName ];
						binding.restoreOriginalState();
						this._removeInactiveBinding( binding );
	
					}
	
				}
	
			},
	
			// remove a targeted clip from the cache
			uncacheAction: function ( clip, optionalRoot ) {
	
				var action = this.existingAction( clip, optionalRoot );
	
				if ( action !== null ) {
	
					this._deactivateAction( action );
					this._removeInactiveAction( action );
	
				}
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Uniform( value ) {
	
			if ( typeof value === 'string' ) {
	
				console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
				value = arguments[ 1 ];
	
			}
	
			this.value = value;
	
		}
	
		Uniform.prototype.clone = function () {
	
			return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );
	
		};
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedBufferGeometry() {
	
			BufferGeometry.call( this );
	
			this.type = 'InstancedBufferGeometry';
			this.maxInstancedCount = undefined;
	
		}
	
		InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {
	
			constructor: InstancedBufferGeometry,
	
			isInstancedBufferGeometry: true,
	
			copy: function ( source ) {
	
				BufferGeometry.prototype.copy.call( this, source );
	
				this.maxInstancedCount = source.maxInstancedCount;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			}
	
		} );
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {
	
			this.uuid = _Math.generateUUID();
	
			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;
	
			this.normalized = normalized === true;
	
		}
	
		Object.defineProperties( InterleavedBufferAttribute.prototype, {
	
			count: {
	
				get: function () {
	
					return this.data.count;
	
				}
	
			},
	
			array: {
	
				get: function () {
	
					return this.data.array;
	
				}
	
			}
	
		} );
	
		Object.assign( InterleavedBufferAttribute.prototype, {
	
			isInterleavedBufferAttribute: true,
	
			setX: function ( index, x ) {
	
				this.data.array[ index * this.data.stride + this.offset ] = x;
	
				return this;
	
			},
	
			setY: function ( index, y ) {
	
				this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
	
				return this;
	
			},
	
			setZ: function ( index, z ) {
	
				this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
	
				return this;
	
			},
	
			setW: function ( index, w ) {
	
				this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
	
				return this;
	
			},
	
			getX: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset ];
	
			},
	
			getY: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 1 ];
	
			},
	
			getZ: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 2 ];
	
			},
	
			getW: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 3 ];
	
			},
	
			setXY: function ( index, x, y ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
	
				return this;
	
			},
	
			setXYZ: function ( index, x, y, z ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
	
				return this;
	
			},
	
			setXYZW: function ( index, x, y, z, w ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
				this.data.array[ index + 3 ] = w;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InterleavedBuffer( array, stride ) {
	
			this.uuid = _Math.generateUUID();
	
			this.array = array;
			this.stride = stride;
			this.count = array !== undefined ? array.length / stride : 0;
	
			this.dynamic = false;
			this.updateRange = { offset: 0, count: - 1 };
	
			this.onUploadCallback = function () {};
	
			this.version = 0;
	
		}
	
		Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {
	
			set: function ( value ) {
	
				if ( value === true ) this.version ++;
	
			}
	
		} );
	
		Object.assign( InterleavedBuffer.prototype, {
	
			isInterleavedBuffer: true,
	
			setArray: function ( array ) {
	
				if ( Array.isArray( array ) ) {
	
					throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
	
				}
	
				this.count = array !== undefined ? array.length / this.stride : 0;
				this.array = array;
	
			},
	
			setDynamic: function ( value ) {
	
				this.dynamic = value;
	
				return this;
	
			},
	
			copy: function ( source ) {
	
				this.array = new source.array.constructor( source.array );
				this.count = source.count;
				this.stride = source.stride;
				this.dynamic = source.dynamic;
	
				return this;
	
			},
	
			copyAt: function ( index1, attribute, index2 ) {
	
				index1 *= this.stride;
				index2 *= attribute.stride;
	
				for ( var i = 0, l = this.stride; i < l; i ++ ) {
	
					this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
				}
	
				return this;
	
			},
	
			set: function ( value, offset ) {
	
				if ( offset === undefined ) offset = 0;
	
				this.array.set( value, offset );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			onUpload: function ( callback ) {
	
				this.onUploadCallback = callback;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {
	
			InterleavedBuffer.call( this, array, stride );
	
			this.meshPerAttribute = meshPerAttribute || 1;
	
		}
	
		InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {
	
			constructor: InstancedInterleavedBuffer,
	
			isInstancedInterleavedBuffer: true,
	
			copy: function ( source ) {
	
				InterleavedBuffer.prototype.copy.call( this, source );
	
				this.meshPerAttribute = source.meshPerAttribute;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedBufferAttribute( array, itemSize, meshPerAttribute ) {
	
			BufferAttribute.call( this, array, itemSize );
	
			this.meshPerAttribute = meshPerAttribute || 1;
	
		}
	
		InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {
	
			constructor: InstancedBufferAttribute,
	
			isInstancedBufferAttribute: true,
	
			copy: function ( source ) {
	
				BufferAttribute.prototype.copy.call( this, source );
	
				this.meshPerAttribute = source.meshPerAttribute;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author bhouston / http://clara.io/
		 * @author stephomi / http://stephaneginier.com/
		 */
	
		function Raycaster( origin, direction, near, far ) {
	
			this.ray = new Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)
	
			this.near = near || 0;
			this.far = far || Infinity;
	
			this.params = {
				Mesh: {},
				Line: {},
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};
	
			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
	
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
	
					}
				}
			} );
	
		}
	
		function ascSort( a, b ) {
	
			return a.distance - b.distance;
	
		}
	
		function intersectObject( object, raycaster, intersects, recursive ) {
	
			if ( object.visible === false ) return;
	
			object.raycast( raycaster, intersects );
	
			if ( recursive === true ) {
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					intersectObject( children[ i ], raycaster, intersects, true );
	
				}
	
			}
	
		}
	
		Object.assign( Raycaster.prototype, {
	
			linePrecision: 1,
	
			set: function ( origin, direction ) {
	
				// direction is assumed to be normalized (for accurate distance calculations)
	
				this.ray.set( origin, direction );
	
			},
	
			setFromCamera: function ( coords, camera ) {
	
				if ( ( camera && camera.isPerspectiveCamera ) ) {
	
					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
	
				} else if ( ( camera && camera.isOrthographicCamera ) ) {
	
					this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
	
				} else {
	
					console.error( 'THREE.Raycaster: Unsupported camera type.' );
	
				}
	
			},
	
			intersectObject: function ( object, recursive ) {
	
				var intersects = [];
	
				intersectObject( object, this, intersects, recursive );
	
				intersects.sort( ascSort );
	
				return intersects;
	
			},
	
			intersectObjects: function ( objects, recursive ) {
	
				var intersects = [];
	
				if ( Array.isArray( objects ) === false ) {
	
					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;
	
				}
	
				for ( var i = 0, l = objects.length; i < l; i ++ ) {
	
					intersectObject( objects[ i ], this, intersects, recursive );
	
				}
	
				intersects.sort( ascSort );
	
				return intersects;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Clock( autoStart ) {
	
			this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
	
			this.startTime = 0;
			this.oldTime = 0;
			this.elapsedTime = 0;
	
			this.running = false;
	
		}
	
		Object.assign( Clock.prototype, {
	
			start: function () {
	
				this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732
	
				this.oldTime = this.startTime;
				this.elapsedTime = 0;
				this.running = true;
	
			},
	
			stop: function () {
	
				this.getElapsedTime();
				this.running = false;
				this.autoStart = false;
	
			},
	
			getElapsedTime: function () {
	
				this.getDelta();
				return this.elapsedTime;
	
			},
	
			getDelta: function () {
	
				var diff = 0;
	
				if ( this.autoStart && ! this.running ) {
	
					this.start();
					return 0;
	
				}
	
				if ( this.running ) {
	
					var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();
	
					diff = ( newTime - this.oldTime ) / 1000;
					this.oldTime = newTime;
	
					this.elapsedTime += diff;
	
				}
	
				return diff;
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
		 *
		 * The poles (phi) are at the positive and negative y axis.
		 * The equator starts at positive z.
		 */
	
		function Spherical( radius, phi, theta ) {
	
			this.radius = ( radius !== undefined ) ? radius : 1.0;
			this.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole
			this.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere
	
			return this;
	
		}
	
		Object.assign( Spherical.prototype, {
	
			set: function ( radius, phi, theta ) {
	
				this.radius = radius;
				this.phi = phi;
				this.theta = theta;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( other ) {
	
				this.radius = other.radius;
				this.phi = other.phi;
				this.theta = other.theta;
	
				return this;
	
			},
	
			// restrict phi to be betwee EPS and PI-EPS
			makeSafe: function () {
	
				var EPS = 0.000001;
				this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
	
				return this;
	
			},
	
			setFromVector3: function ( vec3 ) {
	
				this.radius = vec3.length();
	
				if ( this.radius === 0 ) {
	
					this.theta = 0;
					this.phi = 0;
	
				} else {
	
					this.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis
					this.phi = Math.acos( _Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
		 *
		 */
	
		function Cylindrical( radius, theta, y ) {
	
			this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
			this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
			this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane
	
			return this;
	
		}
	
		Object.assign( Cylindrical.prototype, {
	
			set: function ( radius, theta, y ) {
	
				this.radius = radius;
				this.theta = theta;
				this.y = y;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( other ) {
	
				this.radius = other.radius;
				this.theta = other.theta;
				this.y = other.y;
	
				return this;
	
			},
	
			setFromVector3: function ( vec3 ) {
	
				this.radius = Math.sqrt( vec3.x * vec3.x + vec3.z * vec3.z );
				this.theta = Math.atan2( vec3.x, vec3.z );
				this.y = vec3.y;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function ImmediateRenderObject( material ) {
	
			Object3D.call( this );
	
			this.material = material;
			this.render = function ( /* renderCallback */ ) {};
	
		}
	
		ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
		ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
	
		ImmediateRenderObject.prototype.isImmediateRenderObject = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function VertexNormalsHelper( object, size, hex, linewidth ) {
	
			this.object = object;
	
			this.size = ( size !== undefined ) ? size : 1;
	
			var color = ( hex !== undefined ) ? hex : 0xff0000;
	
			var width = ( linewidth !== undefined ) ? linewidth : 1;
	
			//
	
			var nNormals = 0;
	
			var objGeometry = this.object.geometry;
	
			if ( objGeometry && objGeometry.isGeometry ) {
	
				nNormals = objGeometry.faces.length * 3;
	
			} else if ( objGeometry && objGeometry.isBufferGeometry ) {
	
				nNormals = objGeometry.attributes.normal.count;
	
			}
	
			//
	
			var geometry = new BufferGeometry();
	
			var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
	
			geometry.addAttribute( 'position', positions );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
	
			//
	
			this.matrixAutoUpdate = false;
	
			this.update();
	
		}
	
		VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
		VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;
	
		VertexNormalsHelper.prototype.update = ( function () {
	
			var v1 = new Vector3();
			var v2 = new Vector3();
			var normalMatrix = new Matrix3();
	
			return function update() {
	
				var keys = [ 'a', 'b', 'c' ];
	
				this.object.updateMatrixWorld( true );
	
				normalMatrix.getNormalMatrix( this.object.matrixWorld );
	
				var matrixWorld = this.object.matrixWorld;
	
				var position = this.geometry.attributes.position;
	
				//
	
				var objGeometry = this.object.geometry;
	
				if ( objGeometry && objGeometry.isGeometry ) {
	
					var vertices = objGeometry.vertices;
	
					var faces = objGeometry.faces;
	
					var idx = 0;
	
					for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
						var face = faces[ i ];
	
						for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
	
							var vertex = vertices[ face[ keys[ j ] ] ];
	
							var normal = face.vertexNormals[ j ];
	
							v1.copy( vertex ).applyMatrix4( matrixWorld );
	
							v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
							position.setXYZ( idx, v1.x, v1.y, v1.z );
	
							idx = idx + 1;
	
							position.setXYZ( idx, v2.x, v2.y, v2.z );
	
							idx = idx + 1;
	
						}
	
					}
	
				} else if ( objGeometry && objGeometry.isBufferGeometry ) {
	
					var objPos = objGeometry.attributes.position;
	
					var objNorm = objGeometry.attributes.normal;
	
					var idx = 0;
	
					// for simplicity, ignore index and drawcalls, and render every normal
	
					for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {
	
						v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );
	
						v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );
	
						v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
						position.setXYZ( idx, v1.x, v1.y, v1.z );
	
						idx = idx + 1;
	
						position.setXYZ( idx, v2.x, v2.y, v2.z );
	
						idx = idx + 1;
	
					}
	
				}
	
				position.needsUpdate = true;
	
			};
	
		}() );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function SpotLightHelper( light, color ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.color = color;
	
			var geometry = new BufferGeometry();
	
			var positions = [
				0, 0, 0, 	0, 0, 1,
				0, 0, 0, 	1, 0, 1,
				0, 0, 0,	- 1, 0, 1,
				0, 0, 0, 	0, 1, 1,
				0, 0, 0, 	0, - 1, 1
			];
	
			for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
	
				var p1 = ( i / l ) * Math.PI * 2;
				var p2 = ( j / l ) * Math.PI * 2;
	
				positions.push(
					Math.cos( p1 ), Math.sin( p1 ), 1,
					Math.cos( p2 ), Math.sin( p2 ), 1
				);
	
			}
	
			geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
	
			var material = new LineBasicMaterial( { fog: false } );
	
			this.cone = new LineSegments( geometry, material );
			this.add( this.cone );
	
			this.update();
	
		}
	
		SpotLightHelper.prototype = Object.create( Object3D.prototype );
		SpotLightHelper.prototype.constructor = SpotLightHelper;
	
		SpotLightHelper.prototype.dispose = function () {
	
			this.cone.geometry.dispose();
			this.cone.material.dispose();
	
		};
	
		SpotLightHelper.prototype.update = function () {
	
			var vector = new Vector3();
			var vector2 = new Vector3();
	
			return function update() {
	
				this.light.updateMatrixWorld();
	
				var coneLength = this.light.distance ? this.light.distance : 1000;
				var coneWidth = coneLength * Math.tan( this.light.angle );
	
				this.cone.scale.set( coneWidth, coneWidth, coneLength );
	
				vector.setFromMatrixPosition( this.light.matrixWorld );
				vector2.setFromMatrixPosition( this.light.target.matrixWorld );
	
				this.cone.lookAt( vector2.sub( vector ) );
	
				if ( this.color !== undefined ) {
	
					this.cone.material.color.set( this.color );
	
				} else {
	
					this.cone.material.color.copy( this.light.color );
	
				}
	
			};
	
		}();
	
		/**
		 * @author Sean Griffin / http://twitter.com/sgrif
		 * @author Michael Guerrero / http://realitymeltdown.com
		 * @author mrdoob / http://mrdoob.com/
		 * @author ikerr / http://verold.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function getBoneList( object ) {
	
			var boneList = [];
	
			if ( object && object.isBone ) {
	
				boneList.push( object );
	
			}
	
			for ( var i = 0; i < object.children.length; i ++ ) {
	
				boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );
	
			}
	
			return boneList;
	
		}
	
		function SkeletonHelper( object ) {
	
			var bones = getBoneList( object );
	
			var geometry = new BufferGeometry();
	
			var vertices = [];
			var colors = [];
	
			var color1 = new Color( 0, 0, 1 );
			var color2 = new Color( 0, 1, 0 );
	
			for ( var i = 0; i < bones.length; i ++ ) {
	
				var bone = bones[ i ];
	
				if ( bone.parent && bone.parent.isBone ) {
	
					vertices.push( 0, 0, 0 );
					vertices.push( 0, 0, 0 );
					colors.push( color1.r, color1.g, color1.b );
					colors.push( color2.r, color2.g, color2.b );
	
				}
	
			}
	
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );
	
			LineSegments.call( this, geometry, material );
	
			this.root = object;
			this.bones = bones;
	
			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;
	
		}
	
		SkeletonHelper.prototype = Object.create( LineSegments.prototype );
		SkeletonHelper.prototype.constructor = SkeletonHelper;
	
		SkeletonHelper.prototype.updateMatrixWorld = function () {
	
			var vector = new Vector3();
	
			var boneMatrix = new Matrix4();
			var matrixWorldInv = new Matrix4();
	
			return function updateMatrixWorld( force ) {
	
				var bones = this.bones;
	
				var geometry = this.geometry;
				var position = geometry.getAttribute( 'position' );
	
				matrixWorldInv.getInverse( this.root.matrixWorld );
	
				for ( var i = 0, j = 0; i < bones.length; i ++ ) {
	
					var bone = bones[ i ];
	
					if ( bone.parent && bone.parent.isBone ) {
	
						boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
						vector.setFromMatrixPosition( boneMatrix );
						position.setXYZ( j, vector.x, vector.y, vector.z );
	
						boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
						vector.setFromMatrixPosition( boneMatrix );
						position.setXYZ( j + 1, vector.x, vector.y, vector.z );
	
						j += 2;
	
					}
	
				}
	
				geometry.getAttribute( 'position' ).needsUpdate = true;
	
				Object3D.prototype.updateMatrixWorld.call( this, force );
	
			};
	
		}();
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function PointLightHelper( light, sphereSize, color ) {
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.color = color;
	
			var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
			var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
	
			Mesh.call( this, geometry, material );
	
			this.matrix = this.light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.update();
	
	
			/*
			var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
			var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
	
			this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
			this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
	
			var d = light.distance;
	
			if ( d === 0.0 ) {
	
				this.lightDistance.visible = false;
	
			} else {
	
				this.lightDistance.scale.set( d, d, d );
	
			}
	
			this.add( this.lightDistance );
			*/
	
		}
	
		PointLightHelper.prototype = Object.create( Mesh.prototype );
		PointLightHelper.prototype.constructor = PointLightHelper;
	
		PointLightHelper.prototype.dispose = function () {
	
			this.geometry.dispose();
			this.material.dispose();
	
		};
	
		PointLightHelper.prototype.update = function () {
	
			if ( this.color !== undefined ) {
	
				this.material.color.set( this.color );
	
			} else {
	
				this.material.color.copy( this.light.color );
	
			}
	
			/*
			var d = this.light.distance;
	
			if ( d === 0.0 ) {
	
				this.lightDistance.visible = false;
	
			} else {
	
				this.lightDistance.visible = true;
				this.lightDistance.scale.set( d, d, d );
	
			}
			*/
	
		};
	
		/**
		 * @author abelnation / http://github.com/abelnation
		 * @author Mugen87 / http://github.com/Mugen87
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function RectAreaLightHelper( light, color ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.color = color;
	
			var material = new LineBasicMaterial( { fog: false } );
	
			var geometry = new BufferGeometry();
	
			geometry.addAttribute( 'position', new BufferAttribute( new Float32Array( 5 * 3 ), 3 ) );
	
			this.line = new Line( geometry, material );
			this.add( this.line );
	
	
			this.update();
	
		}
	
		RectAreaLightHelper.prototype = Object.create( Object3D.prototype );
		RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;
	
		RectAreaLightHelper.prototype.dispose = function () {
	
			this.children[ 0 ].geometry.dispose();
			this.children[ 0 ].material.dispose();
	
		};
	
		RectAreaLightHelper.prototype.update = function () {
	
			// calculate new dimensions of the helper
	
			var hx = this.light.width * 0.5;
			var hy = this.light.height * 0.5;
	
			var position = this.line.geometry.attributes.position;
			var array = position.array;
	
			// update vertices
	
			array[ 0 ] = hx; array[ 1 ] = - hy; array[ 2 ] = 0;
			array[ 3 ] = hx; array[ 4 ] = hy; array[ 5 ] = 0;
			array[ 6 ] = - hx; array[ 7 ] = hy; array[ 8 ] = 0;
			array[ 9 ] = - hx; array[ 10 ] = - hy; array[ 11 ] = 0;
			array[ 12 ] = hx; array[ 13 ] = - hy; array[ 14 ] = 0;
	
			position.needsUpdate = true;
	
			if ( this.color !== undefined ) {
	
				this.line.material.color.set( this.color );
	
			} else {
	
				this.line.material.color.copy( this.light.color );
	
			}
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function HemisphereLightHelper( light, size, color ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.color = color;
	
			var geometry = new OctahedronBufferGeometry( size );
			geometry.rotateY( Math.PI * 0.5 );
	
			this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
			if ( this.color === undefined ) this.material.vertexColors = VertexColors;
	
			var position = geometry.getAttribute( 'position' );
			var colors = new Float32Array( position.count * 3 );
	
			geometry.addAttribute( 'color', new BufferAttribute( colors, 3 ) );
	
			this.add( new Mesh( geometry, this.material ) );
	
			this.update();
	
		}
	
		HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
		HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
	
		HemisphereLightHelper.prototype.dispose = function () {
	
			this.children[ 0 ].geometry.dispose();
			this.children[ 0 ].material.dispose();
	
		};
	
		HemisphereLightHelper.prototype.update = function () {
	
			var vector = new Vector3();
	
			var color1 = new Color();
			var color2 = new Color();
	
			return function update() {
	
				var mesh = this.children[ 0 ];
	
				if ( this.color !== undefined ) {
	
					this.material.color.set( this.color );
	
				} else {
	
					var colors = mesh.geometry.getAttribute( 'color' );
	
					color1.copy( this.light.color );
					color2.copy( this.light.groundColor );
	
					for ( var i = 0, l = colors.count; i < l; i ++ ) {
	
						var color = ( i < ( l / 2 ) ) ? color1 : color2;
	
						colors.setXYZ( i, color.r, color.g, color.b );
	
					}
	
					colors.needsUpdate = true;
	
				}
	
				mesh.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
	
			};
	
		}();
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function GridHelper( size, divisions, color1, color2 ) {
	
			size = size || 10;
			divisions = divisions || 10;
			color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
	
			var center = divisions / 2;
			var step = size / divisions;
			var halfSize = size / 2;
	
			var vertices = [], colors = [];
	
			for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {
	
				vertices.push( - halfSize, 0, k, halfSize, 0, k );
				vertices.push( k, 0, - halfSize, k, 0, halfSize );
	
				var color = i === center ? color1 : color2;
	
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
	
			}
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: VertexColors } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		GridHelper.prototype = Object.create( LineSegments.prototype );
		GridHelper.prototype.constructor = GridHelper;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / http://github.com/Mugen87
		 * @author Hectate / http://www.github.com/Hectate
		 */
	
		function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {
	
			radius = radius || 10;
			radials = radials || 16;
			circles = circles || 8;
			divisions = divisions || 64;
			color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
	
			var vertices = [];
			var colors = [];
	
			var x, z;
			var v, i, j, r, color;
	
			// create the radials
	
			for ( i = 0; i <= radials; i ++ ) {
	
				v = ( i / radials ) * ( Math.PI * 2 );
	
				x = Math.sin( v ) * radius;
				z = Math.cos( v ) * radius;
	
				vertices.push( 0, 0, 0 );
				vertices.push( x, 0, z );
	
				color = ( i & 1 ) ? color1 : color2;
	
				colors.push( color.r, color.g, color.b );
				colors.push( color.r, color.g, color.b );
	
			}
	
			// create the circles
	
			for ( i = 0; i <= circles; i ++ ) {
	
				color = ( i & 1 ) ? color1 : color2;
	
				r = radius - ( radius / circles * i );
	
				for ( j = 0; j < divisions; j ++ ) {
	
					// first vertex
	
					v = ( j / divisions ) * ( Math.PI * 2 );
	
					x = Math.sin( v ) * r;
					z = Math.cos( v ) * r;
	
					vertices.push( x, 0, z );
					colors.push( color.r, color.g, color.b );
	
					// second vertex
	
					v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );
	
					x = Math.sin( v ) * r;
					z = Math.cos( v ) * r;
	
					vertices.push( x, 0, z );
					colors.push( color.r, color.g, color.b );
	
				}
	
			}
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: VertexColors } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		PolarGridHelper.prototype = Object.create( LineSegments.prototype );
		PolarGridHelper.prototype.constructor = PolarGridHelper;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function FaceNormalsHelper( object, size, hex, linewidth ) {
	
			// FaceNormalsHelper only supports THREE.Geometry
	
			this.object = object;
	
			this.size = ( size !== undefined ) ? size : 1;
	
			var color = ( hex !== undefined ) ? hex : 0xffff00;
	
			var width = ( linewidth !== undefined ) ? linewidth : 1;
	
			//
	
			var nNormals = 0;
	
			var objGeometry = this.object.geometry;
	
			if ( objGeometry && objGeometry.isGeometry ) {
	
				nNormals = objGeometry.faces.length;
	
			} else {
	
				console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );
	
			}
	
			//
	
			var geometry = new BufferGeometry();
	
			var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );
	
			geometry.addAttribute( 'position', positions );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );
	
			//
	
			this.matrixAutoUpdate = false;
			this.update();
	
		}
	
		FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
		FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;
	
		FaceNormalsHelper.prototype.update = ( function () {
	
			var v1 = new Vector3();
			var v2 = new Vector3();
			var normalMatrix = new Matrix3();
	
			return function update() {
	
				this.object.updateMatrixWorld( true );
	
				normalMatrix.getNormalMatrix( this.object.matrixWorld );
	
				var matrixWorld = this.object.matrixWorld;
	
				var position = this.geometry.attributes.position;
	
				//
	
				var objGeometry = this.object.geometry;
	
				var vertices = objGeometry.vertices;
	
				var faces = objGeometry.faces;
	
				var idx = 0;
	
				for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					var normal = face.normal;
	
					v1.copy( vertices[ face.a ] )
						.add( vertices[ face.b ] )
						.add( vertices[ face.c ] )
						.divideScalar( 3 )
						.applyMatrix4( matrixWorld );
	
					v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
					position.setXYZ( idx, v1.x, v1.y, v1.z );
	
					idx = idx + 1;
	
					position.setXYZ( idx, v2.x, v2.y, v2.z );
	
					idx = idx + 1;
	
				}
	
				position.needsUpdate = true;
	
			};
	
		}() );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function DirectionalLightHelper( light, size, color ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.color = color;
	
			if ( size === undefined ) size = 1;
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( [
				- size, size, 0,
				size, size, 0,
				size, - size, 0,
				- size, - size, 0,
				- size, size, 0
			], 3 ) );
	
			var material = new LineBasicMaterial( { fog: false } );
	
			this.lightPlane = new Line( geometry, material );
			this.add( this.lightPlane );
	
			geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
	
			this.targetLine = new Line( geometry, material );
			this.add( this.targetLine );
	
			this.update();
	
		}
	
		DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
		DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
	
		DirectionalLightHelper.prototype.dispose = function () {
	
			this.lightPlane.geometry.dispose();
			this.lightPlane.material.dispose();
			this.targetLine.geometry.dispose();
			this.targetLine.material.dispose();
	
		};
	
		DirectionalLightHelper.prototype.update = function () {
	
			var v1 = new Vector3();
			var v2 = new Vector3();
			var v3 = new Vector3();
	
			return function update() {
	
				v1.setFromMatrixPosition( this.light.matrixWorld );
				v2.setFromMatrixPosition( this.light.target.matrixWorld );
				v3.subVectors( v2, v1 );
	
				this.lightPlane.lookAt( v3 );
	
				if ( this.color !== undefined ) {
	
					this.lightPlane.material.color.set( this.color );
					this.targetLine.material.color.set( this.color );
	
				} else {
	
					this.lightPlane.material.color.copy( this.light.color );
					this.targetLine.material.color.copy( this.light.color );
	
				}
	
				this.targetLine.lookAt( v3 );
				this.targetLine.scale.z = v3.length();
	
			};
	
		}();
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 *	- shows frustum, line of sight and up of the camera
		 *	- suitable for fast updates
		 * 	- based on frustum visualization in lightgl.js shadowmap example
		 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
		 */
	
		function CameraHelper( camera ) {
	
			var geometry = new BufferGeometry();
			var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );
	
			var vertices = [];
			var colors = [];
	
			var pointMap = {};
	
			// colors
	
			var colorFrustum = new Color( 0xffaa00 );
			var colorCone = new Color( 0xff0000 );
			var colorUp = new Color( 0x00aaff );
			var colorTarget = new Color( 0xffffff );
			var colorCross = new Color( 0x333333 );
	
			// near
	
			addLine( 'n1', 'n2', colorFrustum );
			addLine( 'n2', 'n4', colorFrustum );
			addLine( 'n4', 'n3', colorFrustum );
			addLine( 'n3', 'n1', colorFrustum );
	
			// far
	
			addLine( 'f1', 'f2', colorFrustum );
			addLine( 'f2', 'f4', colorFrustum );
			addLine( 'f4', 'f3', colorFrustum );
			addLine( 'f3', 'f1', colorFrustum );
	
			// sides
	
			addLine( 'n1', 'f1', colorFrustum );
			addLine( 'n2', 'f2', colorFrustum );
			addLine( 'n3', 'f3', colorFrustum );
			addLine( 'n4', 'f4', colorFrustum );
	
			// cone
	
			addLine( 'p', 'n1', colorCone );
			addLine( 'p', 'n2', colorCone );
			addLine( 'p', 'n3', colorCone );
			addLine( 'p', 'n4', colorCone );
	
			// up
	
			addLine( 'u1', 'u2', colorUp );
			addLine( 'u2', 'u3', colorUp );
			addLine( 'u3', 'u1', colorUp );
	
			// target
	
			addLine( 'c', 't', colorTarget );
			addLine( 'p', 'c', colorCross );
	
			// cross
	
			addLine( 'cn1', 'cn2', colorCross );
			addLine( 'cn3', 'cn4', colorCross );
	
			addLine( 'cf1', 'cf2', colorCross );
			addLine( 'cf3', 'cf4', colorCross );
	
			function addLine( a, b, color ) {
	
				addPoint( a, color );
				addPoint( b, color );
	
			}
	
			function addPoint( id, color ) {
	
				vertices.push( 0, 0, 0 );
				colors.push( color.r, color.g, color.b );
	
				if ( pointMap[ id ] === undefined ) {
	
					pointMap[ id ] = [];
	
				}
	
				pointMap[ id ].push( ( vertices.length / 3 ) - 1 );
	
			}
	
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			LineSegments.call( this, geometry, material );
	
			this.camera = camera;
			if ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();
	
			this.matrix = camera.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.pointMap = pointMap;
	
			this.update();
	
		}
	
		CameraHelper.prototype = Object.create( LineSegments.prototype );
		CameraHelper.prototype.constructor = CameraHelper;
	
		CameraHelper.prototype.update = function () {
	
			var geometry, pointMap;
	
			var vector = new Vector3();
			var camera = new Camera();
	
			function setPoint( point, x, y, z ) {
	
				vector.set( x, y, z ).unproject( camera );
	
				var points = pointMap[ point ];
	
				if ( points !== undefined ) {
	
					var position = geometry.getAttribute( 'position' );
	
					for ( var i = 0, l = points.length; i < l; i ++ ) {
	
						position.setXYZ( points[ i ], vector.x, vector.y, vector.z );
	
					}
	
				}
	
			}
	
			return function update() {
	
				geometry = this.geometry;
				pointMap = this.pointMap;
	
				var w = 1, h = 1;
	
				// we need just camera projection matrix
				// world matrix must be identity
	
				camera.projectionMatrix.copy( this.camera.projectionMatrix );
	
				// center / target
	
				setPoint( 'c', 0, 0, - 1 );
				setPoint( 't', 0, 0, 1 );
	
				// near
	
				setPoint( 'n1', - w, - h, - 1 );
				setPoint( 'n2', w, - h, - 1 );
				setPoint( 'n3', - w, h, - 1 );
				setPoint( 'n4', w, h, - 1 );
	
				// far
	
				setPoint( 'f1', - w, - h, 1 );
				setPoint( 'f2', w, - h, 1 );
				setPoint( 'f3', - w, h, 1 );
				setPoint( 'f4', w, h, 1 );
	
				// up
	
				setPoint( 'u1', w * 0.7, h * 1.1, - 1 );
				setPoint( 'u2', - w * 0.7, h * 1.1, - 1 );
				setPoint( 'u3', 0, h * 2, - 1 );
	
				// cross
	
				setPoint( 'cf1', - w, 0, 1 );
				setPoint( 'cf2', w, 0, 1 );
				setPoint( 'cf3', 0, - h, 1 );
				setPoint( 'cf4', 0, h, 1 );
	
				setPoint( 'cn1', - w, 0, - 1 );
				setPoint( 'cn2', w, 0, - 1 );
				setPoint( 'cn3', 0, - h, - 1 );
				setPoint( 'cn4', 0, h, - 1 );
	
				geometry.getAttribute( 'position' ).needsUpdate = true;
	
			};
	
		}();
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / http://github.com/Mugen87
		 */
	
		function BoxHelper( object, color ) {
	
			this.object = object;
	
			if ( color === undefined ) color = 0xffff00;
	
			var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
			var positions = new Float32Array( 8 * 3 );
	
			var geometry = new BufferGeometry();
			geometry.setIndex( new BufferAttribute( indices, 1 ) );
			geometry.addAttribute( 'position', new BufferAttribute( positions, 3 ) );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
	
			this.matrixAutoUpdate = false;
	
			this.update();
	
		}
	
		BoxHelper.prototype = Object.create( LineSegments.prototype );
		BoxHelper.prototype.constructor = BoxHelper;
	
		BoxHelper.prototype.update = ( function () {
	
			var box = new Box3();
	
			return function update( object ) {
	
				if ( object !== undefined ) {
	
					console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );
	
				}
	
				if ( this.object !== undefined ) {
	
					box.setFromObject( this.object );
	
				}
	
				if ( box.isEmpty() ) return;
	
				var min = box.min;
				var max = box.max;
	
				/*
				  5____4
				1/___0/|
				| 6__|_7
				2/___3/
	
				0: max.x, max.y, max.z
				1: min.x, max.y, max.z
				2: min.x, min.y, max.z
				3: max.x, min.y, max.z
				4: max.x, max.y, min.z
				5: min.x, max.y, min.z
				6: min.x, min.y, min.z
				7: max.x, min.y, min.z
				*/
	
				var position = this.geometry.attributes.position;
				var array = position.array;
	
				array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
				array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
				array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
				array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
				array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
				array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
				array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
				array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
	
				position.needsUpdate = true;
	
				this.geometry.computeBoundingSphere();
	
			};
	
		} )();
	
		BoxHelper.prototype.setFromObject = function ( object ) {
	
			this.object = object;
			this.update();
	
			return this;
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Box3Helper( box, hex ) {
	
			this.type = 'Box3Helper';
	
			this.box = box;
	
			var color = ( hex !== undefined ) ? hex : 0xffff00;
	
			var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
	
			var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];
	
			var geometry = new BufferGeometry();
	
			geometry.setIndex( new BufferAttribute( indices, 1 ) );
	
			geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
	
			this.geometry.computeBoundingSphere();
	
		}
	
		Box3Helper.prototype = Object.create( LineSegments.prototype );
		Box3Helper.prototype.constructor = Box3Helper;
	
		Box3Helper.prototype.updateMatrixWorld = function ( force ) {
	
			var box = this.box;
	
			if ( box.isEmpty() ) return;
	
			box.getCenter( this.position );
	
			box.getSize( this.scale );
	
			this.scale.multiplyScalar( 0.5 );
	
			Object3D.prototype.updateMatrixWorld.call( this, force );
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function PlaneHelper( plane, size, hex ) {
	
			this.type = 'PlaneHelper';
	
			this.plane = plane;
	
			this.size = ( size === undefined ) ? 1 : size;
	
			var color = ( hex !== undefined ) ? hex : 0xffff00;
	
			var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
			geometry.computeBoundingSphere();
	
			Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );
	
			//
	
			var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];
	
			var geometry2 = new BufferGeometry();
			geometry2.addAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
			geometry2.computeBoundingSphere();
	
			this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );
	
		}
	
		PlaneHelper.prototype = Object.create( Line.prototype );
		PlaneHelper.prototype.constructor = PlaneHelper;
	
		PlaneHelper.prototype.updateMatrixWorld = function ( force ) {
	
			var scale = - this.plane.constant;
	
			if ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter
	
			this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );
	
			this.lookAt( this.plane.normal );
	
			Object3D.prototype.updateMatrixWorld.call( this, force );
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author zz85 / http://github.com/zz85
		 * @author bhouston / http://clara.io
		 *
		 * Creates an arrow for visualizing directions
		 *
		 * Parameters:
		 *  dir - Vector3
		 *  origin - Vector3
		 *  length - Number
		 *  color - color in hex value
		 *  headLength - Number
		 *  headWidth - Number
		 */
	
		var lineGeometry;
		var coneGeometry;
	
		function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {
	
			// dir is assumed to be normalized
	
			Object3D.call( this );
	
			if ( color === undefined ) color = 0xffff00;
			if ( length === undefined ) length = 1;
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;
	
			if ( lineGeometry === undefined ) {
	
				lineGeometry = new BufferGeometry();
				lineGeometry.addAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
	
				coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
				coneGeometry.translate( 0, - 0.5, 0 );
	
			}
	
			this.position.copy( origin );
	
			this.line = new Line( lineGeometry, new LineBasicMaterial( { color: color } ) );
			this.line.matrixAutoUpdate = false;
			this.add( this.line );
	
			this.cone = new Mesh( coneGeometry, new MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );
	
			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );
	
		}
	
		ArrowHelper.prototype = Object.create( Object3D.prototype );
		ArrowHelper.prototype.constructor = ArrowHelper;
	
		ArrowHelper.prototype.setDirection = ( function () {
	
			var axis = new Vector3();
			var radians;
	
			return function setDirection( dir ) {
	
				// dir is assumed to be normalized
	
				if ( dir.y > 0.99999 ) {
	
					this.quaternion.set( 0, 0, 0, 1 );
	
				} else if ( dir.y < - 0.99999 ) {
	
					this.quaternion.set( 1, 0, 0, 0 );
	
				} else {
	
					axis.set( dir.z, 0, - dir.x ).normalize();
	
					radians = Math.acos( dir.y );
	
					this.quaternion.setFromAxisAngle( axis, radians );
	
				}
	
			};
	
		}() );
	
		ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
	
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;
	
			this.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );
			this.line.updateMatrix();
	
			this.cone.scale.set( headWidth, headLength, headWidth );
			this.cone.position.y = length;
			this.cone.updateMatrix();
	
		};
	
		ArrowHelper.prototype.setColor = function ( color ) {
	
			this.line.material.color.copy( color );
			this.cone.material.color.copy( color );
	
		};
	
		/**
		 * @author sroucheray / http://sroucheray.org/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AxesHelper( size ) {
	
			size = size || 1;
	
			var vertices = [
				0, 0, 0,	size, 0, 0,
				0, 0, 0,	0, size, 0,
				0, 0, 0,	0, 0, size
			];
	
			var colors = [
				1, 0, 0,	1, 0.6, 0,
				0, 1, 0,	0.6, 1, 0,
				0, 0, 1,	0, 0.6, 1
			];
	
			var geometry = new BufferGeometry();
			geometry.addAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.addAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: VertexColors } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		AxesHelper.prototype = Object.create( LineSegments.prototype );
		AxesHelper.prototype.constructor = AxesHelper;
	
		/**
		 * @author zz85 https://github.com/zz85
		 *
		 * Centripetal CatmullRom Curve - which is useful for avoiding
		 * cusps and self-intersections in non-uniform catmull rom curves.
		 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
		 *
		 * curve.type accepts centripetal(default), chordal and catmullrom
		 * curve.tension is used for catmullrom which defaults to 0.5
		 */
	
	
		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM
	
		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/
	
		function CubicPoly() {
	
			var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
	
			/*
			 * Compute coefficients for a cubic polynomial
			 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
			 * such that
			 *   p(0) = x0, p(1) = x1
			 *  and
			 *   p'(0) = t0, p'(1) = t1.
			 */
			function init( x0, x1, t0, t1 ) {
	
				c0 = x0;
				c1 = t0;
				c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
				c3 = 2 * x0 - 2 * x1 + t0 + t1;
	
			}
	
			return {
	
				initCatmullRom: function ( x0, x1, x2, x3, tension ) {
	
					init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
	
				},
	
				initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {
	
					// compute tangents when parameterized in [t1,t2]
					var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
					var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
	
					// rescale tangents for parametrization in [0,1]
					t1 *= dt1;
					t2 *= dt1;
	
					init( x1, x2, t1, t2 );
	
				},
	
				calc: function ( t ) {
	
					var t2 = t * t;
					var t3 = t2 * t;
					return c0 + c1 * t + c2 * t2 + c3 * t3;
	
				}
	
			};
	
		}
	
		//
	
		var tmp = new Vector3();
		var px = new CubicPoly();
		var py = new CubicPoly();
		var pz = new CubicPoly();
	
		function CatmullRomCurve3( points, closed, curveType, tension ) {
	
			Curve.call( this );
	
			this.type = 'CatmullRomCurve3';
	
			this.points = points || [];
			this.closed = closed || false;
			this.curveType = curveType || 'centripetal';
			this.tension = tension || 0.5;
	
		}
	
		CatmullRomCurve3.prototype = Object.create( Curve.prototype );
		CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
	
		CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
	
		CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			var points = this.points;
			var l = points.length;
	
			var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
			var intPoint = Math.floor( p );
			var weight = p - intPoint;
	
			if ( this.closed ) {
	
				intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;
	
			} else if ( weight === 0 && intPoint === l - 1 ) {
	
				intPoint = l - 2;
				weight = 1;
	
			}
	
			var p0, p1, p2, p3; // 4 points
	
			if ( this.closed || intPoint > 0 ) {
	
				p0 = points[ ( intPoint - 1 ) % l ];
	
			} else {
	
				// extrapolate first point
				tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
				p0 = tmp;
	
			}
	
			p1 = points[ intPoint % l ];
			p2 = points[ ( intPoint + 1 ) % l ];
	
			if ( this.closed || intPoint + 2 < l ) {
	
				p3 = points[ ( intPoint + 2 ) % l ];
	
			} else {
	
				// extrapolate last point
				tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
				p3 = tmp;
	
			}
	
			if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {
	
				// init Centripetal / Chordal Catmull-Rom
				var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
				var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
				var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
				var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
	
				// safety check for repeated points
				if ( dt1 < 1e-4 ) dt1 = 1.0;
				if ( dt0 < 1e-4 ) dt0 = dt1;
				if ( dt2 < 1e-4 ) dt2 = dt1;
	
				px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
				py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
				pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
	
			} else if ( this.curveType === 'catmullrom' ) {
	
				px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
				py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
				pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );
	
			}
	
			point.set(
				px.calc( weight ),
				py.calc( weight ),
				pz.calc( weight )
			);
	
			return point;
	
		};
	
		CatmullRomCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.points = [];
	
			for ( var i = 0, l = source.points.length; i < l; i ++ ) {
	
				var point = source.points[ i ];
	
				this.points.push( point.clone() );
	
			}
	
			this.closed = source.closed;
			this.curveType = source.curveType;
			this.tension = source.tension;
	
			return this;
	
		};
	
		function CubicBezierCurve3( v0, v1, v2, v3 ) {
	
			Curve.call( this );
	
			this.type = 'CubicBezierCurve3';
	
			this.v0 = v0 || new Vector3();
			this.v1 = v1 || new Vector3();
			this.v2 = v2 || new Vector3();
			this.v3 = v3 || new Vector3();
	
		}
	
		CubicBezierCurve3.prototype = Object.create( Curve.prototype );
		CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
	
		CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
	
		CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
	
			point.set(
				CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
				CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
				CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
			);
	
			return point;
	
		};
	
		CubicBezierCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
			this.v3.copy( source.v3 );
	
			return this;
	
		};
	
		function QuadraticBezierCurve3( v0, v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'QuadraticBezierCurve3';
	
			this.v0 = v0 || new Vector3();
			this.v1 = v1 || new Vector3();
			this.v2 = v2 || new Vector3();
	
		}
	
		QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
		QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
	
		QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
	
		QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2;
	
			point.set(
				QuadraticBezier( t, v0.x, v1.x, v2.x ),
				QuadraticBezier( t, v0.y, v1.y, v2.y ),
				QuadraticBezier( t, v0.z, v1.z, v2.z )
			);
	
			return point;
	
		};
	
		QuadraticBezierCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		function LineCurve3( v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'LineCurve3';
	
			this.v1 = v1 || new Vector3();
			this.v2 = v2 || new Vector3();
	
		}
	
		LineCurve3.prototype = Object.create( Curve.prototype );
		LineCurve3.prototype.constructor = LineCurve3;
	
		LineCurve3.prototype.isLineCurve3 = true;
	
		LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			if ( t === 1 ) {
	
				point.copy( this.v2 );
	
			} else {
	
				point.copy( this.v2 ).sub( this.v1 );
				point.multiplyScalar( t ).add( this.v1 );
	
			}
	
			return point;
	
		};
	
		// Line curve is linear, so we can overwrite default getPointAt
	
		LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {
	
			return this.getPoint( u, optionalTarget );
	
		};
	
		LineCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
			EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
			this.type = 'ArcCurve';
	
		}
	
		ArcCurve.prototype = Object.create( EllipseCurve.prototype );
		ArcCurve.prototype.constructor = ArcCurve;
	
		ArcCurve.prototype.isArcCurve = true;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		var SceneUtils = {
	
			createMultiMaterialObject: function ( geometry, materials ) {
	
				var group = new Group();
	
				for ( var i = 0, l = materials.length; i < l; i ++ ) {
	
					group.add( new Mesh( geometry, materials[ i ] ) );
	
				}
	
				return group;
	
			},
	
			detach: function ( child, parent, scene ) {
	
				child.applyMatrix( parent.matrixWorld );
				parent.remove( child );
				scene.add( child );
	
			},
	
			attach: function ( child, scene, parent ) {
	
				child.applyMatrix( new Matrix4().getInverse( parent.matrixWorld ) );
	
				scene.remove( child );
				parent.add( child );
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Face4( a, b, c, d, normal, color, materialIndex ) {
	
			console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
			return new Face3( a, b, c, normal, color, materialIndex );
	
		}
	
		var LineStrip = 0;
	
		var LinePieces = 1;
	
		function MeshFaceMaterial( materials ) {
	
			console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
			return materials;
	
		}
	
		function MultiMaterial( materials ) {
	
			if ( materials === undefined ) materials = [];
	
			console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
			materials.isMultiMaterial = true;
			materials.materials = materials;
			materials.clone = function () {
	
				return materials.slice();
	
			};
			return materials;
	
		}
	
		function PointCloud( geometry, material ) {
	
			console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
			return new Points( geometry, material );
	
		}
	
		function Particle( material ) {
	
			console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
			return new Sprite( material );
	
		}
	
		function ParticleSystem( geometry, material ) {
	
			console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
			return new Points( geometry, material );
	
		}
	
		function PointCloudMaterial( parameters ) {
	
			console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
	
		}
	
		function ParticleBasicMaterial( parameters ) {
	
			console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
	
		}
	
		function ParticleSystemMaterial( parameters ) {
	
			console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
	
		}
	
		function Vertex( x, y, z ) {
	
			console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
			return new Vector3( x, y, z );
	
		}
	
		//
	
		function DynamicBufferAttribute( array, itemSize ) {
	
			console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
			return new BufferAttribute( array, itemSize ).setDynamic( true );
	
		}
	
		function Int8Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
			return new Int8BufferAttribute( array, itemSize );
	
		}
	
		function Uint8Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
			return new Uint8BufferAttribute( array, itemSize );
	
		}
	
		function Uint8ClampedAttribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
			return new Uint8ClampedBufferAttribute( array, itemSize );
	
		}
	
		function Int16Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
			return new Int16BufferAttribute( array, itemSize );
	
		}
	
		function Uint16Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
			return new Uint16BufferAttribute( array, itemSize );
	
		}
	
		function Int32Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
			return new Int32BufferAttribute( array, itemSize );
	
		}
	
		function Uint32Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
			return new Uint32BufferAttribute( array, itemSize );
	
		}
	
		function Float32Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
			return new Float32BufferAttribute( array, itemSize );
	
		}
	
		function Float64Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
			return new Float64BufferAttribute( array, itemSize );
	
		}
	
		//
	
		Curve.create = function ( construct, getPoint ) {
	
			console.log( 'THREE.Curve.create() has been deprecated' );
	
			construct.prototype = Object.create( Curve.prototype );
			construct.prototype.constructor = construct;
			construct.prototype.getPoint = getPoint;
	
			return construct;
	
		};
	
		//
	
		Object.assign( CurvePath.prototype, {
	
			createPointsGeometry: function ( divisions ) {
	
				console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
	
				// generate geometry from path points (for Line or Points objects)
	
				var pts = this.getPoints( divisions );
				return this.createGeometry( pts );
	
			},
	
			createSpacedPointsGeometry: function ( divisions ) {
	
				console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
	
				// generate geometry from equidistant sampling along the path
	
				var pts = this.getSpacedPoints( divisions );
				return this.createGeometry( pts );
	
			},
	
			createGeometry: function ( points ) {
	
				console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
	
				var geometry = new Geometry();
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					var point = points[ i ];
					geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
	
				}
	
				return geometry;
	
			}
	
		} );
	
		//
	
		Object.assign( Path.prototype, {
	
			fromPoints: function ( points ) {
	
				console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
				this.setFromPoints( points );
	
			}
	
		} );
	
		//
	
		function ClosedSplineCurve3( points ) {
	
			console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
	
			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
			this.closed = true;
	
		}
	
		ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
	
		//
	
		function SplineCurve3( points ) {
	
			console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
	
			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
	
		}
	
		SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
	
		//
	
		function Spline( points ) {
	
			console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );
	
			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
	
		}
	
		Spline.prototype = Object.create( CatmullRomCurve3.prototype );
	
		Object.assign( Spline.prototype, {
	
			initFromArray: function ( /* a */ ) {
	
				console.error( 'THREE.Spline: .initFromArray() has been removed.' );
	
			},
			getControlPointsArray: function ( /* optionalTarget */ ) {
	
				console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );
	
			},
			reparametrizeByArcLength: function ( /* samplingCoef */ ) {
	
				console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );
	
			}
	
		} );
	
		//
	
		function AxisHelper( size ) {
	
			console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
			return new AxesHelper( size );
	
		}
	
		function BoundingBoxHelper( object, color ) {
	
			console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
			return new BoxHelper( object, color );
	
		}
	
		function EdgesHelper( object, hex ) {
	
			console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
			return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	
		}
	
		GridHelper.prototype.setColors = function () {
	
			console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );
	
		};
	
		SkeletonHelper.prototype.update = function () {
	
			console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );
	
		};
	
		function WireframeHelper( object, hex ) {
	
			console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
			return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	
		}
	
		//
	
		function XHRLoader( manager ) {
	
			console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
			return new FileLoader( manager );
	
		}
	
		function BinaryTextureLoader( manager ) {
	
			console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
			return new DataTextureLoader( manager );
	
		}
	
		//
	
		Object.assign( Box2.prototype, {
	
			center: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );
	
			},
			empty: function () {
	
				console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
	
			},
			isIntersectionBox: function ( box ) {
	
				console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
	
			},
			size: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );
	
			}
		} );
	
		Object.assign( Box3.prototype, {
	
			center: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );
	
			},
			empty: function () {
	
				console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
	
			},
			isIntersectionBox: function ( box ) {
	
				console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
	
			},
			isIntersectionSphere: function ( sphere ) {
	
				console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
	
			},
			size: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );
	
			}
		} );
	
		Line3.prototype.center = function ( optionalTarget ) {
	
			console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
	
		};
	
		Object.assign( _Math, {
	
			random16: function () {
	
				console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
				return Math.random();
	
			},
	
			nearestPowerOfTwo: function ( value ) {
	
				console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
				return _Math.floorPowerOfTwo( value );
	
			},
	
			nextPowerOfTwo: function ( value ) {
	
				console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
				return _Math.ceilPowerOfTwo( value );
	
			}
	
		} );
	
		Object.assign( Matrix3.prototype, {
	
			flattenToArrayOffset: function ( array, offset ) {
	
				console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
				return this.toArray( array, offset );
	
			},
			multiplyVector3: function ( vector ) {
	
				console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
				return vector.applyMatrix3( this );
	
			},
			multiplyVector3Array: function ( /* a */ ) {
	
				console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );
	
			},
			applyToBuffer: function ( buffer /*, offset, length */ ) {
	
				console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
				return this.applyToBufferAttribute( buffer );
	
			},
			applyToVector3Array: function ( /* array, offset, length */ ) {
	
				console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );
	
			}
	
		} );
	
		Object.assign( Matrix4.prototype, {
	
			extractPosition: function ( m ) {
	
				console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
				return this.copyPosition( m );
	
			},
			flattenToArrayOffset: function ( array, offset ) {
	
				console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
				return this.toArray( array, offset );
	
			},
			getPosition: function () {
	
				var v1;
	
				return function getPosition() {
	
					if ( v1 === undefined ) v1 = new Vector3();
					console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
					return v1.setFromMatrixColumn( this, 3 );
	
				};
	
			}(),
			setRotationFromQuaternion: function ( q ) {
	
				console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
				return this.makeRotationFromQuaternion( q );
	
			},
			multiplyToArray: function () {
	
				console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );
	
			},
			multiplyVector3: function ( vector ) {
	
				console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
	
			},
			multiplyVector4: function ( vector ) {
	
				console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
	
			},
			multiplyVector3Array: function ( /* a */ ) {
	
				console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );
	
			},
			rotateAxis: function ( v ) {
	
				console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
				v.transformDirection( this );
	
			},
			crossVector: function ( vector ) {
	
				console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
	
			},
			translate: function () {
	
				console.error( 'THREE.Matrix4: .translate() has been removed.' );
	
			},
			rotateX: function () {
	
				console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
	
			},
			rotateY: function () {
	
				console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
	
			},
			rotateZ: function () {
	
				console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
	
			},
			rotateByAxis: function () {
	
				console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
	
			},
			applyToBuffer: function ( buffer /*, offset, length */ ) {
	
				console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
				return this.applyToBufferAttribute( buffer );
	
			},
			applyToVector3Array: function ( /* array, offset, length */ ) {
	
				console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );
	
			},
			makeFrustum: function ( left, right, bottom, top, near, far ) {
	
				console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
				return this.makePerspective( left, right, top, bottom, near, far );
	
			}
	
		} );
	
		Plane.prototype.isIntersectionLine = function ( line ) {
	
			console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
			return this.intersectsLine( line );
	
		};
	
		Quaternion.prototype.multiplyVector3 = function ( vector ) {
	
			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );
	
		};
	
		Object.assign( Ray.prototype, {
	
			isIntersectionBox: function ( box ) {
	
				console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
	
			},
			isIntersectionPlane: function ( plane ) {
	
				console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
				return this.intersectsPlane( plane );
	
			},
			isIntersectionSphere: function ( sphere ) {
	
				console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
	
			}
	
		} );
	
		Object.assign( Shape.prototype, {
	
			extractAllPoints: function ( divisions ) {
	
				console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
				return this.extractPoints( divisions );
	
			},
			extrude: function ( options ) {
	
				console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
				return new ExtrudeGeometry( this, options );
	
			},
			makeGeometry: function ( options ) {
	
				console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
				return new ShapeGeometry( this, options );
	
			}
	
		} );
	
		Object.assign( Vector2.prototype, {
	
			fromAttribute: function ( attribute, index, offset ) {
	
				console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );
	
			},
			distanceToManhattan: function ( v ) {
	
				console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
				return this.manhattanDistanceTo( v );
	
			},
			lengthManhattan: function () {
	
				console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
				return this.manhattanLength();
	
			}
	
		} );
	
		Object.assign( Vector3.prototype, {
	
			setEulerFromRotationMatrix: function () {
	
				console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
	
			},
			setEulerFromQuaternion: function () {
	
				console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
	
			},
			getPositionFromMatrix: function ( m ) {
	
				console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
				return this.setFromMatrixPosition( m );
	
			},
			getScaleFromMatrix: function ( m ) {
	
				console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
				return this.setFromMatrixScale( m );
	
			},
			getColumnFromMatrix: function ( index, matrix ) {
	
				console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
				return this.setFromMatrixColumn( matrix, index );
	
			},
			applyProjection: function ( m ) {
	
				console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
				return this.applyMatrix4( m );
	
			},
			fromAttribute: function ( attribute, index, offset ) {
	
				console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );
	
			},
			distanceToManhattan: function ( v ) {
	
				console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
				return this.manhattanDistanceTo( v );
	
			},
			lengthManhattan: function () {
	
				console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
				return this.manhattanLength();
	
			}
	
		} );
	
		Object.assign( Vector4.prototype, {
	
			fromAttribute: function ( attribute, index, offset ) {
	
				console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );
	
			},
			lengthManhattan: function () {
	
				console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
				return this.manhattanLength();
	
			}
	
		} );
	
		//
	
		Geometry.prototype.computeTangents = function () {
	
			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );
	
		};
	
		Object.assign( Object3D.prototype, {
	
			getChildByName: function ( name ) {
	
				console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
				return this.getObjectByName( name );
	
			},
			renderDepth: function () {
	
				console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
	
			},
			translate: function ( distance, axis ) {
	
				console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
				return this.translateOnAxis( axis, distance );
	
			}
	
		} );
	
		Object.defineProperties( Object3D.prototype, {
	
			eulerOrder: {
				get: function () {
	
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					return this.rotation.order;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					this.rotation.order = value;
	
				}
			},
			useQuaternion: {
				get: function () {
	
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	
				},
				set: function () {
	
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	
				}
			}
	
		} );
	
		Object.defineProperties( LOD.prototype, {
	
			objects: {
				get: function () {
	
					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;
	
				}
			}
	
		} );
	
		Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {
	
			get: function () {
	
				console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
	
			},
			set: function () {
	
				console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
	
			}
	
		} );
	
		Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {
	
			get: function () {
	
				console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
				return this.arcLengthDivisions;
	
			},
			set: function ( value ) {
	
				console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
				this.arcLengthDivisions = value;
	
			}
	
		} );
	
		//
	
		PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {
	
			console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
					"Use .setFocalLength and .filmGauge for a photographic setup." );
	
			if ( filmGauge !== undefined ) this.filmGauge = filmGauge;
			this.setFocalLength( focalLength );
	
		};
	
		//
	
		Object.defineProperties( Light.prototype, {
			onlyShadow: {
				set: function () {
	
					console.warn( 'THREE.Light: .onlyShadow has been removed.' );
	
				}
			},
			shadowCameraFov: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
					this.shadow.camera.fov = value;
	
				}
			},
			shadowCameraLeft: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
					this.shadow.camera.left = value;
	
				}
			},
			shadowCameraRight: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
					this.shadow.camera.right = value;
	
				}
			},
			shadowCameraTop: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
					this.shadow.camera.top = value;
	
				}
			},
			shadowCameraBottom: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
					this.shadow.camera.bottom = value;
	
				}
			},
			shadowCameraNear: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
					this.shadow.camera.near = value;
	
				}
			},
			shadowCameraFar: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
					this.shadow.camera.far = value;
	
				}
			},
			shadowCameraVisible: {
				set: function () {
	
					console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
	
				}
			},
			shadowBias: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
					this.shadow.bias = value;
	
				}
			},
			shadowDarkness: {
				set: function () {
	
					console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
	
				}
			},
			shadowMapWidth: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
					this.shadow.mapSize.width = value;
	
				}
			},
			shadowMapHeight: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
					this.shadow.mapSize.height = value;
	
				}
			}
		} );
	
		//
	
		Object.defineProperties( BufferAttribute.prototype, {
	
			length: {
				get: function () {
	
					console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
					return this.array.length;
	
				}
			}
	
		} );
	
		Object.assign( BufferGeometry.prototype, {
	
			addIndex: function ( index ) {
	
				console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
				this.setIndex( index );
	
			},
			addDrawCall: function ( start, count, indexOffset ) {
	
				if ( indexOffset !== undefined ) {
	
					console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
	
				}
				console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
				this.addGroup( start, count );
	
			},
			clearDrawCalls: function () {
	
				console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
				this.clearGroups();
	
			},
			computeTangents: function () {
	
				console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
	
			},
			computeOffsets: function () {
	
				console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
	
			}
	
		} );
	
		Object.defineProperties( BufferGeometry.prototype, {
	
			drawcalls: {
				get: function () {
	
					console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
					return this.groups;
	
				}
			},
			offsets: {
				get: function () {
	
					console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
					return this.groups;
	
				}
			}
	
		} );
	
		//
	
		Object.defineProperties( Uniform.prototype, {
	
			dynamic: {
				set: function () {
	
					console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
	
				}
			},
			onUpdate: {
				value: function () {
	
					console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
					return this;
	
				}
			}
	
		} );
	
		//
	
		Object.defineProperties( Material.prototype, {
	
			wrapAround: {
				get: function () {
	
					console.warn( 'THREE.Material: .wrapAround has been removed.' );
	
				},
				set: function () {
	
					console.warn( 'THREE.Material: .wrapAround has been removed.' );
	
				}
			},
			wrapRGB: {
				get: function () {
	
					console.warn( 'THREE.Material: .wrapRGB has been removed.' );
					return new Color();
	
				}
			},
	
			shading: {
				get: function () {
	
					console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
					this.flatShading = ( value === FlatShading );
	
				}
			}
	
		} );
	
		Object.defineProperties( MeshPhongMaterial.prototype, {
	
			metal: {
				get: function () {
	
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
					return false;
	
				},
				set: function () {
	
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
	
				}
			}
	
		} );
	
		Object.defineProperties( ShaderMaterial.prototype, {
	
			derivatives: {
				get: function () {
	
					console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					return this.extensions.derivatives;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					this.extensions.derivatives = value;
	
				}
			}
	
		} );
	
		//
	
		Object.assign( WebGLRenderer.prototype, {
	
			getCurrentRenderTarget: function () {
	
				console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
				return this.getRenderTarget();
	
			},
	
			getMaxAnisotropy: function () {
	
				console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
				return this.capabilities.getMaxAnisotropy();
	
			},
	
			getPrecision: function () {
	
				console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
				return this.capabilities.precision;
	
			},
	
			resetGLState: function () {
	
				console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
				return this.state.reset();
	
			},
	
			supportsFloatTextures: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
				return this.extensions.get( 'OES_texture_float' );
	
			},
			supportsHalfFloatTextures: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
				return this.extensions.get( 'OES_texture_half_float' );
	
			},
			supportsStandardDerivatives: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
				return this.extensions.get( 'OES_standard_derivatives' );
	
			},
			supportsCompressedTextureS3TC: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
	
			},
			supportsCompressedTexturePVRTC: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	
			},
			supportsBlendMinMax: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
				return this.extensions.get( 'EXT_blend_minmax' );
	
			},
			supportsVertexTextures: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
				return this.capabilities.vertexTextures;
	
			},
			supportsInstancedArrays: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
				return this.extensions.get( 'ANGLE_instanced_arrays' );
	
			},
			enableScissorTest: function ( boolean ) {
	
				console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
				this.setScissorTest( boolean );
	
			},
			initMaterial: function () {
	
				console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
	
			},
			addPrePlugin: function () {
	
				console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
	
			},
			addPostPlugin: function () {
	
				console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
	
			},
			updateShadowMap: function () {
	
				console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
	
			}
	
		} );
	
		Object.defineProperties( WebGLRenderer.prototype, {
	
			shadowMapEnabled: {
				get: function () {
	
					return this.shadowMap.enabled;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
					this.shadowMap.enabled = value;
	
				}
			},
			shadowMapType: {
				get: function () {
	
					return this.shadowMap.type;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
					this.shadowMap.type = value;
	
				}
			},
			shadowMapCullFace: {
				get: function () {
	
					return this.shadowMap.cullFace;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
					this.shadowMap.cullFace = value;
	
				}
			}
		} );
	
		Object.defineProperties( WebGLShadowMap.prototype, {
	
			cullFace: {
				get: function () {
	
					return this.renderReverseSided ? CullFaceFront : CullFaceBack;
	
				},
				set: function ( cullFace ) {
	
					var value = ( cullFace !== CullFaceBack );
					console.warn( "WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to " + value + "." );
					this.renderReverseSided = value;
	
				}
			}
	
		} );
	
		//
	
		Object.defineProperties( WebGLRenderTarget.prototype, {
	
			wrapS: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					return this.texture.wrapS;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					this.texture.wrapS = value;
	
				}
			},
			wrapT: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					return this.texture.wrapT;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					this.texture.wrapT = value;
	
				}
			},
			magFilter: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					return this.texture.magFilter;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					this.texture.magFilter = value;
	
				}
			},
			minFilter: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					return this.texture.minFilter;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					this.texture.minFilter = value;
	
				}
			},
			anisotropy: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					return this.texture.anisotropy;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					this.texture.anisotropy = value;
	
				}
			},
			offset: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					return this.texture.offset;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					this.texture.offset = value;
	
				}
			},
			repeat: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					return this.texture.repeat;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					this.texture.repeat = value;
	
				}
			},
			format: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					return this.texture.format;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					this.texture.format = value;
	
				}
			},
			type: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					return this.texture.type;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					this.texture.type = value;
	
				}
			},
			generateMipmaps: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					return this.texture.generateMipmaps;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					this.texture.generateMipmaps = value;
	
				}
			}
	
		} );
	
		//
	
		Audio.prototype.load = function ( file ) {
	
			console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
			var scope = this;
			var audioLoader = new AudioLoader();
			audioLoader.load( file, function ( buffer ) {
	
				scope.setBuffer( buffer );
	
			} );
			return this;
	
		};
	
		AudioAnalyser.prototype.getData = function () {
	
			console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
			return this.getFrequencyData();
	
		};
	
		//
	
		CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {
	
			console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
			return this.update( renderer, scene );
	
		};
	
		//
	
		var GeometryUtils = {
	
			merge: function ( geometry1, geometry2, materialIndexOffset ) {
	
				console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
				var matrix;
	
				if ( geometry2.isMesh ) {
	
					geometry2.matrixAutoUpdate && geometry2.updateMatrix();
	
					matrix = geometry2.matrix;
					geometry2 = geometry2.geometry;
	
				}
	
				geometry1.merge( geometry2, matrix, materialIndexOffset );
	
			},
	
			center: function ( geometry ) {
	
				console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
				return geometry.center();
	
			}
	
		};
	
		var ImageUtils = {
	
			crossOrigin: undefined,
	
			loadTexture: function ( url, mapping, onLoad, onError ) {
	
				console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );
	
				var loader = new TextureLoader();
				loader.setCrossOrigin( this.crossOrigin );
	
				var texture = loader.load( url, onLoad, undefined, onError );
	
				if ( mapping ) texture.mapping = mapping;
	
				return texture;
	
			},
	
			loadTextureCube: function ( urls, mapping, onLoad, onError ) {
	
				console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );
	
				var loader = new CubeTextureLoader();
				loader.setCrossOrigin( this.crossOrigin );
	
				var texture = loader.load( urls, onLoad, undefined, onError );
	
				if ( mapping ) texture.mapping = mapping;
	
				return texture;
	
			},
	
			loadCompressedTexture: function () {
	
				console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );
	
			},
	
			loadCompressedTextureCube: function () {
	
				console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );
	
			}
	
		};
	
		//
	
		function Projector() {
	
			console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );
	
			this.projectVector = function ( vector, camera ) {
	
				console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
				vector.project( camera );
	
			};
	
			this.unprojectVector = function ( vector, camera ) {
	
				console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
				vector.unproject( camera );
	
			};
	
			this.pickingRay = function () {
	
				console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );
	
			};
	
		}
	
		//
	
		function CanvasRenderer() {
	
			console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );
	
			this.domElement = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
			this.clear = function () {};
			this.render = function () {};
			this.setClearColor = function () {};
			this.setSize = function () {};
	
		}
	
		exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
		exports.WebGLRenderTarget = WebGLRenderTarget;
		exports.WebGLRenderer = WebGLRenderer;
		exports.ShaderLib = ShaderLib;
		exports.UniformsLib = UniformsLib;
		exports.UniformsUtils = UniformsUtils;
		exports.ShaderChunk = ShaderChunk;
		exports.FogExp2 = FogExp2;
		exports.Fog = Fog;
		exports.Scene = Scene;
		exports.LensFlare = LensFlare;
		exports.Sprite = Sprite;
		exports.LOD = LOD;
		exports.SkinnedMesh = SkinnedMesh;
		exports.Skeleton = Skeleton;
		exports.Bone = Bone;
		exports.Mesh = Mesh;
		exports.LineSegments = LineSegments;
		exports.LineLoop = LineLoop;
		exports.Line = Line;
		exports.Points = Points;
		exports.Group = Group;
		exports.VideoTexture = VideoTexture;
		exports.DataTexture = DataTexture;
		exports.CompressedTexture = CompressedTexture;
		exports.CubeTexture = CubeTexture;
		exports.CanvasTexture = CanvasTexture;
		exports.DepthTexture = DepthTexture;
		exports.Texture = Texture;
		exports.CompressedTextureLoader = CompressedTextureLoader;
		exports.DataTextureLoader = DataTextureLoader;
		exports.CubeTextureLoader = CubeTextureLoader;
		exports.TextureLoader = TextureLoader;
		exports.ObjectLoader = ObjectLoader;
		exports.MaterialLoader = MaterialLoader;
		exports.BufferGeometryLoader = BufferGeometryLoader;
		exports.DefaultLoadingManager = DefaultLoadingManager;
		exports.LoadingManager = LoadingManager;
		exports.JSONLoader = JSONLoader;
		exports.ImageLoader = ImageLoader;
		exports.FontLoader = FontLoader;
		exports.FileLoader = FileLoader;
		exports.Loader = Loader;
		exports.Cache = Cache;
		exports.AudioLoader = AudioLoader;
		exports.SpotLightShadow = SpotLightShadow;
		exports.SpotLight = SpotLight;
		exports.PointLight = PointLight;
		exports.RectAreaLight = RectAreaLight;
		exports.HemisphereLight = HemisphereLight;
		exports.DirectionalLightShadow = DirectionalLightShadow;
		exports.DirectionalLight = DirectionalLight;
		exports.AmbientLight = AmbientLight;
		exports.LightShadow = LightShadow;
		exports.Light = Light;
		exports.StereoCamera = StereoCamera;
		exports.PerspectiveCamera = PerspectiveCamera;
		exports.OrthographicCamera = OrthographicCamera;
		exports.CubeCamera = CubeCamera;
		exports.ArrayCamera = ArrayCamera;
		exports.Camera = Camera;
		exports.AudioListener = AudioListener;
		exports.PositionalAudio = PositionalAudio;
		exports.AudioContext = AudioContext;
		exports.AudioAnalyser = AudioAnalyser;
		exports.Audio = Audio;
		exports.VectorKeyframeTrack = VectorKeyframeTrack;
		exports.StringKeyframeTrack = StringKeyframeTrack;
		exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
		exports.NumberKeyframeTrack = NumberKeyframeTrack;
		exports.ColorKeyframeTrack = ColorKeyframeTrack;
		exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
		exports.PropertyMixer = PropertyMixer;
		exports.PropertyBinding = PropertyBinding;
		exports.KeyframeTrack = KeyframeTrack;
		exports.AnimationUtils = AnimationUtils;
		exports.AnimationObjectGroup = AnimationObjectGroup;
		exports.AnimationMixer = AnimationMixer;
		exports.AnimationClip = AnimationClip;
		exports.Uniform = Uniform;
		exports.InstancedBufferGeometry = InstancedBufferGeometry;
		exports.BufferGeometry = BufferGeometry;
		exports.Geometry = Geometry;
		exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
		exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
		exports.InterleavedBuffer = InterleavedBuffer;
		exports.InstancedBufferAttribute = InstancedBufferAttribute;
		exports.Face3 = Face3;
		exports.Object3D = Object3D;
		exports.Raycaster = Raycaster;
		exports.Layers = Layers;
		exports.EventDispatcher = EventDispatcher;
		exports.Clock = Clock;
		exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
		exports.LinearInterpolant = LinearInterpolant;
		exports.DiscreteInterpolant = DiscreteInterpolant;
		exports.CubicInterpolant = CubicInterpolant;
		exports.Interpolant = Interpolant;
		exports.Triangle = Triangle;
		exports.Math = _Math;
		exports.Spherical = Spherical;
		exports.Cylindrical = Cylindrical;
		exports.Plane = Plane;
		exports.Frustum = Frustum;
		exports.Sphere = Sphere;
		exports.Ray = Ray;
		exports.Matrix4 = Matrix4;
		exports.Matrix3 = Matrix3;
		exports.Box3 = Box3;
		exports.Box2 = Box2;
		exports.Line3 = Line3;
		exports.Euler = Euler;
		exports.Vector4 = Vector4;
		exports.Vector3 = Vector3;
		exports.Vector2 = Vector2;
		exports.Quaternion = Quaternion;
		exports.Color = Color;
		exports.ImmediateRenderObject = ImmediateRenderObject;
		exports.VertexNormalsHelper = VertexNormalsHelper;
		exports.SpotLightHelper = SpotLightHelper;
		exports.SkeletonHelper = SkeletonHelper;
		exports.PointLightHelper = PointLightHelper;
		exports.RectAreaLightHelper = RectAreaLightHelper;
		exports.HemisphereLightHelper = HemisphereLightHelper;
		exports.GridHelper = GridHelper;
		exports.PolarGridHelper = PolarGridHelper;
		exports.FaceNormalsHelper = FaceNormalsHelper;
		exports.DirectionalLightHelper = DirectionalLightHelper;
		exports.CameraHelper = CameraHelper;
		exports.BoxHelper = BoxHelper;
		exports.Box3Helper = Box3Helper;
		exports.PlaneHelper = PlaneHelper;
		exports.ArrowHelper = ArrowHelper;
		exports.AxesHelper = AxesHelper;
		exports.CatmullRomCurve3 = CatmullRomCurve3;
		exports.CubicBezierCurve3 = CubicBezierCurve3;
		exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
		exports.LineCurve3 = LineCurve3;
		exports.ArcCurve = ArcCurve;
		exports.EllipseCurve = EllipseCurve;
		exports.SplineCurve = SplineCurve;
		exports.CubicBezierCurve = CubicBezierCurve;
		exports.QuadraticBezierCurve = QuadraticBezierCurve;
		exports.LineCurve = LineCurve;
		exports.Shape = Shape;
		exports.Path = Path;
		exports.ShapePath = ShapePath;
		exports.Font = Font;
		exports.CurvePath = CurvePath;
		exports.Curve = Curve;
		exports.ShapeUtils = ShapeUtils;
		exports.SceneUtils = SceneUtils;
		exports.WebGLUtils = WebGLUtils;
		exports.WireframeGeometry = WireframeGeometry;
		exports.ParametricGeometry = ParametricGeometry;
		exports.ParametricBufferGeometry = ParametricBufferGeometry;
		exports.TetrahedronGeometry = TetrahedronGeometry;
		exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
		exports.OctahedronGeometry = OctahedronGeometry;
		exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
		exports.IcosahedronGeometry = IcosahedronGeometry;
		exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
		exports.DodecahedronGeometry = DodecahedronGeometry;
		exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
		exports.PolyhedronGeometry = PolyhedronGeometry;
		exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
		exports.TubeGeometry = TubeGeometry;
		exports.TubeBufferGeometry = TubeBufferGeometry;
		exports.TorusKnotGeometry = TorusKnotGeometry;
		exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
		exports.TorusGeometry = TorusGeometry;
		exports.TorusBufferGeometry = TorusBufferGeometry;
		exports.TextGeometry = TextGeometry;
		exports.TextBufferGeometry = TextBufferGeometry;
		exports.SphereGeometry = SphereGeometry;
		exports.SphereBufferGeometry = SphereBufferGeometry;
		exports.RingGeometry = RingGeometry;
		exports.RingBufferGeometry = RingBufferGeometry;
		exports.PlaneGeometry = PlaneGeometry;
		exports.PlaneBufferGeometry = PlaneBufferGeometry;
		exports.LatheGeometry = LatheGeometry;
		exports.LatheBufferGeometry = LatheBufferGeometry;
		exports.ShapeGeometry = ShapeGeometry;
		exports.ShapeBufferGeometry = ShapeBufferGeometry;
		exports.ExtrudeGeometry = ExtrudeGeometry;
		exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
		exports.EdgesGeometry = EdgesGeometry;
		exports.ConeGeometry = ConeGeometry;
		exports.ConeBufferGeometry = ConeBufferGeometry;
		exports.CylinderGeometry = CylinderGeometry;
		exports.CylinderBufferGeometry = CylinderBufferGeometry;
		exports.CircleGeometry = CircleGeometry;
		exports.CircleBufferGeometry = CircleBufferGeometry;
		exports.BoxGeometry = BoxGeometry;
		exports.BoxBufferGeometry = BoxBufferGeometry;
		exports.ShadowMaterial = ShadowMaterial;
		exports.SpriteMaterial = SpriteMaterial;
		exports.RawShaderMaterial = RawShaderMaterial;
		exports.ShaderMaterial = ShaderMaterial;
		exports.PointsMaterial = PointsMaterial;
		exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
		exports.MeshStandardMaterial = MeshStandardMaterial;
		exports.MeshPhongMaterial = MeshPhongMaterial;
		exports.MeshToonMaterial = MeshToonMaterial;
		exports.MeshNormalMaterial = MeshNormalMaterial;
		exports.MeshLambertMaterial = MeshLambertMaterial;
		exports.MeshDepthMaterial = MeshDepthMaterial;
		exports.MeshDistanceMaterial = MeshDistanceMaterial;
		exports.MeshBasicMaterial = MeshBasicMaterial;
		exports.LineDashedMaterial = LineDashedMaterial;
		exports.LineBasicMaterial = LineBasicMaterial;
		exports.Material = Material;
		exports.Float64BufferAttribute = Float64BufferAttribute;
		exports.Float32BufferAttribute = Float32BufferAttribute;
		exports.Uint32BufferAttribute = Uint32BufferAttribute;
		exports.Int32BufferAttribute = Int32BufferAttribute;
		exports.Uint16BufferAttribute = Uint16BufferAttribute;
		exports.Int16BufferAttribute = Int16BufferAttribute;
		exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
		exports.Uint8BufferAttribute = Uint8BufferAttribute;
		exports.Int8BufferAttribute = Int8BufferAttribute;
		exports.BufferAttribute = BufferAttribute;
		exports.REVISION = REVISION;
		exports.MOUSE = MOUSE;
		exports.CullFaceNone = CullFaceNone;
		exports.CullFaceBack = CullFaceBack;
		exports.CullFaceFront = CullFaceFront;
		exports.CullFaceFrontBack = CullFaceFrontBack;
		exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
		exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
		exports.BasicShadowMap = BasicShadowMap;
		exports.PCFShadowMap = PCFShadowMap;
		exports.PCFSoftShadowMap = PCFSoftShadowMap;
		exports.FrontSide = FrontSide;
		exports.BackSide = BackSide;
		exports.DoubleSide = DoubleSide;
		exports.FlatShading = FlatShading;
		exports.SmoothShading = SmoothShading;
		exports.NoColors = NoColors;
		exports.FaceColors = FaceColors;
		exports.VertexColors = VertexColors;
		exports.NoBlending = NoBlending;
		exports.NormalBlending = NormalBlending;
		exports.AdditiveBlending = AdditiveBlending;
		exports.SubtractiveBlending = SubtractiveBlending;
		exports.MultiplyBlending = MultiplyBlending;
		exports.CustomBlending = CustomBlending;
		exports.AddEquation = AddEquation;
		exports.SubtractEquation = SubtractEquation;
		exports.ReverseSubtractEquation = ReverseSubtractEquation;
		exports.MinEquation = MinEquation;
		exports.MaxEquation = MaxEquation;
		exports.ZeroFactor = ZeroFactor;
		exports.OneFactor = OneFactor;
		exports.SrcColorFactor = SrcColorFactor;
		exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
		exports.SrcAlphaFactor = SrcAlphaFactor;
		exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
		exports.DstAlphaFactor = DstAlphaFactor;
		exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
		exports.DstColorFactor = DstColorFactor;
		exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
		exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
		exports.NeverDepth = NeverDepth;
		exports.AlwaysDepth = AlwaysDepth;
		exports.LessDepth = LessDepth;
		exports.LessEqualDepth = LessEqualDepth;
		exports.EqualDepth = EqualDepth;
		exports.GreaterEqualDepth = GreaterEqualDepth;
		exports.GreaterDepth = GreaterDepth;
		exports.NotEqualDepth = NotEqualDepth;
		exports.MultiplyOperation = MultiplyOperation;
		exports.MixOperation = MixOperation;
		exports.AddOperation = AddOperation;
		exports.NoToneMapping = NoToneMapping;
		exports.LinearToneMapping = LinearToneMapping;
		exports.ReinhardToneMapping = ReinhardToneMapping;
		exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
		exports.CineonToneMapping = CineonToneMapping;
		exports.UVMapping = UVMapping;
		exports.CubeReflectionMapping = CubeReflectionMapping;
		exports.CubeRefractionMapping = CubeRefractionMapping;
		exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
		exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
		exports.SphericalReflectionMapping = SphericalReflectionMapping;
		exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
		exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
		exports.RepeatWrapping = RepeatWrapping;
		exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
		exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
		exports.NearestFilter = NearestFilter;
		exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
		exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
		exports.LinearFilter = LinearFilter;
		exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
		exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
		exports.UnsignedByteType = UnsignedByteType;
		exports.ByteType = ByteType;
		exports.ShortType = ShortType;
		exports.UnsignedShortType = UnsignedShortType;
		exports.IntType = IntType;
		exports.UnsignedIntType = UnsignedIntType;
		exports.FloatType = FloatType;
		exports.HalfFloatType = HalfFloatType;
		exports.UnsignedShort4444Type = UnsignedShort4444Type;
		exports.UnsignedShort5551Type = UnsignedShort5551Type;
		exports.UnsignedShort565Type = UnsignedShort565Type;
		exports.UnsignedInt248Type = UnsignedInt248Type;
		exports.AlphaFormat = AlphaFormat;
		exports.RGBFormat = RGBFormat;
		exports.RGBAFormat = RGBAFormat;
		exports.LuminanceFormat = LuminanceFormat;
		exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
		exports.RGBEFormat = RGBEFormat;
		exports.DepthFormat = DepthFormat;
		exports.DepthStencilFormat = DepthStencilFormat;
		exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
		exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
		exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
		exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
		exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
		exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
		exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
		exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
		exports.RGB_ETC1_Format = RGB_ETC1_Format;
		exports.LoopOnce = LoopOnce;
		exports.LoopRepeat = LoopRepeat;
		exports.LoopPingPong = LoopPingPong;
		exports.InterpolateDiscrete = InterpolateDiscrete;
		exports.InterpolateLinear = InterpolateLinear;
		exports.InterpolateSmooth = InterpolateSmooth;
		exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
		exports.ZeroSlopeEnding = ZeroSlopeEnding;
		exports.WrapAroundEnding = WrapAroundEnding;
		exports.TrianglesDrawMode = TrianglesDrawMode;
		exports.TriangleStripDrawMode = TriangleStripDrawMode;
		exports.TriangleFanDrawMode = TriangleFanDrawMode;
		exports.LinearEncoding = LinearEncoding;
		exports.sRGBEncoding = sRGBEncoding;
		exports.GammaEncoding = GammaEncoding;
		exports.RGBEEncoding = RGBEEncoding;
		exports.LogLuvEncoding = LogLuvEncoding;
		exports.RGBM7Encoding = RGBM7Encoding;
		exports.RGBM16Encoding = RGBM16Encoding;
		exports.RGBDEncoding = RGBDEncoding;
		exports.BasicDepthPacking = BasicDepthPacking;
		exports.RGBADepthPacking = RGBADepthPacking;
		exports.CubeGeometry = BoxGeometry;
		exports.Face4 = Face4;
		exports.LineStrip = LineStrip;
		exports.LinePieces = LinePieces;
		exports.MeshFaceMaterial = MeshFaceMaterial;
		exports.MultiMaterial = MultiMaterial;
		exports.PointCloud = PointCloud;
		exports.Particle = Particle;
		exports.ParticleSystem = ParticleSystem;
		exports.PointCloudMaterial = PointCloudMaterial;
		exports.ParticleBasicMaterial = ParticleBasicMaterial;
		exports.ParticleSystemMaterial = ParticleSystemMaterial;
		exports.Vertex = Vertex;
		exports.DynamicBufferAttribute = DynamicBufferAttribute;
		exports.Int8Attribute = Int8Attribute;
		exports.Uint8Attribute = Uint8Attribute;
		exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
		exports.Int16Attribute = Int16Attribute;
		exports.Uint16Attribute = Uint16Attribute;
		exports.Int32Attribute = Int32Attribute;
		exports.Uint32Attribute = Uint32Attribute;
		exports.Float32Attribute = Float32Attribute;
		exports.Float64Attribute = Float64Attribute;
		exports.ClosedSplineCurve3 = ClosedSplineCurve3;
		exports.SplineCurve3 = SplineCurve3;
		exports.Spline = Spline;
		exports.AxisHelper = AxisHelper;
		exports.BoundingBoxHelper = BoundingBoxHelper;
		exports.EdgesHelper = EdgesHelper;
		exports.WireframeHelper = WireframeHelper;
		exports.XHRLoader = XHRLoader;
		exports.BinaryTextureLoader = BinaryTextureLoader;
		exports.GeometryUtils = GeometryUtils;
		exports.ImageUtils = ImageUtils;
		exports.Projector = Projector;
		exports.CanvasRenderer = CanvasRenderer;
	
		Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.textEntryDialog = exports.getCurrentDateStr = exports.randomId = exports.inArray = exports.stickJqueryDivInTopLeft = exports.stickJqueryDivInCenter = exports.toggleButton = exports.linkButton = exports.getDomPosition = exports.getWindowUrl = exports.extendArray = exports.exists = undefined;
	
	var _jquery = __webpack_require__(3);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 *
	 * Utility functions mainly to do with HTML elements
	 * that can be deferred to functions
	 *
	 */
	
	function exists(x) {
	  return !_lodash2.default.isUndefined(x) && x !== null;
	}
	
	function extendArray(array, extension) {
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;
	
	  try {
	    for (var _iterator = extension[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var elem = _step.value;
	
	      array.push(elem);
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	}
	
	function getWindowUrl() {
	  return "" + window.location;
	}
	
	function getDomPosition(dom) {
	  var currDom = dom;
	  var currLeft = 0;
	  var currTop = 0;
	  if (currDom.offsetParent) {
	    currLeft = currDom.offsetLeft;
	    currTop = currDom.offsetTop;
	    while (currDom = currDom.offsetParent) {
	      currLeft += currDom.offsetLeft;
	      currTop += currDom.offsetTop;
	    }
	  }
	  currDom = dom;
	  do {
	    currLeft -= currDom.scrollLeft || 0;
	    currTop -= currDom.scrollTop || 0;
	  } while (currDom = currDom.parentNode);
	  return [currLeft, currTop];
	}
	
	function linkButton(idTag, text, classTag, callback) {
	  var item = (0, _jquery2.default)('<a>').attr('id', idTag).attr('href', '').html(text);
	
	  if (classTag) {
	    item.addClass(classTag);
	  }
	
	  if (callback) {
	    item.on(' click touch ', function (e) {
	      e.preventDefault();
	      callback();
	    });
	  }
	
	  return item;
	}
	
	function toggleButton(idTag, text, classTag, getToggleFn, setToggleFn, onColor) {
	
	  var item = (0, _jquery2.default)('<a>').attr('id', idTag).attr('href', '').html(text);
	
	  function color() {
	    if (getToggleFn()) {
	      if (onColor) {
	        item.css('background-color', onColor);
	      } else {
	        item.addClass('jolecule-button-toggle-on');
	      }
	    } else {
	      if (onColor) {
	        item.css('background-color', '');
	      } else {
	        item.removeClass('jolecule-button-toggle-on');
	      }
	    }
	  }
	
	  if (classTag) {
	    item.addClass(classTag);
	  }
	
	  item.click(function (e) {
	    e.preventDefault();
	    setToggleFn(!getToggleFn());
	    color();
	    return false;
	  });
	
	  item.redraw = color;
	
	  color();
	
	  return item;
	}
	
	function stickJqueryDivInTopLeft(parent, target, xOffset, yOffset) {
	  target.css({
	    'position': 'absolute',
	    'z-index': '9000'
	  });
	  var top = parent.position().top;
	  var left = parent.position().left;
	  parent.append(target);
	  target.css({
	    'top': top + yOffset,
	    'left': left + xOffset
	  });
	}
	
	function stickJqueryDivInCenter(parent, target, xOffset, yOffset) {
	  target.css({
	    'position': 'absolute',
	    'z-index': '9000'
	  });
	  var top = parent.position().top;
	  var left = parent.position().left;
	  var widthParent = parent.outerWidth();
	  var heightParent = parent.outerHeight();
	  parent.prepend(target);
	  var widthTarget = target.outerWidth();
	  var heightTarget = target.outerHeight();
	  target.css({
	    'top': top + heightParent / 2 - heightTarget / 2 - yOffset,
	    'left': left + widthParent / 2 - widthTarget / 2 - xOffset
	  });
	}
	
	function inArray(v, aList) {
	  return aList.indexOf(v) >= 0;
	}
	
	function randomString(n_char) {
	  var chars = "0123456789abcdefghiklmnopqrstuvwxyz";
	  var s = '';
	  for (var i = 0; i < n_char; i++) {
	    var j = Math.floor(Math.random() * chars.length);
	    s += chars.substring(j, j + 1);
	  }
	  return s;
	}
	
	function randomId() {
	  return 'view:' + randomString(6);
	}
	
	function getCurrentDateStr() {
	  var now = new Date();
	  var month = now.getMonth() + 1;
	  var day = now.getDate();
	  var year = now.getFullYear();
	  return day + "/" + month + "/" + year;
	}
	
	function textEntryDialog(parentDiv, label, callback) {
	  if (!label) {
	    label = '';
	  }
	
	  window.keyboard_lock = true;
	
	  function cleanup() {
	    dialog.remove();
	    window.keyboard_lock = false;
	  }
	
	  function accept() {
	    callback(textarea.val());
	    cleanup();
	    window.keyboard_lock = false;
	  }
	
	  function discard() {
	    cleanup();
	    window.keyboard_lock = false;
	  }
	
	  var save_button = linkButton('okay', 'okay', 'jolecule-small-button', accept);
	
	  var discard_button = linkButton('discard', 'discard', 'jolecule-small-button', discard);
	
	  var textarea = (0, _jquery2.default)('<textarea>').css('width', '100%').addClass('jolecule-view-text').keydown(function (e) {
	    if (e.keyCode === 27) {
	      discard();
	      return true;
	    }
	  });
	
	  var editbox = (0, _jquery2.default)('<div>').css('width', '100%').append(label).append(textarea).append(save_button).append(' ').append(discard_button);
	
	  var dialog = (0, _jquery2.default)('<div>').addClass('jolecule-dialog').css('display', 'block').css('z-index', '2000').css('width', Math.min(400, parentDiv.width() - 100)).append(editbox);
	
	  stickJqueryDivInCenter(parentDiv, dialog, 0, 70);
	
	  setTimeout(function () {
	    editbox.find('textarea').focus();
	  }, 100);
	}
	
	exports.exists = exists;
	exports.extendArray = extendArray;
	exports.getWindowUrl = getWindowUrl;
	exports.getDomPosition = getDomPosition;
	exports.linkButton = linkButton;
	exports.toggleButton = toggleButton;
	exports.stickJqueryDivInCenter = stickJqueryDivInCenter;
	exports.stickJqueryDivInTopLeft = stickJqueryDivInTopLeft;
	exports.inArray = inArray;
	exports.randomId = randomId;
	exports.getCurrentDateStr = getCurrentDateStr;
	exports.textEntryDialog = textEntryDialog;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.applyColorToVector3array = exports.applyRotationOfMatrix4toVector3array = exports.applyMatrix4toVector3array = exports.CopyBufferGeometry = exports.getCylinderMatrix = exports.getSphereMatrix = exports.mergeUnitGeom = exports.Trace = exports.clearObject3D = exports.setGeometryVerticesColor = exports.fraction = exports.getFractionRotation = exports.getUnitVectorRotation = exports.RibbonGeometry = exports.RaisedShapeGeometry = exports.setVisible = exports.UnitCylinderGeometry = exports.BlockArrowGeometry = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	ustom geometry and mesh generators based on the
	js library.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
	n particular, there is a Ribbon class which is an
	extrusion where the normal and tangents are specified.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
	
	
	var _three = __webpack_require__(8);
	
	var THREE = _interopRequireWildcard(_three);
	
	var _v = __webpack_require__(7);
	
	var _v2 = _interopRequireDefault(_v);
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function CatmullRom(t, p0, p1, p2, p3) {
	
	  var v0 = (p2 - p0) * 0.5;
	  var v1 = (p3 - p1) * 0.5;
	  var t2 = t * t;
	  var t3 = t * t2;
	  return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;
	}
	
	/**
	 * Interpolation function for a Catmul-Rom spline
	 * in 3D space, where the 4 guide-points are given
	 * and an interpolation parameter is given.
	 *
	 * @param {Number} t - interpolation from [0, 1]
	 * @param {THREE.Vector3} p1
	 * @param {THREE.Vector3} p2
	 * @param {THREE.Vector3} p3
	 * @param {THREE.Vector3} p4
	 * @returns {THREE.Vector3} the interpolated point
	 */
	function catmulRomSpline(t, p1, p2, p3, p4) {
	  return _v2.default.create(CatmullRom(t, p1.x, p2.x, p3.x, p4.x), CatmullRom(t, p1.y, p2.y, p3.y, p4.y), CatmullRom(t, p1.z, p2.z, p3.z, p4.z));
	}
	
	/**
	 * Create a path for extrusion where the direction of the
	 * normal and binormal is defined, as well as the tangent.
	 *
	 * In particular, the path provides a slice() function
	 * that produces a sub-portion of the path.
	 */
	
	var PathAndFrenetFrames = function () {
	  function PathAndFrenetFrames() {
	    _classCallCheck(this, PathAndFrenetFrames);
	
	    this.points = [];
	    this.normals = [];
	    this.tangents = [];
	    this.binormals = [];
	  }
	
	  _createClass(PathAndFrenetFrames, [{
	    key: 'slice',
	    value: function slice(i, j) {
	      var subPath = new PathAndFrenetFrames();
	      subPath.points = this.points.slice(i, j);
	      subPath.normals = this.normals.slice(i, j);
	      subPath.tangents = this.tangents.slice(i, j);
	      subPath.binormals = this.binormals.slice(i, j);
	      return subPath;
	    }
	  }]);
	
	  return PathAndFrenetFrames;
	}();
	
	/**
	 * Extrusion along a path that aligns a 2D shape as cross-section, with
	 * orientation along the normal for the cross-section.
	 *
	 * Accepts a cross-section shape, which is a collection of 2D points around
	 * the origin, and a path, which contains points, normals and binormals
	 * and builds a oriented extrusion out of it.
	 *
	 * If round is set, then the vertex normals are set to orient along the
	 * normal/binormal axis from the origin, otherwise, face normals are defined
	 * perpedicular to the face.
	 *
	 * For a segment between two path points and a repetition of the cross-section,
	 * two triangles are defined.
	 */
	
	
	var RibbonGeometry = function (_THREE$Geometry) {
	  _inherits(RibbonGeometry, _THREE$Geometry);
	
	  /**
	   * @param {THREE.Shape} shape - collection of 2D points for cross section
	   * @param {PathAndFrenetFrames} path - collection of points, normals, and binormals
	   * @param {boolean} round - normals are draw from centre, otherwise perp to edge
	   * @param {boolean} front - draw front cross-section
	   * @param {boolean} back - draw back cross-section
	   */
	  function RibbonGeometry(shape, path, round, front, back) {
	    _classCallCheck(this, RibbonGeometry);
	
	    var _this = _possibleConstructorReturn(this, (RibbonGeometry.__proto__ || Object.getPrototypeOf(RibbonGeometry)).call(this));
	
	    _this.type = 'RibbonGeometry';
	
	    _this.parameters = {
	      shape: shape,
	      path: path,
	      round: round
	    };
	
	    if (path.points.length < 2) {
	      return _possibleConstructorReturn(_this);
	    }
	
	    var shapePoints = shape.extractPoints(4).shape;
	    var nVertex = shapePoints.length;
	
	    if (_lodash2.default.isUndefined(round)) {
	      round = false;
	    }
	
	    var shapeEdgeNormals = [];
	
	    if (!round) {
	
	      for (var j = 0; j < nVertex; j += 1) {
	        var i = j - 1;
	        if (i === -1) {
	          i = nVertex - 1;
	        }
	        var v0 = shapePoints[i];
	        var v1 = shapePoints[j];
	        var x = -(v1.y - v0.y);
	        var y = v1.x - v0.x;
	        shapeEdgeNormals.push(new THREE.Vector2(x, y));
	      }
	    }
	
	    for (var iPoint = 0; iPoint < path.points.length; iPoint += 1) {
	
	      var point = path.points[iPoint];
	      var normal = path.normals[iPoint];
	      var binormal = path.binormals[iPoint];
	
	      for (var iShapePoint = 0; iShapePoint < nVertex; iShapePoint += 1) {
	
	        var shapePoint = shapePoints[iShapePoint];
	
	        var _x = normal.clone().multiplyScalar(shapePoint.x);
	        var _y = binormal.clone().multiplyScalar(shapePoint.y);
	
	        var vertex = point.clone().add(_x).add(_y);
	
	        _this.vertices.push(vertex);
	      }
	
	      var topOffset = _this.vertices.length - 2 * nVertex;
	      if (topOffset < 0) {
	        continue;
	      }
	
	      if (round) {
	        // Smoothed normals to give a rounded look
	        for (var _j = 0; _j < nVertex; _j += 1) {
	          var _i = void 0;
	          if (_j === 0) {
	            _i = nVertex - 1;
	          } else {
	            _i = _j - 1;
	          }
	          var k = topOffset + _i;
	          var l = topOffset + _j;
	
	          var _x2 = void 0,
	              _y2 = void 0;
	
	          _x2 = path.normals[iPoint - 1].clone().multiplyScalar(shapePoints[_j].x);
	          _y2 = path.binormals[iPoint - 1].clone().multiplyScalar(shapePoints[_j].y);
	          var normal01 = _x2.add(_y2);
	
	          _x2 = path.normals[iPoint].clone().multiplyScalar(shapePoints[_j].x);
	          _y2 = path.binormals[iPoint].clone().multiplyScalar(shapePoints[_j].y);
	          var normal11 = _x2.add(_y2);
	
	          _x2 = path.normals[iPoint - 1].clone().multiplyScalar(shapePoints[_i].x);
	          _y2 = path.binormals[iPoint - 1].clone().multiplyScalar(shapePoints[_i].y);
	          var normal00 = _x2.add(_y2);
	
	          _x2 = path.normals[iPoint].clone().multiplyScalar(shapePoints[_i].x);
	          _y2 = path.binormals[iPoint].clone().multiplyScalar(shapePoints[_i].y);
	          var normal10 = _x2.add(_y2);
	
	          var face = new THREE.Face3(k, k + nVertex, l + nVertex);
	          face.vertexNormals = [normal00, normal10, normal11];
	          _this.faces.push(face);
	
	          face = new THREE.Face3(k, l + nVertex, l);
	          face.vertexNormals = [normal00, normal11, normal01];
	          _this.faces.push(face);
	        }
	      } else {
	        // Continuous normals but keep faces distinct
	        // along ribbon
	        for (var _j2 = 0; _j2 < nVertex; _j2 += 1) {
	          var _i2 = void 0;
	          if (_j2 === 0) {
	            _i2 = nVertex - 1;
	          } else {
	            _i2 = _j2 - 1;
	          }
	          var _k = topOffset + _i2;
	          var _l = topOffset + _j2;
	
	          var _x3 = void 0,
	              _y3 = void 0;
	
	          _x3 = path.normals[iPoint - 1].clone().multiplyScalar(shapeEdgeNormals[_j2].x);
	          _y3 = path.binormals[iPoint - 1].clone().multiplyScalar(shapeEdgeNormals[_j2].y);
	          var normal0 = _x3.add(_y3);
	
	          _x3 = path.normals[iPoint].clone().multiplyScalar(shapeEdgeNormals[_j2].x);
	          _y3 = path.binormals[iPoint].clone().multiplyScalar(shapeEdgeNormals[_j2].y);
	          var normal1 = _x3.add(_y3);
	
	          var _face = new THREE.Face3(_k, _k + nVertex, _l + nVertex);
	          _face.vertexNormals = [normal0, normal1, normal1];
	          _this.faces.push(_face);
	
	          _face = new THREE.Face3(_k, _l + nVertex, _l);
	          _face.vertexNormals = [normal0, normal1, normal0];
	          _this.faces.push(_face);
	        }
	      }
	    }
	
	    if (front) {
	      // Draw front face
	      var _normal = threePointNormal([_this.vertices[0], _this.vertices[1], _this.vertices[2]]);
	      for (var _i3 = 0; _i3 < nVertex - 2; _i3 += 1) {
	        var _face2 = new THREE.Face3(_i3, _i3 + 1, nVertex - 1);
	        _face2.normal.copy(_normal);
	        _this.faces.push(_face2);
	      }
	    }
	
	    if (back) {
	      // draw back face
	      var offset = _this.vertices.length - 1 - nVertex;
	
	      var _normal2 = threePointNormal([_this.vertices[offset], _this.vertices[offset + nVertex - 1], _this.vertices[offset + 1]]);
	
	      for (var _i4 = 0; _i4 < nVertex - 2; _i4 += 1) {
	        var _face3 = new THREE.Face3(offset + _i4, offset + nVertex - 1, offset + _i4 + 1);
	        _face3.normal.copy(_normal2);
	        _this.faces.push(_face3);
	      }
	    }
	    return _this;
	  }
	
	  return RibbonGeometry;
	}(THREE.Geometry);
	
	/**
	 * Creates a new path out of a slice of the oldPath, with
	 * n number of segments between two points, using a Catmul-Rom
	 * spline based on the two points, and the two surrounding
	 * points. At the ends, the external points are projected
	 * from the end using the tangent at the ends.
	 *
	 * @param {PathAndFrenetFrames} oldPath
	 * @param {Number} n
	 * @param {Number} iOldPoint
	 * @param {Number} jOldPoint
	 * @returns {PathAndFrenetFrames}
	 */
	
	
	function expandPath(oldPath, n, iOldPoint, jOldPoint) {
	
	  var newPath = new PathAndFrenetFrames();
	
	  newPath.points.push(oldPath.points[iOldPoint]);
	
	  for (var i = iOldPoint; i < jOldPoint - 1; i += 1) {
	
	    var j_start = 1;
	    var j_end = n + 1;
	
	    for (var j = j_start; j < j_end; j += 1) {
	
	      var t = j / n;
	
	      var prevOldPoint = void 0,
	          nextOldPoint = void 0;
	
	      if (i > 0) {
	        prevOldPoint = oldPath.points[i - 1];
	      } else {
	        prevOldPoint = oldPath.points[i].clone().sub(oldPath.tangents[i]);
	      }
	
	      if (i < oldPath.points.length - 2) {
	        nextOldPoint = oldPath.points[i + 2];
	      } else {
	        nextOldPoint = oldPath.points[i + 1].clone().add(oldPath.tangents[i]);
	      }
	
	      newPath.points.push(catmulRomSpline(t, prevOldPoint, oldPath.points[i], oldPath.points[i + 1], nextOldPoint));
	    }
	  }
	
	  newPath.normals.push(oldPath.normals[iOldPoint]);
	  for (var _i5 = iOldPoint; _i5 < jOldPoint - 1; _i5 += 1) {
	
	    for (var _j3 = 1; _j3 < n + 1; _j3 += 1) {
	
	      var _t = _j3 / n;
	
	      var prevOldNormal = void 0,
	          nextOldNormal = void 0;
	
	      if (_i5 > 0) {
	        prevOldNormal = oldPath.normals[_i5 - 1];
	      } else {
	        prevOldNormal = oldPath.normals[_i5];
	      }
	
	      if (_i5 < oldPath.normals.length - 2) {
	        nextOldNormal = oldPath.normals[_i5 + 2];
	      } else {
	        nextOldNormal = oldPath.normals[_i5 + 1];
	      }
	
	      newPath.normals.push(catmulRomSpline(_t, prevOldNormal, oldPath.normals[_i5], oldPath.normals[_i5 + 1], nextOldNormal).normalize());
	    }
	  }
	
	  for (var _i6 = 0; _i6 < newPath.points.length; _i6 += 1) {
	    if (_i6 === 0) {
	      newPath.tangents.push(oldPath.tangents[0]);
	    } else if (_i6 === newPath.points.length - 1) {
	      newPath.tangents.push(oldPath.tangents[jOldPoint - 1]);
	    } else {
	      newPath.tangents.push(newPath.points[_i6 + 1].clone().sub(newPath.points[_i6 - 1]).normalize());
	    }
	  }
	
	  for (var _i7 = 0; _i7 < newPath.points.length; _i7 += 1) {
	    newPath.binormals.push(_v2.default.create().crossVectors(newPath.tangents[_i7], newPath.normals[_i7]));
	  }
	
	  return newPath;
	}
	
	/**
	 * Trace is an object designed to be built up progressively
	 * by adding to this.indices, this.points and this.normals.
	 *
	 * Once built, it can be expanded into a more detailed
	 * trace, which is used to generate geometric pieces of
	 * an extrusion where the normals and tangents are
	 * controlled.
	 */
	
	var Trace = function (_PathAndFrenetFrames) {
	  _inherits(Trace, _PathAndFrenetFrames);
	
	  function Trace() {
	    _classCallCheck(this, Trace);
	
	    var _this2 = _possibleConstructorReturn(this, (Trace.__proto__ || Object.getPrototypeOf(Trace)).call(this));
	
	    _this2.indices = [];
	    _this2.detail = 2;
	    return _this2;
	  }
	
	  _createClass(Trace, [{
	    key: 'getReference',
	    value: function getReference(i) {
	      var iRef = this.indices[i];
	      return this.referenceObjects[iRef];
	    }
	
	    /**
	     * Calculates tangents as an average on neighbouring points
	     * so that we get a smooth path.
	     */
	
	  }, {
	    key: 'calcTangents',
	    value: function calcTangents() {
	      var iStart = 0;
	      var iEnd = this.points.length;
	      var iLast = iEnd - 1;
	      if (iEnd - iStart > 2) {
	
	        // project out first tangent from main chain
	        this.tangents[iStart] = this.points[iStart + 1].clone().sub(this.points[iStart]).normalize();
	
	        // calculate tangents as averages of neighbouring residues
	        for (var i = iStart + 1; i < iLast; i += 1) {
	          this.tangents[i] = this.points[i + 1].clone().sub(this.points[i - 1]).normalize();
	        }
	
	        // project out last tangent from main chain
	        this.tangents[iLast] = this.points[iLast].clone().sub(this.points[iLast - 1]).normalize();
	      } else {
	
	        // for short 2 point traces
	        var tangent = this.points[iLast].clone().sub(this.points[iStart]).normalize();
	
	        this.tangents[iStart] = tangent;
	        this.tangents[iLast] = tangent;
	      }
	    }
	
	    /**
	     * If normal[i] is not null,
	     * it will use the normal, otherwise it will generate own
	     * normal from the path curvature
	     */
	
	  }, {
	    key: 'calcNormals',
	    value: function calcNormals() {
	      var iStart = 0;
	      var iEnd = this.points.length;
	      var iLast = iEnd - 1;
	      if (iEnd - iStart > 2) {
	
	        for (var i = iStart + 1; i < iLast; i += 1) {
	          if (this.normals[i] !== null) {
	            // normal already provided, normalize properly against tangent
	            this.normals[i] = perpVector(this.tangents[i], this.normals[i]);
	            this.normals[i].normalize();
	          } else {
	            // generate a normal from curvature
	            var diff = this.points[i].clone().sub(this.points[i - 1]);
	            this.normals[i] = _v2.default.create().crossVectors(diff, this.tangents[i]).normalize();
	
	            // smooth out auto-generated normal if flipped 180deg from prev
	            var prevNormal = this.normals[i - 1];
	            if (prevNormal !== null) {
	              if (this.normals[i].dot(prevNormal) < 0) {
	                this.normals[i].negate();
	              }
	            }
	          }
	        }
	
	        this.normals[iStart] = this.normals[iStart + 1];
	        this.normals[iLast] = this.normals[iLast - 1];
	      } else {
	
	        for (var _i8 = iStart; _i8 <= iLast; _i8 += 1) {
	          if (this.normals[_i8] !== null) {
	            this.normals[_i8] = perpVector(this.tangents[_i8], this.normals[_i8]);
	            this.normals[_i8].normalize();
	          } else {
	            var randomDir = this.points[_i8];
	            this.normals[_i8] = _v2.default.create().crossVectors(randomDir, this.tangents[_i8]).normalize();
	          }
	        }
	      }
	    }
	  }, {
	    key: 'calcBinormals',
	    value: function calcBinormals() {
	      var iStart = 0;
	      var iEnd = this.points.length;
	      for (var i = iStart; i < iEnd; i += 1) {
	        this.binormals[i] = _v2.default.create().crossVectors(this.tangents[i], this.normals[i]);
	      }
	    }
	  }, {
	    key: 'expand',
	    value: function expand() {
	      this.detailedPath = expandPath(this, 2 * this.detail, 0, this.points.length);
	    }
	
	    /**
	     * A path is generated with 2*detail. If a
	     * residue is not at the end of a piece,
	     * will be extended to detail beyond that is
	     * half-way between the residue and the neighboring
	     * residue in a different piece.
	     */
	
	  }, {
	    key: 'getSegmentGeometry',
	    value: function getSegmentGeometry(iRes, face, isRound, isFront, isBack, color) {
	      var path = this.detailedPath;
	
	      // works out start on expanded path, including overhang
	      var iPathStart = iRes * 2 * this.detail - this.detail;
	      if (iPathStart < 0) {
	        iPathStart = 0;
	      }
	
	      // works out end of expanded path, including overhang
	      var iPathEnd = (iRes + 1) * 2 * this.detail - this.detail + 1;
	      if (iPathEnd >= path.points.length) {
	        iPathEnd = path.points.length - 1;
	      }
	
	      var segmentPath = path.slice(iPathStart, iPathEnd);
	
	      var geom = new RibbonGeometry(face, segmentPath, isRound, isFront, isBack);
	
	      setGeometryVerticesColor(geom, color);
	
	      return geom;
	    }
	  }]);
	
	  return Trace;
	}(PathAndFrenetFrames);
	
	/**
	 * Creates a unit-based block arrow pointing in the -Z direction.
	 * It can be reorientated using a lookAt() call
	 */
	
	
	var BlockArrowGeometry = function (_THREE$ExtrudeGeometr) {
	  _inherits(BlockArrowGeometry, _THREE$ExtrudeGeometr);
	
	  function BlockArrowGeometry() {
	    _classCallCheck(this, BlockArrowGeometry);
	
	    var shape = new THREE.Shape([new THREE.Vector2(-0.4, -0.5), new THREE.Vector2(0.0, +0.5), new THREE.Vector2(+0.4, -0.5)]);
	
	    var path = new THREE.CatmullRomCurve3([_v2.default.create(0, -0.3, 0), _v2.default.create(0, 0.3, 0)]);
	
	    var _this3 = _possibleConstructorReturn(this, (BlockArrowGeometry.__proto__ || Object.getPrototypeOf(BlockArrowGeometry)).call(this, shape, {
	      steps: 2,
	      bevelEnabled: false,
	      extrudePath: path
	    }));
	
	    _this3.type = 'BlockArrowGeometry';
	
	    _this3.applyMatrix(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(0, Math.PI / 2, 0)));
	    return _this3;
	  }
	
	  return BlockArrowGeometry;
	}(THREE.ExtrudeGeometry);
	
	/**
	 * Creates a cylinder that is orientated along
	 * the z-direction. Use lookAt to reorientate
	 */
	
	
	var UnitCylinderGeometry = function (_THREE$CylinderGeomet) {
	  _inherits(UnitCylinderGeometry, _THREE$CylinderGeomet);
	
	  function UnitCylinderGeometry() {
	    _classCallCheck(this, UnitCylinderGeometry);
	
	    var _this4 = _possibleConstructorReturn(this, (UnitCylinderGeometry.__proto__ || Object.getPrototypeOf(UnitCylinderGeometry)).call(this, 1, 1, 1, 4, 1, false));
	
	    _this4.type = 'UnitCylinderGeometry';
	
	    _this4.applyMatrix(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(Math.PI / 2, Math.PI, 0)));
	    return _this4;
	  }
	
	  return UnitCylinderGeometry;
	}(THREE.CylinderGeometry);
	
	/**
	 * Takes a bunch of points and treats it as defining
	 * a polygon, and raises it to a certain thickness.
	 */
	
	
	var RaisedShapeGeometry = function (_THREE$Geometry2) {
	  _inherits(RaisedShapeGeometry, _THREE$Geometry2);
	
	  function RaisedShapeGeometry(vertices, thickness) {
	    _classCallCheck(this, RaisedShapeGeometry);
	
	    var _this5 = _possibleConstructorReturn(this, (RaisedShapeGeometry.__proto__ || Object.getPrototypeOf(RaisedShapeGeometry)).call(this));
	
	    _this5.type = 'RaisedShapeGeometry';
	
	    _this5.parameters = {
	      vertices: vertices,
	      thickness: thickness
	    };
	
	    var normal = threePointNormal(vertices.slice(0, 3));
	
	    var displacement = normal.clone().multiplyScalar(thickness / 2);
	
	    var nVertex = vertices.length;
	    var iLast = nVertex - 1;
	    var offset = nVertex;
	
	    for (var i = 0; i < vertices.length; i += 1) {
	      _this5.vertices.push(vertices[i].clone().add(displacement));
	    }
	    for (var _i9 = 0; _i9 < vertices.length; _i9 += 1) {
	      _this5.vertices.push(vertices[_i9].clone().sub(displacement));
	    }
	
	    for (var _i10 = 0; _i10 < nVertex - 2; _i10 += 1) {
	      var face = new THREE.Face3(_i10, _i10 + 1, iLast);
	      _this5.faces.push(face);
	    }
	
	    for (var _i11 = 0; _i11 < nVertex - 2; _i11 += 1) {
	      var _face4 = new THREE.Face3(offset + _i11, offset + iLast, offset + _i11 + 1);
	      _this5.faces.push(_face4);
	    }
	
	    for (var _i12 = 0; _i12 < nVertex; _i12 += 1) {
	      var j = void 0;
	      if (_i12 === nVertex - 1) {
	        j = 0;
	      } else {
	        j = _i12 + 1;
	      }
	
	      _this5.faces.push(new THREE.Face3(_i12, _i12 + offset, j + offset));
	      _this5.faces.push(new THREE.Face3(_i12, j + offset, j));
	    }
	
	    _this5.computeFaceNormals();
	
	    return _this5;
	  }
	
	  return RaisedShapeGeometry;
	}(THREE.Geometry);
	
	/**
	 * Convenience function to set the visibility of a THREE
	 * Object3D collection of meshes and other objects
	 *
	 * @param {THREE.Object3D} obj
	 * @param {boolean} visibility
	 */
	
	
	function setVisible(obj, visibility) {
	
	  if (_lodash2.default.isUndefined(obj)) {
	    return;
	  }
	  obj.traverse(function (c) {
	    c.visible = visibility;
	  });
	}
	
	/**
	 * A generic cleaner for a THREE.Object3D collection,
	 * where a custom 'dontDelete' field is used to
	 * avoid deletion, and all other children are
	 * disposed of correctly to reclaim memory
	 *
	 * @param {THREE.Object3D} obj
	 */
	function clearObject3D(obj) {
	  var iLast = obj.children.length - 1;
	  for (var i = iLast; i >= 0; i -= 1) {
	    var child = obj.children[i];
	    if (!_lodash2.default.isUndefined(child.dontDelete)) {
	      continue;
	    }
	    if (!_lodash2.default.isUndefined(child.geometry)) {
	      child.geometry.dispose();
	    }
	    if (!_lodash2.default.isUndefined(child.material)) {
	      child.material.dispose();
	    }
	    obj.remove(child);
	  }
	}
	
	function perpVector(ref, vec) {
	
	  var vec_along_ref = ref.clone().multiplyScalar(vec.dot(ref));
	
	  return vec.clone().sub(vec_along_ref);
	}
	
	function threePointNormal(vertices) {
	
	  var cb = new THREE.Vector3();
	  var ab = new THREE.Vector3();
	
	  cb.subVectors(vertices[2], vertices[1]);
	  ab.subVectors(vertices[0], vertices[1]);
	  cb.cross(ab);
	
	  cb.normalize();
	
	  return cb;
	}
	
	function getUnitVectorRotation(reference, target) {
	  return new THREE.Quaternion().setFromUnitVectors(reference, target);
	}
	
	function fraction(reference, target, t) {
	  return t * (target - reference) + reference;
	}
	
	function getFractionRotation(rotation, t) {
	  var identity = new THREE.Quaternion();
	  return identity.slerp(rotation, t);
	}
	
	function setGeometryVerticesColor(geom, color) {
	  for (var i = 0; i < geom.faces.length; i += 1) {
	    var face = geom.faces[i];
	    face.vertexColors[0] = color;
	    face.vertexColors[1] = color;
	    face.vertexColors[2] = color;
	  }
	}
	
	function mergeUnitGeom(totalGeom, unitGeom, color, matrix) {
	  setGeometryVerticesColor(unitGeom, color);
	  totalGeom.merge(unitGeom, matrix);
	}
	
	/**
	 * Calculates the transform matrix for a SphereGeometry
	 * to a given position and radius
	 *
	 * @param {THREE.Vector3} pos
	 * @param {Number} radius
	 * @returns {THREE.Matrix4}
	 */
	function getSphereMatrix(pos, radius) {
	  var obj = new THREE.Object3D();
	  obj.matrix.identity();
	  obj.position.copy(pos);
	  obj.scale.set(radius, radius, radius);
	  obj.updateMatrix();
	  return obj.matrix;
	}
	
	/**
	 * Calculates the transform matrix for a UnitCylinderGeometry
	 * to orientate along the axis between the 'from' and 'to' vector
	 *
	 * @param {THREE.Vector3} from
	 * @param {THREE.Vector3} to
	 * @param {Number} radius
	 * @returns {THREE.Matrix4}
	 */
	function getCylinderMatrix(from, to, radius) {
	  var obj = new THREE.Object3D();
	  obj.scale.set(radius, radius, from.distanceTo(to));
	  obj.position.copy(from).add(to).multiplyScalar(0.5);
	  obj.lookAt(to);
	  obj.updateMatrix();
	  return obj.matrix;
	}
	
	function applyMatrix4toVector3array(matrix, vec3Array, iStart, iEnd) {
	  var elems = matrix.elements;
	  for (var i = iStart; i < iEnd; i += 3) {
	    var x = vec3Array[i];
	    var y = vec3Array[i + 1];
	    var z = vec3Array[i + 2];
	    vec3Array[i] = elems[0] * x + elems[4] * y + elems[8] * z + elems[12];
	    vec3Array[i + 1] = elems[1] * x + elems[5] * y + elems[9] * z + elems[13];
	    vec3Array[i + 2] = elems[2] * x + elems[6] * y + elems[10] * z + elems[14];
	  }
	}
	
	function applyRotationOfMatrix4toVector3array(matrix, vec3Array, iStart, iEnd) {
	  var elems = matrix.elements;
	  for (var i = iStart; i < iEnd; i += 3) {
	    var x = vec3Array[i];
	    var y = vec3Array[i + 1];
	    var z = vec3Array[i + 2];
	    vec3Array[i] = elems[0] * x + elems[4] * y + elems[8] * z;
	    vec3Array[i + 1] = elems[1] * x + elems[5] * y + elems[9] * z;
	    vec3Array[i + 2] = elems[2] * x + elems[6] * y + elems[10] * z;
	  }
	}
	
	function expandFloatArray(refArray, nCopy) {
	  var nElem = refArray.length;
	  var targetArray = new Float32Array(nElem * nCopy);
	  for (var iCopy = 0; iCopy < nCopy; iCopy += 1) {
	    var iStart = iCopy * nElem;
	    for (var i = 0; i < nElem; i += 1) {
	      targetArray[iStart + i] = refArray[i];
	    }
	  }
	  return targetArray;
	}
	
	function applyColorToVector3array(color, vec3Array, iStart, iEnd) {
	  for (var i = iStart; i < iEnd; i += 3) {
	    vec3Array[i] = color.r;
	    vec3Array[i + 1] = color.g;
	    vec3Array[i + 2] = color.b;
	  }
	}
	
	function expandIndices(refArray, nCopy, nIndexInCopy) {
	  var nElem = refArray.length;
	  var targetArray = new Uint32Array(nElem * nCopy);
	  for (var iCopy = 0; iCopy < nCopy; iCopy += 1) {
	    var iStart = iCopy * nElem;
	    var indexOffset = iCopy * nIndexInCopy;
	    for (var i = 0; i < nElem; i += 1) {
	      targetArray[iStart + i] = refArray[i] + indexOffset;
	    }
	  }
	  return targetArray;
	}
	
	/**
	 */
	
	var CopyBufferGeometry = function (_THREE$BufferGeometry) {
	  _inherits(CopyBufferGeometry, _THREE$BufferGeometry);
	
	  function CopyBufferGeometry(copyBufferGeometry, nCopy) {
	    _classCallCheck(this, CopyBufferGeometry);
	
	    var _this6 = _possibleConstructorReturn(this, (CopyBufferGeometry.__proto__ || Object.getPrototypeOf(CopyBufferGeometry)).call(this));
	
	    _this6.type = 'CopyBufferGeometry';
	    _this6.parameters = {
	      nCopy: nCopy
	    };
	
	    _this6.refBufferGeometry = copyBufferGeometry;
	
	    var positions = expandFloatArray(copyBufferGeometry.attributes.position.array, nCopy);
	    _this6.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));
	
	    var normals = expandFloatArray(copyBufferGeometry.attributes.normal.array, nCopy);
	    _this6.addAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));
	
	    var uvs = expandFloatArray(copyBufferGeometry.attributes.uv.array, nCopy);
	    _this6.addAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));
	
	    var nVertexInCopy = copyBufferGeometry.attributes.position.count;
	
	    if ('index' in copyBufferGeometry) {
	      var indices = expandIndices(copyBufferGeometry.index.array, nCopy, nVertexInCopy);
	      _this6.setIndex(new THREE.Uint32BufferAttribute(indices, 1));
	    }
	
	    var colors = new Float32Array(nVertexInCopy * 3 * nCopy);
	    _this6.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));
	    return _this6;
	  }
	
	  _createClass(CopyBufferGeometry, [{
	    key: 'applyMatrixToCopy',
	    value: function applyMatrixToCopy(matrix, iCopy) {
	      var nElemRef = this.refBufferGeometry.attributes.position.array.length;
	      var positions = this.attributes.position.array;
	      var normals = this.attributes.normal.array;
	      var iElemStart = iCopy * nElemRef;
	      var iElemEnd = iElemStart + nElemRef;
	      applyMatrix4toVector3array(matrix, positions, iElemStart, iElemEnd);
	      applyRotationOfMatrix4toVector3array(matrix, normals, iElemStart, iElemEnd);
	    }
	  }, {
	    key: 'applyColorToCopy',
	    value: function applyColorToCopy(color, iCopy) {
	      var nElemRef = this.refBufferGeometry.attributes.position.array.length;
	      var colors = this.attributes.color.array;
	      var iElemStart = iCopy * nElemRef;
	      var iElemEnd = iElemStart + nElemRef;
	      applyColorToVector3array(color, colors, iElemStart, iElemEnd);
	    }
	  }]);
	
	  return CopyBufferGeometry;
	}(THREE.BufferGeometry);
	
	exports.BlockArrowGeometry = BlockArrowGeometry;
	exports.UnitCylinderGeometry = UnitCylinderGeometry;
	exports.setVisible = setVisible;
	exports.RaisedShapeGeometry = RaisedShapeGeometry;
	exports.RibbonGeometry = RibbonGeometry;
	exports.getUnitVectorRotation = getUnitVectorRotation;
	exports.getFractionRotation = getFractionRotation;
	exports.fraction = fraction;
	exports.setGeometryVerticesColor = setGeometryVerticesColor;
	exports.clearObject3D = clearObject3D;
	exports.Trace = Trace;
	exports.mergeUnitGeom = mergeUnitGeom;
	exports.getSphereMatrix = getSphereMatrix;
	exports.getCylinderMatrix = getCylinderMatrix;
	exports.CopyBufferGeometry = CopyBufferGeometry;
	exports.applyMatrix4toVector3array = applyMatrix4toVector3array;
	exports.applyRotationOfMatrix4toVector3array = applyRotationOfMatrix4toVector3array;
	exports.applyColorToVector3array = applyColorToVector3array;

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Finds pairs of vertices that have been coarsely grouped together
	 * using spatial hashes of boxes of div^3. All vertices in neighboring
	 * boxes are considered close pairs.
	 *
	 * Vertex - [x, y, z] in real coordinates
	 *
	 * Space - [i, j, k] integer indices in grid space
	 *
	 * Spacehash - hash integer hash of a space
	 *
	 * SpaceHashes are spaces converted to a single integer
	 *
	 * @param {Array<THREE.Vector3>} vertices - list of positions
	 * @returns {Array} - array of pairs of positions
	 */
	var SpaceHash = function () {
	  function SpaceHash(vertices) {
	    _classCallCheck(this, SpaceHash);
	
	    console.log('SpaceHash assigning vertices to cells');
	
	    this.vertices = vertices;
	    this.padding = 0.05;
	    this.div = 5.0;
	    this.invDiv = 1.0 / this.div;
	    this.maxima = [0.0, 0.0, 0.0];
	    this.minima = [0.0, 0.0, 0.0];
	    this.spans = [0.0, 0.0, 0.0];
	    this.sizes = [0, 0, 0];
	
	    for (var iDim = 0; iDim < 3; iDim++) {
	      for (var iVertex = 0; iVertex < this.vertices.length; iVertex += 1) {
	        if (this.minima[iDim] > this.vertices[iVertex][iDim]) {
	          this.minima[iDim] = this.vertices[iVertex][iDim];
	        }
	        if (this.maxima[iDim] < this.vertices[iVertex][iDim]) {
	          this.maxima[iDim] = this.vertices[iVertex][iDim];
	        }
	      }
	      this.minima[iDim] -= this.padding;
	      this.maxima[iDim] += this.padding;
	      this.spans[iDim] = this.maxima[iDim] - this.minima[iDim];
	      this.sizes[iDim] = Math.ceil(this.spans[iDim] * this.invDiv);
	    }
	
	    this.cells = {};
	    this.spaces = [];
	    for (var _iVertex = 0; _iVertex < this.vertices.length; _iVertex++) {
	      var vertex = this.vertices[_iVertex];
	      var space = this.getSpaceFromVertex(vertex);
	      this.spaces.push(space);
	      var hash = this.getHashFromSpace(space);
	      if (!(hash in this.cells)) {
	        this.cells[hash] = [];
	      }
	      this.cells[hash].push(_iVertex);
	    }
	  }
	
	  _createClass(SpaceHash, [{
	    key: 'getSpaceFromVertex',
	    value: function getSpaceFromVertex(vertex) {
	      var result = [];
	      for (var iDim = 0; iDim < 3; iDim++) {
	        result.push(Math.round((vertex[iDim] - this.minima[iDim]) * this.invDiv));
	      }
	      return result;
	    }
	  }, {
	    key: 'getHashFromSpace',
	    value: function getHashFromSpace(s) {
	      return s[0] * this.sizes[1] * this.sizes[2] + s[1] * this.sizes[2] + s[2];
	    }
	  }, {
	    key: 'pushCellOfSpace',
	    value: function pushCellOfSpace(pairs, vertex, iVertex) {
	      var spaceCenter = this.getSpaceFromVertex(vertex);
	
	      var space0start = Math.max(0, spaceCenter[0] - 1);
	      var space0end = Math.min(this.sizes[0], spaceCenter[0] + 2);
	      var space1start = Math.max(0, spaceCenter[1] - 1);
	      var space1end = Math.min(this.sizes[1], spaceCenter[1] + 2);
	      var space2start = Math.max(0, spaceCenter[2] - 1);
	      var space2end = Math.min(this.sizes[2], spaceCenter[2] + 2);
	
	      for (var space0 = space0start; space0 < space0end; space0++) {
	        for (var space1 = space1start; space1 < space1end; space1++) {
	          for (var space2 = space2start; space2 < space2end; space2++) {
	            var hash = this.getHashFromSpace([space0, space1, space2]);
	            if (hash in this.cells) {
	              var cell = this.cells[hash];
	              for (var jVertexInCell = 0; jVertexInCell < cell.length; jVertexInCell++) {
	                var jVertex = cell[jVertexInCell];
	                if (iVertex < jVertex) {
	                  pairs.push([iVertex, jVertex]);
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'getClosePairs',
	    value: function getClosePairs() {
	      console.log('SpatialHash.getClosePairs');
	      var pairs = [];
	      for (var iVertex = 0; iVertex < this.vertices.length; iVertex++) {
	        this.pushCellOfSpace(pairs, this.vertices[iVertex], iVertex);
	      }
	      return pairs;
	    }
	  }]);
	
	  return SpaceHash;
	}();
	
	exports.SpaceHash = SpaceHash;

/***/ },
/* 12 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @file Store - an array-based space-efficient typed datastore, to be used
	 * as a Flyweight, with an associated Proxy
	 *
	 * adapted from NGL @author Alexander Rose <alexander.rose@weirdbyte.de>
	 */
	
	function getTypedArray(arrayType, arraySize) {
	  switch (arrayType) {
	    case 'int8':
	      return new Int8Array(arraySize);
	    case 'int16':
	      return new Int16Array(arraySize);
	    case 'int32':
	      return new Int32Array(arraySize);
	    case 'uint8':
	      return new Uint8Array(arraySize);
	    case 'uint16':
	      return new Uint16Array(arraySize);
	    case 'uint32':
	      return new Uint32Array(arraySize);
	    case 'float32':
	      return new Float32Array(arraySize);
	    default:
	      throw new Error('arrayType unknown: ' + arrayType);
	  }
	}
	
	/**
	 * Store - an array-based space-efficient typed datastore, to be used
	 * as a Flyweight, with an associated Proxy
	 */
	
	var Store = function () {
	  /**
	   * @param fields - list of typed fields in the store
	   * @param {Integer} size - initial size of the datastore
	   */
	  function Store(fields, size) {
	    _classCallCheck(this, Store);
	
	    // actual size allocated
	    this.length = 0;
	
	    // size to use, updated by this.growIfFull
	    this.count = 0;
	
	    this._fields = fields;
	
	    if (Number.isInteger(size)) {
	      this._init(size);
	    } else {
	      this._init(0);
	    }
	  }
	
	  /**
	   * Initialize the store
	   * @param {Integer} size - size to initialize
	   */
	
	
	  _createClass(Store, [{
	    key: '_init',
	    value: function _init(size) {
	      this.length = size;
	      this.count = 0;
	
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;
	
	      try {
	        for (var _iterator = this._fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var field = _step.value;
	
	          this._initField.apply(this, _toConsumableArray(field));
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	
	    /**
	     * Initialize a field
	     * @param  {String} name - field name
	     * @param  {Integer} size - element size
	     * @param  {String} type - data type, one of int8, int16, int32,
	     *                         uint8, uint16, uint32, float32
	     */
	
	  }, {
	    key: '_initField',
	    value: function _initField(name, size, type) {
	      this[name] = getTypedArray(type, this.length * size);
	    }
	
	    /**
	     * Add a field
	     * @param  {String} name - field name
	     * @param  {Integer} size - element size
	     * @param  {String} type - data type, one of int8, int16, int32,
	     *                         uint8, uint16, uint32, float32
	     */
	
	  }, {
	    key: 'addField',
	    value: function addField(name, size, type) {
	      this._fields.push([name, size, type]);
	      this._initField(name, size, type);
	    }
	
	    /**
	     * Resize the store to the new size
	     * @param  {Integer} size - new size
	     */
	
	  }, {
	    key: 'resize',
	    value: function resize(size) {
	      // Log.time( "Store.resize" );
	
	      this.length = Math.round(size || 0);
	      this.count = Math.min(this.count, this.length);
	
	      for (var i = 0, il = this._fields.length; i < il; ++i) {
	        var name = this._fields[i][0];
	        var itemSize = this._fields[i][1];
	        var arraySize = this.length * itemSize;
	        var tmpArray = new this[name].constructor(arraySize);
	
	        if (this[name].length > arraySize) {
	          tmpArray.set(this[name].subarray(0, arraySize));
	        } else {
	          tmpArray.set(this[name]);
	        }
	        this[name] = tmpArray;
	      }
	
	      // Log.timeEnd( "Store.resize" );
	    }
	
	    /**
	     * Resize the store to 1.5 times its current size if full, or to 256 if empty
	     */
	
	  }, {
	    key: 'growIfFull',
	    value: function growIfFull() {
	      if (this.count >= this.length) {
	        var size = Math.round(this.length * 1.5);
	        this.resize(Math.max(256, size));
	      }
	    }
	
	    /**
	     * Increase the store by 1, and resize if necessary
	     */
	
	  }, {
	    key: 'increment',
	    value: function increment() {
	      this.count += 1;
	      this.growIfFull();
	    }
	
	    /**
	     * Copy data from one store to another
	     * @param  {Store} other - store to copy from
	     * @param  {Integer} thisOffset - offset to start copying to
	     * @param  {Integer} otherOffset - offset to start copying from
	     * @param  {Integer} length - number of entries to copy
	     */
	
	  }, {
	    key: 'copyFrom',
	    value: function copyFrom(other, thisOffset, otherOffset, length) {
	      for (var i = 0, il = this._fields.length; i < il; ++i) {
	        var name = this._fields[i][0];
	        var itemSize = this._fields[i][1];
	        var thisField = this[name];
	        var otherField = other[name];
	
	        for (var j = 0; j < length; ++j) {
	          var thisIndex = itemSize * (thisOffset + j);
	          var otherIndex = itemSize * (otherOffset + j);
	          for (var k = 0; k < itemSize; ++k) {
	            thisField[thisIndex + k] = otherField[otherIndex + k];
	          }
	        }
	      }
	    }
	
	    /**
	     * Copy data within this store
	     * @param  {Integer} offsetTarget - offset to start copying to
	     * @param  {Integer} offsetSource - offset to start copying from
	     * @param  {Integer} length - number of entries to copy
	     */
	
	  }, {
	    key: 'copyWithin',
	    value: function copyWithin(offsetTarget, offsetSource, length) {
	      for (var i = 0, il = this._fields.length; i < il; ++i) {
	        var name = this._fields[i][0];
	        var itemSize = this._fields[i][1];
	        var thisField = this[name];
	
	        for (var j = 0; j < length; ++j) {
	          var targetIndex = itemSize * (offsetTarget + j);
	          var sourceIndex = itemSize * (offsetSource + j);
	          for (var k = 0; k < itemSize; ++k) {
	            thisField[targetIndex + k] = thisField[sourceIndex + k];
	          }
	        }
	      }
	    }
	
	    /**
	     * Sort entries in the store given the compare function
	     * @param  {Function} compareFunction - function to sort by (i, j) -> Integer
	     *            the return value is - if item[i] is smaller than item[j]
	     */
	
	  }, {
	    key: 'sort',
	    value: function sort(compareFunction) {
	      var thisStore = this;
	      var tmpStore = new this.constructor(this._fields, 1);
	
	      function swap(index1, index2) {
	        if (index1 === index2) return;
	        tmpStore.copyFrom(thisStore, 0, index1, 1);
	        thisStore.copyWithin(index1, index2, 1);
	        thisStore.copyFrom(tmpStore, index2, 0, 1);
	      }
	
	      function quicksort(left, right) {
	        if (left < right) {
	          var pivot = Math.floor((left + right) / 2);
	          var leftNew = left;
	          var rightNew = right;
	          do {
	            while (compareFunction(leftNew, pivot) < 0) {
	              leftNew += 1;
	            }
	            while (compareFunction(rightNew, pivot) > 0) {
	              rightNew -= 1;
	            }
	            if (leftNew <= rightNew) {
	              if (leftNew === pivot) {
	                pivot = rightNew;
	              } else if (rightNew === pivot) {
	                pivot = leftNew;
	              }
	              swap(leftNew, rightNew);
	              leftNew += 1;
	              rightNew -= 1;
	            }
	          } while (leftNew <= rightNew);
	          quicksort(left, rightNew);
	          quicksort(leftNew, right);
	        }
	      }
	
	      quicksort(0, this.count - 1);
	    }
	
	    /**
	     * Empty the store, but keep the allocated memory
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this.count = 0;
	    }
	
	    /**
	     * Dispose of the store entries and fields
	     */
	
	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      delete this.length;
	      delete this.count;
	
	      for (var i = 0, il = this._fields.length; i < il; ++i) {
	        var name = this._fields[i][0];
	        delete this[name];
	      }
	    }
	  }]);
	
	  return Store;
	}();
	
	exports.default = Store;

/***/ },
/* 13 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * @file Bit array
	 * @author Alexander Rose <alexander.rose@weirdbyte.de>
	 * @author Paul Pillot <paulpillot@gmail.com>
	 * @private
	 */
	
	/**
	 * Compute the Hamming weight of a 32-bit unsigned integer
	 * @param  {Integer} v - a 32-bit unsigned integer
	 * @return {Integer} the Hamming weight
	 */
	function hammingWeight(v) {
	  // works with signed or unsigned shifts
	  v -= v >>> 1 & 0x55555555;
	  v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
	  return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
	}
	
	/**
	 * Bit array
	 *
	 * Based heavily on https://github.com/lemire/FastBitSet.js
	 * which is licensed under the Apache License, Version 2.0.
	 */
	
	var BitArray = function () {
	  /**
	   * @param  {Integer} length - array length
	   * @param  {Boolean} [setAll] - initialize with true
	   */
	  function BitArray(length, setAll) {
	    _classCallCheck(this, BitArray);
	
	    this.length = length;
	    this._words = new Uint32Array(length + 32 >>> 5);
	    if (setAll === true) {
	      this.setAll();
	    }
	  }
	
	  /**
	   * Get value at index
	   * @param  {Integer} index - the index
	   * @return {Boolean} value
	   */
	
	
	  _createClass(BitArray, [{
	    key: 'get',
	    value: function get(index) {
	      return (this._words[index >>> 5] & 1 << index) !== 0;
	    }
	
	    /**
	     * Set value at index to true
	     * @param  {Integer} index - the index
	     * @return {undefined}
	     */
	
	  }, {
	    key: 'set',
	    value: function set(index) {
	      this._words[index >>> 5] |= 1 << index;
	    }
	
	    /**
	     * Set value at index to false
	     * @param  {Integer} index - the index
	     * @return {undefined}
	     */
	
	  }, {
	    key: 'clear',
	    value: function clear(index) {
	      this._words[index >>> 5] &= ~(1 << index);
	    }
	
	    /**
	     * Flip value at index
	     * @param  {Integer} index - the index
	     * @return {undefined}
	     */
	
	  }, {
	    key: 'flip',
	    value: function flip(index) {
	      this._words[index >>> 5] ^= 1 << index;
	    }
	  }, {
	    key: '_assignRange',
	    value: function _assignRange(start, end, value) {
	      var words = this._words;
	      var wordValue = value === true ? 0xFFFFFFFF : 0;
	      var wordStart = start >>> 5;
	      var wordEnd = end >>> 5;
	      // set complete words when applicable
	      for (var k = wordStart; k < wordEnd; ++k) {
	        words[k] = wordValue;
	      }
	      // set parts of the range not spanning complete words
	      var startWord = wordStart << 5;
	      var endWord = wordEnd << 5;
	      if (value === true) {
	        if (end - start < 32) {
	          for (var i = start, n = end + 1; i < n; ++i) {
	            words[i >>> 5] |= 1 << i;
	          }
	        } else {
	          for (var _i = start, _n = startWord; _i < _n; ++_i) {
	            words[_i >>> 5] |= 1 << _i;
	          }
	          for (var _i2 = endWord, _n2 = end + 1; _i2 < _n2; ++_i2) {
	            words[_i2 >>> 5] |= 1 << _i2;
	          }
	        }
	      } else {
	        if (end - start < 32) {
	          for (var _i3 = start, _n3 = end + 1; _i3 < _n3; ++_i3) {
	            words[_i3 >>> 5] &= ~(1 << _i3);
	          }
	        } else {
	          for (var _i4 = start, _n4 = startWord; _i4 < _n4; ++_i4) {
	            words[_i4 >>> 5] &= ~(1 << _i4);
	          }
	          for (var _i5 = endWord, _n5 = end + 1; _i5 < _n5; ++_i5) {
	            words[_i5 >>> 5] &= ~(1 << _i5);
	          }
	        }
	      }
	      return this;
	    }
	
	    /**
	     * Set bits of the given range
	     * @param {Integer} start - start index
	     * @param {Integer} end - end index
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'setRange',
	    value: function setRange(start, end) {
	      return this._assignRange(start, end, true);
	    }
	
	    /**
	     * Clear bits of the given range
	     * @param {Integer} start - start index
	     * @param {Integer} end - end index
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'clearRange',
	    value: function clearRange(start, end) {
	      return this._assignRange(start, end, false);
	    }
	
	    /**
	     * Set bits at all given indices
	     * @param {...Integer} arguments - indices
	     * @return {Boolean} this object
	     */
	
	  }, {
	    key: 'setBits',
	    value: function setBits() {
	      var words = this._words;
	      var n = arguments.length;
	      for (var i = 0; i < n; ++i) {
	        var index = arguments[i];
	        words[index >>> 5] |= 1 << index;
	      }
	      return this;
	    }
	
	    /**
	     * Clear bits at all given indices
	     * @param {...Integer} arguments - indices
	     * @return {Boolean} this object
	     */
	
	  }, {
	    key: 'clearBits',
	    value: function clearBits() {
	      var words = this._words;
	      var n = arguments.length;
	      for (var i = 0; i < n; ++i) {
	        var index = arguments[i];
	        words[index >>> 5] &= ~(1 << index);
	      }
	      return this;
	    }
	
	    /**
	     * Set all bits of the array
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'setAll',
	    value: function setAll() {
	      return this._assignRange(0, this.length - 1, true);
	    }
	
	    /**
	     * Clear all bits of the array
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'clearAll',
	    value: function clearAll() {
	      return this._assignRange(0, this.length - 1, false);
	    }
	
	    /**
	     * Flip all the values in the array
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'flipAll',
	    value: function flipAll() {
	      var count = this._words.length;
	      var words = this._words;
	      var bs = 32 - this.length % 32;
	      for (var k = 0; k < count - 1; ++k) {
	        words[k] = ~words[k];
	      }
	      words[count - 1] = ~(words[count - 1] << bs) >>> bs;
	      return this;
	    }
	  }, {
	    key: '_isRangeValue',
	    value: function _isRangeValue(start, end, value) {
	      var words = this._words;
	      var wordValue = value === true ? 0xFFFFFFFF : 0;
	      var wordStart = start >>> 5;
	      var wordEnd = end >>> 5;
	      // set complete words when applicable
	      for (var k = wordStart; k < wordEnd; ++k) {
	        if (words[k] !== wordValue) return false;
	      }
	      // set parts of the range not spanning complete words
	      if (end - start < 32) {
	        for (var i = start, n = end + 1; i < n; ++i) {
	          if (!!(words[i >>> 5] & 1 << i) !== value) return false;
	        }
	      } else {
	        var startWord = wordStart << 5;
	        var endWord = wordEnd << 5;
	        for (var _i6 = start, _n6 = startWord << 5; _i6 < _n6; ++_i6) {
	          if (!!(words[_i6 >>> 5] & 1 << _i6) !== value) return false;
	        }
	        for (var _i7 = endWord, _n7 = end + 1; _i7 < _n7; ++_i7) {
	          if (!!(words[_i7 >>> 5] & 1 << _i7) !== value) return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * Test if bits in given range are set
	     * @param {Integer} start - start index
	     * @param {Integer} end - end index
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'isRangeSet',
	    value: function isRangeSet(start, end) {
	      return this._isRangeValue(start, end, true);
	    }
	
	    /**
	     * Test if bits in given range are clear
	     * @param {Integer} start - start index
	     * @param {Integer} end - end index
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'isRangeClear',
	    value: function isRangeClear(start, end) {
	      return this._isRangeValue(start, end, false);
	    }
	
	    /**
	     * Test if all bits in the array are set
	     * @return {Boolean} test result
	     */
	
	  }, {
	    key: 'isAllSet',
	    value: function isAllSet() {
	      return this._isRangeValue(0, this.length - 1, true);
	    }
	
	    /**
	     * Test if all bits in the array are clear
	     * @return {Boolean} test result
	     */
	
	  }, {
	    key: 'isAllClear',
	    value: function isAllClear() {
	      return this._isRangeValue(0, this.length - 1, false);
	    }
	
	    /**
	     * Test if bits at all given indices are set
	     * @param {...Integer} arguments - indices
	     * @return {Boolean} test result
	     */
	
	  }, {
	    key: 'isSet',
	    value: function isSet() {
	      var words = this._words;
	      var n = arguments.length;
	      for (var i = 0; i < n; ++i) {
	        var index = arguments[i];
	        if ((words[index >>> 5] & 1 << index) === 0) return false;
	      }
	      return true;
	    }
	
	    /**
	     * Test if bits at all given indices are clear
	     * @param {...Integer} arguments - indices
	     * @return {Boolean} test result
	     */
	
	  }, {
	    key: 'isClear',
	    value: function isClear() {
	      var words = this._words;
	      var n = arguments.length;
	      for (var i = 0; i < n; ++i) {
	        var index = arguments[i];
	        if ((words[index >>> 5] & 1 << index) !== 0) return false;
	      }
	      return true;
	    }
	
	    /**
	     * Test if two BitArrays are identical in all their values
	     * @param {BitArray} otherBitarray - the other BitArray
	     * @return {Boolean} test result
	     */
	
	  }, {
	    key: 'isEqualTo',
	    value: function isEqualTo(otherBitarray) {
	      var words1 = this._words;
	      var words2 = otherBitarray._words;
	      var count = Math.min(words1.length, words2.length);
	      for (var k = 0; k < count; ++k) {
	        if (words1[k] !== words2[k]) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * How many set bits?
	     * @return {Integer} number of set bits
	     */
	
	  }, {
	    key: 'getSize',
	    value: function getSize() {
	      var count = this._words.length;
	      var words = this._words;
	      var size = 0;
	      for (var i = 0; i < count; ++i) {
	        size += hammingWeight(words[i]);
	      }
	      return size;
	    }
	
	    /**
	     * Calculate difference betwen this and another bit array.
	     * Store result in this object.
	     * @param  {BitArray} otherBitarray - the other bit array
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'difference',
	    value: function difference(otherBitarray) {
	      var words1 = this._words;
	      var words2 = otherBitarray._words;
	      var count = Math.min(words1.length, words2.length);
	      for (var k = 0; k < count; ++k) {
	        words1[k] = words1[k] & ~words2[k];
	      }
	      for (var _k = words1.length; _k < count; ++_k) {
	        words1[_k] = 0;
	      }
	      return this;
	    }
	
	    /**
	     * Calculate union betwen this and another bit array.
	     * Store result in this object.
	     * @param  {BitArray} otherBitarray - the other bit array
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'union',
	    value: function union(otherBitarray) {
	      var words1 = this._words;
	      var words2 = otherBitarray._words;
	      var count = Math.min(words1.length, words2.length);
	      for (var k = 0; k < count; ++k) {
	        words1[k] |= words2[k];
	      }
	      for (var _k2 = words1.length; _k2 < count; ++_k2) {
	        words1[_k2] = 0;
	      }
	      return this;
	    }
	
	    /**
	     * Calculate intersection betwen this and another bit array.
	     * Store result in this object.
	     * @param  {BitArray} otherBitarray - the other bit array
	     * @return {BitArray} this object
	     */
	
	  }, {
	    key: 'intersection',
	    value: function intersection(otherBitarray) {
	      var words1 = this._words;
	      var words2 = otherBitarray._words;
	      var count = Math.min(words1.length, words2.length);
	      for (var k = 0; k < count; ++k) {
	        words1[k] &= words2[k];
	      }
	      for (var _k3 = words1.length; _k3 < count; ++_k3) {
	        words1[_k3] = 0;
	      }
	      return this;
	    }
	
	    /**
	     * Test if there is any intersection betwen this and another bit array.
	     * @param  {BitArray} otherBitarray - the other bit array
	     * @return {Boolean} test result
	     */
	
	  }, {
	    key: 'intersects',
	    value: function intersects(otherBitarray) {
	      var words1 = this._words;
	      var words2 = otherBitarray._words;
	      var count = Math.min(words1.length, words2.length);
	      for (var k = 0; k < count; ++k) {
	        if ((words1[k] & words2[k]) !== 0) {
	          return true;
	        }
	      }
	      return false;
	    }
	
	    /**
	     * Calculate the number of bits in common betwen this and another bit array.
	     * @param  {BitArray} otherBitarray - the other bit array
	     * @return {Integer} size
	     */
	
	  }, {
	    key: 'getIntersectionSize',
	    value: function getIntersectionSize(otherBitarray) {
	      var words1 = this._words;
	      var words2 = otherBitarray._words;
	      var count = Math.min(words1.length, words2.length);
	      var size = 0;
	      for (var k = 0; k < count; ++k) {
	        size += hammingWeight(words1[k] & words2[k]);
	      }
	      return size;
	    }
	
	    /**
	     * Calculate intersection betwen this and another bit array.
	     * Store result in a new bit array.
	     * @param  {BitArray} otherBitarray - the other bit array
	     * @return {BitArray} the new bit array
	     */
	
	  }, {
	    key: 'makeIntersection',
	    value: function makeIntersection(otherBitarray) {
	      var words1 = this._words;
	      var words2 = otherBitarray._words;
	      var count = Math.min(words1.length, words2.length);
	      var wordsA = new Uint32Array(count);
	      var intersection = Object.create(BitArray.prototype);
	      intersection._words = wordsA;
	      intersection.length = Math.min(this.length, otherBitarray.length);
	      for (var k = 0; k < count; ++k) {
	        wordsA[k] = words1[k] & words2[k];
	      }
	      return intersection;
	    }
	
	    /**
	     * Iterate over all set bits in the array
	     * @param  {function( index: Integer, i: Integer )} callback - the callback
	     * @return {undefined}
	     */
	
	  }, {
	    key: 'forEach',
	    value: function forEach(callback) {
	      var count = this._words.length;
	      var words = this._words;
	      var i = 0;
	      for (var k = 0; k < count; ++k) {
	        var w = words[k];
	        while (w !== 0) {
	          var t = w & -w;
	          var index = (k << 5) + hammingWeight(t - 1);
	          callback(index, i);
	          w ^= t;
	          ++i;
	        }
	      }
	    }
	
	    /**
	     * Get an array with the set bits
	     * @return {Array} bit indices
	     */
	
	  }, {
	    key: 'toArray',
	    value: function toArray() {
	      var words = this._words;
	      var answer = new Array(this.getSize());
	      var count = this._words.length;
	      var pos = 0;
	      for (var k = 0; k < count; ++k) {
	        var w = words[k];
	        while (w !== 0) {
	          var t = w & -w;
	          answer[pos++] = (k << 5) + hammingWeight(t - 1);
	          w ^= t;
	        }
	      }
	      return answer;
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return '{' + this.toArray().join(',') + '}';
	    }
	  }, {
	    key: 'toSeleString',
	    value: function toSeleString() {
	      var sele = this.toArray().join(',');
	      return sele ? '@' + sele : 'NONE';
	    }
	
	    /**
	     * Clone this object
	     * @return {BitArray} the cloned object
	     */
	
	  }, {
	    key: 'clone',
	    value: function clone() {
	      var clone = Object.create(BitArray.prototype);
	      clone.length = this.length;
	      clone._words = new Uint32Array(this._words);
	      return clone;
	    }
	  }]);
	
	  return BitArray;
	}();
	
	exports.default = BitArray;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Display = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _jquery = __webpack_require__(3);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _v = __webpack_require__(7);
	
	var _v2 = _interopRequireDefault(_v);
	
	var _three = __webpack_require__(8);
	
	var THREE = _interopRequireWildcard(_three);
	
	var _glgeom = __webpack_require__(10);
	
	var glgeom = _interopRequireWildcard(_glgeom);
	
	var _util = __webpack_require__(9);
	
	var util = _interopRequireWildcard(_util);
	
	var _widgets = __webpack_require__(15);
	
	var _widgets2 = _interopRequireDefault(_widgets);
	
	var _data = __webpack_require__(16);
	
	var data = _interopRequireWildcard(_data);
	
	var _soup = __webpack_require__(6);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Display is the main window for drawing the soup
	 * in a WebGL HTML5 canvas, includes various widgets that
	 * are described in widgets.js.
	 *
	 * Display takes a soup, and builds three.js from
	 * it. Display also handles mouse input and
	 * uses controller to make changes to the underlying soup
	 * and their associated views
	 */
	var Display = function () {
	
	  /**
	   * @param soupView - SoupView object that holds a soup and views
	   * @param divTag - a selector tag for a DOM element
	   * @param controller - the controller for the soupView
	   * @param isGrid - flat to show autodock 3D grid control panel
	   * @param backgroundColor - the background color of canvas and webgl
	   */
	  function Display(soupView, divTag, controller, isGrid, backgroundColor) {
	    _classCallCheck(this, Display);
	
	    this.divTag = divTag;
	    this.soupView = soupView;
	    this.soup = soupView.soup;
	    this.controller = controller;
	
	    // stores the trace of the soup & DNA backbones, used
	    // to generate the ribbons and tubes
	    this.traces = [];
	
	    this.div = (0, _jquery2.default)(this.divTag);
	    this.div.css('overflow', 'hidden');
	
	    this.nDataServer = 0;
	
	    this.unitSphereGeom = new THREE.SphereGeometry(1, 8, 8);
	
	    this.backgroundColor = backgroundColor;
	
	    this.webglDivId = this.div.attr('id') + '-canvas-wrapper';
	    this.webglDivTag = '#' + this.webglDivId;
	    this.webglDiv = (0, _jquery2.default)('<div>').attr('id', this.webglDivId).css('overflow', 'hidden').css('z-index', '0').css('background-color', '#CCC').css('position', 'absolute');
	    this.webglDiv.contextmenu(function () {
	      return false;
	    });
	
	    this.div.append(this.webglDiv);
	    this.div.css('background-color', '#CCC');
	
	    // atom radius used to display on the screen
	    this.atomRadius = 0.35;
	
	    // parameters for viewport
	    this.camera = {
	      focus: new THREE.Vector3(0, 0, 0),
	      position: new THREE.Vector3(0, 0, -1),
	      up: new THREE.Vector3(0, 1, 0),
	      // the front and back of viewable area relative to the origin
	      zFront: -40,
	      zBack: 20,
	      // distance of focus from camera
	      zoom: 1.0
	    };
	
	    // a THREE.js camera, will be set properly before draw
	    this.threeJsCamera = new THREE.PerspectiveCamera(45, this.width() / this.height());
	
	    this.displayScene = new THREE.Scene();
	    this.displayScene.background = new THREE.Color(this.backgroundColor);
	    this.displayScene.fog = new THREE.Fog(this.backgroundColor, 1, 100);
	
	    // this.displayMeshes is a dictionary that holds THREE.Object3D
	    // collections of meshes. This allows collections to be collectively
	    // turned on and off. The meshes will be regenerated into this.displayScene
	    // if the underlying data changes. The convenience function
	    // will send geometries into the displayMeshes, using this.displayMaterial
	    // as the default. This assumes vertexColors are used, allowing multiple
	    // colors within the same geometry.
	    this.displayMeshes = {};
	    this.displayMaterial = new THREE.MeshLambertMaterial({ vertexColors: THREE.VertexColors });
	
	    this.pickingScene = new THREE.Scene();
	    this.pickingTexture = new THREE.WebGLRenderTarget(this.width(), this.height());
	    this.pickingTexture.texture.minFilter = THREE.LinearFilter;
	
	    this.pickingMeshes = {};
	    this.pickingMaterial = new THREE.MeshBasicMaterial({ vertexColors: THREE.VertexColors });
	
	    // WebGL objects that only need to build once in the life-cycle
	    this.lights = [];
	    this.buildLights();
	
	    this.buildCrossHairs();
	
	    this.distanceWidget = new _widgets2.default.DistanceMeasuresWidget(this);
	    this.labelWidget = new _widgets2.default.AtomLabelsWidget(this);
	    this.sequenceWidget = new _widgets2.default.SequenceWidget(this.divTag, this);
	    this.zSlabWidget = new _widgets2.default.ZSlabWidget(this.divTag, this.soupView);
	    this.gridControlWidget = new _widgets2.default.GridControlWidget(this.divTag, this.soupView, isGrid);
	
	    // popup hover box over the mouse position
	    this.hover = new _widgets2.default.PopupText(this.divTag, 'lightblue');
	    this.hover.div.css('pointer-events', 'none');
	    this.hover.arrow.css('pointer-events', 'none');
	
	    // div to display processing messages
	    this.messageDiv = (0, _jquery2.default)('<div>').attr('id', 'loading-message').addClass('jolecule-loading-message');
	
	    this.setProcessingMesssage('Loading data for proteins');
	
	    this.webglDiv.css('top', this.sequenceWidget.height());
	
	    this.lineElement = new _widgets2.default.LineElement(this.divTag, '#FF7777');
	
	    // input control parametsrs
	    this.saveMouseX = null;
	    this.saveMouseY = null;
	    this.saveMouseR = null;
	    this.saveMouseT = null;
	    this.mouseX = null;
	    this.mouseY = null;
	    this.mouseR = null;
	    this.mouseT = null;
	    this.mousePressed = false;
	  }
	
	  _createClass(Display, [{
	    key: 'initWebglRenderer',
	    value: function initWebglRenderer() {
	      var _this = this;
	
	      this.renderer = new THREE.WebGLRenderer();
	      this.renderer.setClearColor(this.backgroundColor);
	      this.renderer.setSize(this.width(), this.height());
	
	      var dom = this.renderer.domElement;
	      this.webglDiv[0].appendChild(dom);
	
	      var bind = function bind(w, fn) {
	        dom.addEventListener(w, fn);
	      };
	
	      bind('mousedown', function (e) {
	        return _this.mousedown(e);
	      });
	      bind('mousemove', function (e) {
	        return _this.mousemove(e);
	      });
	      bind('mouseup', function (e) {
	        return _this.mouseup(e);
	      });
	      bind('mousewheel', function (e) {
	        return _this.mousewheel(e);
	      });
	      bind('DOMMouseScroll', function (e) {
	        return _this.mousewheel(e);
	      });
	      bind('touchstart', function (e) {
	        return _this.mousedown(e);
	      });
	      bind('touchmove', function (e) {
	        return _this.mousemove(e);
	      });
	      bind('touchend', function (e) {
	        return _this.mouseup(e);
	      });
	      bind('touchcancel', function (e) {
	        return _this.mouseup(e);
	      });
	      bind('gesturestart', function (e) {
	        return _this.gesturestart(e);
	      });
	      bind('gesturechange', function (e) {
	        return _this.gesturechange(e);
	      });
	      bind('gestureend', function (e) {
	        return _this.gestureend(e);
	      });
	    }
	  }, {
	    key: 'setProcessingMesssage',
	    value: function setProcessingMesssage(message) {
	      console.log('Display.setProcessingMessage:', message);
	      this.messageDiv.html(message).show();
	      util.stickJqueryDivInTopLeft(this.div, this.messageDiv, 100, 90);
	    }
	  }, {
	    key: 'cleanupProcessingMessage',
	    value: function cleanupProcessingMessage() {
	      this.resize();
	      this.messageDiv.hide();
	    }
	  }, {
	    key: 'displayMessageBeforeCompute',
	
	
	    /**
	     * Pause before a computeFn to allow the DOM to show a message
	     */
	    value: function displayMessageBeforeCompute(message, computeFn) {
	      this.setProcessingMesssage(message);
	      setTimeout(computeFn, 0);
	    }
	  }, {
	    key: 'buildAfterInitialLoad',
	    value: function buildAfterInitialLoad() {
	      this.soupView.current_view.makeDefaultOfSoup(this.soup);
	      this.soupView.save_view(this.soupView.current_view);
	      this.soupView.changed = true;
	
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;
	
	      try {
	        for (var _iterator = _lodash2.default.range(this.soup.getResidueCount())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var i = _step.value;
	
	          var ss = this.soup.getResidueProxy(i).ss;
	          this.soup.getResidueProxy(i).color = data.getSsColor(ss);
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	
	      this.buildScene();
	
	      this.sequenceWidget.reset();
	      this.resize();
	    }
	  }, {
	    key: 'buildAfterAdditionalLoad',
	    value: function buildAfterAdditionalLoad() {
	      this.buildScene();
	      this.soupView.changed = true;
	      this.sequenceWidget.reset();
	      this.gridControlWidget.reset();
	      this.resize();
	    }
	  }, {
	    key: 'calculateTracesForRibbons',
	    value: function calculateTracesForRibbons() {
	      var _this2 = this;
	
	      this.traces.length = 0;
	
	      var lastTrace = void 0;
	
	      for (var iRes = 0; iRes < this.soup.getResidueCount(); iRes += 1) {
	        if (this.soup.getResidueProxy(iRes).isPolymer) {
	          if (iRes === 0 || !this.soup.isPolymerConnected(iRes - 1, iRes)) {
	            (function () {
	              var newTrace = new glgeom.Trace();
	              newTrace.getReference = function (i) {
	                return _this2.soup.getResidueProxy(newTrace.indices[i]);
	              };
	              _this2.traces.push(newTrace);
	              lastTrace = newTrace;
	            })();
	          }
	          lastTrace.indices.push(iRes);
	
	          var atom = this.soup.getResidueProxy(iRes).getCentralAtomProxy();
	          lastTrace.points.push(atom.pos.clone());
	
	          var normal = this.soup.getResidueProxy(iRes).normal;
	          lastTrace.normals.push(normal);
	        }
	      }
	
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;
	
	      try {
	        for (var _iterator2 = this.traces[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var trace = _step2.value;
	
	          trace.calcTangents();
	          trace.calcNormals();
	          trace.calcBinormals();
	          trace.expand();
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'getAtomColor',
	    value: function getAtomColor(iAtom) {
	      var atom = this.soup.getAtomProxy(iAtom);
	      if (atom.elem === 'C' || atom.elem === 'H') {
	        var iRes = atom.iRes;
	        return this.soup.getResidueProxy(iRes).color;
	      } else if (atom.elem in data.ElementColors) {
	        return data.ElementColors[atom.elem];
	      }
	      return data.darkGrey;
	    }
	  }, {
	    key: 'buildLights',
	    value: function buildLights() {
	      var directedLight = new THREE.DirectionalLight(0xFFFFFF);
	      directedLight.position.copy(_v2.default.create(0.2, 0.2, -100).normalize());
	      directedLight.dontDelete = true;
	      this.lights.push(directedLight);
	
	      var ambientLight = new THREE.AmbientLight(0x202020);
	      ambientLight.dontDelete = true;
	      this.lights.push(ambientLight);
	
	      for (var i = 0; i < this.lights.length; i += 1) {
	        this.displayScene.add(this.lights[i]);
	      }
	    }
	
	    /**
	     **********************************************************
	     * Mesh-building methods
	     *
	     * Routines to build meshes that will be incorporated into
	     * scenes, and to be used for gpu-picking.
	     *
	     * Meshes are stored in a dictionary: this.displayMeshes &
	     * this.pickingMeshes
	     **********************************************************
	     */
	
	  }, {
	    key: 'buildScene',
	    value: function buildScene() {
	
	      // pre-calculations needed before building meshes
	      this.soup.findGridLimits();
	      this.calculateTracesForRibbons();
	
	      this.buildMeshOfRibbons();
	      this.buildMeshOfGrid();
	      this.buildMeshOfLigands();
	      this.buildMeshOfNucleotides();
	      this.buildMeshOfArrows();
	
	      this.rebuildSceneWithMeshes();
	    }
	
	    /**
	     * Clears/creates a mesh entry in the mesh collection
	     *
	     * @param meshName - the name for a mesh collection
	     */
	
	  }, {
	    key: 'createOrClearMesh',
	    value: function createOrClearMesh(meshName) {
	      if (!(meshName in this.displayMeshes)) {
	        this.displayMeshes[meshName] = new THREE.Object3D();
	      } else {
	        glgeom.clearObject3D(this.displayMeshes[meshName]);
	      }
	      if (!(meshName in this.pickingMeshes)) {
	        this.pickingMeshes[meshName] = new THREE.Object3D();
	      } else {
	        glgeom.clearObject3D(this.pickingMeshes[meshName]);
	      }
	    }
	
	    /**
	     * Rebuild soupView from meshes in this.displayMeshes &
	     * this.pickingMeshes
	     */
	
	  }, {
	    key: 'rebuildSceneWithMeshes',
	    value: function rebuildSceneWithMeshes() {
	      glgeom.clearObject3D(this.displayScene);
	      glgeom.clearObject3D(this.pickingScene);
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;
	
	      try {
	        for (var _iterator3 = _lodash2.default.values(this.displayMeshes)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var mesh = _step3.value;
	
	          if (mesh.children.length > 0) {
	            this.displayScene.add(mesh);
	          }
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;
	
	      try {
	        for (var _iterator4 = _lodash2.default.values(this.pickingMeshes)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var _mesh = _step4.value;
	
	          if (_mesh.children.length > 0) {
	            this.pickingScene.add(_mesh);
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }
	    }
	
	    /**
	     * Sets the visibility of a mesh this.displayMeshes & this.pickingMeshes.
	     * If it does not exist, create it, and look for the corresponding method
	     * to build the mesh this.build<CaptializaedMeshName>
	     *
	     * @param meshName
	     * @param visible
	     */
	
	  }, {
	    key: 'setMeshVisible',
	    value: function setMeshVisible(meshName, visible) {
	      if (visible) {
	        if (!(meshName in this.displayMeshes)) {
	          var buildMeshOfFunctionName = 'buildMeshOf' + _lodash2.default.capitalize(meshName);
	
	          console.log('Display.' + buildMeshOfFunctionName);
	          this[buildMeshOfFunctionName]();
	
	          this.updateMeshesInScene = true;
	        }
	      }
	      if (meshName in this.displayMeshes) {
	        glgeom.setVisible(this.displayMeshes[meshName], visible);
	      }
	      if (meshName in this.pickingMeshes) {
	        glgeom.setVisible(this.pickingMeshes[meshName], visible);
	      }
	    }
	  }, {
	    key: 'selectVisibleMeshes',
	    value: function selectVisibleMeshes() {
	
	      this.updateMeshesInScene = false;
	
	      var show = this.soupView.current_view.show;
	      this.setMeshVisible('tube', show.trace);
	      this.setMeshVisible('water', show.water);
	      this.setMeshVisible('ribbons', show.ribbon);
	      this.setMeshVisible('arrows', !show.all_atom);
	      this.setMeshVisible('backbone', show.all_atom);
	      this.setMeshVisible('ligands', show.ligands);
	
	      if (this.soupView.soup.grid.changed) {
	        this.buildMeshOfGrid();
	        this.soupView.soup.grid.changed = false;
	        this.updateMeshesInScene = true;
	      }
	
	      if (this.soupView.updateSelection) {
	        this.buildSelectedResidues(show.sidechain);
	        this.updateMeshesInScene = true;
	        this.soupView.updateSelection = false;
	      }
	
	      if (this.updateMeshesInScene) {
	        this.rebuildSceneWithMeshes();
	      }
	    }
	  }, {
	    key: 'addGeomToDisplayMesh',
	    value: function addGeomToDisplayMesh(meshName, geom, i) {
	      if (geom.vertices.length === 0) {
	        return;
	      }
	      var mesh = new THREE.Mesh(geom, this.displayMaterial);
	      if (!_lodash2.default.isUndefined(i)) {
	        mesh.i = i;
	      }
	      this.displayMeshes[meshName].add(mesh);
	    }
	  }, {
	    key: 'addGeomToPickingMesh',
	    value: function addGeomToPickingMesh(meshName, geom, i) {
	      if (geom.vertices.length === 0) {
	        return;
	      }
	      var mesh = new THREE.Mesh(geom, this.pickingMaterial);
	      if (!_lodash2.default.isUndefined(i)) {
	        mesh.i = i;
	      }
	      this.pickingMeshes[meshName].add(mesh);
	    }
	  }, {
	    key: 'buildMeshOfRibbons',
	    value: function buildMeshOfRibbons() {
	      this.createOrClearMesh('ribbons');
	      var displayGeom = new THREE.Geometry();
	      var pickingGeom = new THREE.Geometry();
	      var _iteratorNormalCompletion5 = true;
	      var _didIteratorError5 = false;
	      var _iteratorError5 = undefined;
	
	      try {
	        for (var _iterator5 = this.traces[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	          var trace = _step5.value;
	
	          var n = trace.points.length;
	          var _iteratorNormalCompletion6 = true;
	          var _didIteratorError6 = false;
	          var _iteratorError6 = undefined;
	
	          try {
	            for (var _iterator6 = _lodash2.default.range(n)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	              var i = _step6.value;
	
	              var res = trace.getReference(i);
	              var face = data.getSsFace(res.ss);
	              var color = res.color;
	              var iAtom = res.iAtom;
	              var isRound = res.ss === 'C';
	              var isFront = i === 0 || res.ss !== trace.getReference(i - 1).ss;
	              var isBack = i === n - 1 || res.ss !== trace.getReference(i + 1).ss;
	              var resGeom = trace.getSegmentGeometry(i, face, isRound, isFront, isBack, color);
	              displayGeom.merge(resGeom);
	              glgeom.setGeometryVerticesColor(resGeom, data.getIndexColor(iAtom));
	              pickingGeom.merge(resGeom);
	            }
	          } catch (err) {
	            _didIteratorError6 = true;
	            _iteratorError6 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                _iterator6.return();
	              }
	            } finally {
	              if (_didIteratorError6) {
	                throw _iteratorError6;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError5 = true;
	        _iteratorError5 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion5 && _iterator5.return) {
	            _iterator5.return();
	          }
	        } finally {
	          if (_didIteratorError5) {
	            throw _iteratorError5;
	          }
	        }
	      }
	
	      this.addGeomToDisplayMesh('ribbons', displayGeom);
	      this.addGeomToPickingMesh('ribbons', pickingGeom);
	    }
	  }, {
	    key: 'buildMeshOfArrows',
	    value: function buildMeshOfArrows() {
	      this.createOrClearMesh('arrows');
	
	      var geom = new THREE.Geometry();
	      var blockArrowGeometry = new glgeom.BlockArrowGeometry();
	      blockArrowGeometry.computeFaceNormals();
	
	      var obj = new THREE.Object3D();
	
	      var _iteratorNormalCompletion7 = true;
	      var _didIteratorError7 = false;
	      var _iteratorError7 = undefined;
	
	      try {
	        for (var _iterator7 = this.traces[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	          var trace = _step7.value;
	          var _iteratorNormalCompletion8 = true;
	          var _didIteratorError8 = false;
	          var _iteratorError8 = undefined;
	
	          try {
	            for (var _iterator8 = _lodash2.default.range(trace.points.length)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	              var i = _step8.value;
	
	              var point = trace.points[i];
	              var tangent = trace.tangents[i];
	              var normal = trace.binormals[i];
	              var target = point.clone().add(tangent);
	
	              var res = trace.getReference(i);
	              var color = data.getDarkSsColor(res.ss);
	              glgeom.setGeometryVerticesColor(blockArrowGeometry, color);
	
	              obj.matrix.identity();
	              obj.position.copy(point);
	              obj.up.copy(normal);
	              obj.lookAt(target);
	              obj.updateMatrix();
	
	              geom.merge(blockArrowGeometry, obj.matrix);
	            }
	          } catch (err) {
	            _didIteratorError8 = true;
	            _iteratorError8 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                _iterator8.return();
	              }
	            } finally {
	              if (_didIteratorError8) {
	                throw _iteratorError8;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError7 = true;
	        _iteratorError7 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion7 && _iterator7.return) {
	            _iterator7.return();
	          }
	        } finally {
	          if (_didIteratorError7) {
	            throw _iteratorError7;
	          }
	        }
	      }
	
	      this.addGeomToDisplayMesh('arrows', geom);
	    }
	  }, {
	    key: 'buildMeshOfTube',
	    value: function buildMeshOfTube() {
	      this.createOrClearMesh('tube');
	      var geom = new THREE.Geometry();
	      var _iteratorNormalCompletion9 = true;
	      var _didIteratorError9 = false;
	      var _iteratorError9 = undefined;
	
	      try {
	        for (var _iterator9 = this.traces[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	          var trace = _step9.value;
	
	          var n = trace.points.length;
	          var _iteratorNormalCompletion10 = true;
	          var _didIteratorError10 = false;
	          var _iteratorError10 = undefined;
	
	          try {
	            for (var _iterator10 = _lodash2.default.range(n)[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
	              var i = _step10.value;
	
	              var res = trace.getReference(i);
	              var color = res.color;
	              var iAtom = res.iAtom;
	              var isRound = true;
	              var isFront = i === 0;
	              var isBack = i === n - 1;
	              var resGeom = trace.getSegmentGeometry(i, data.fatCoilFace, isRound, isFront, isBack, color);
	              geom.merge(resGeom);
	              glgeom.setGeometryVerticesColor(resGeom, new THREE.Color().setHex(iAtom));
	            }
	          } catch (err) {
	            _didIteratorError10 = true;
	            _iteratorError10 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion10 && _iterator10.return) {
	                _iterator10.return();
	              }
	            } finally {
	              if (_didIteratorError10) {
	                throw _iteratorError10;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError9 = true;
	        _iteratorError9 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion9 && _iterator9.return) {
	            _iterator9.return();
	          }
	        } finally {
	          if (_didIteratorError9) {
	            throw _iteratorError9;
	          }
	        }
	      }
	
	      this.addGeomToDisplayMesh('tube', geom);
	    }
	  }, {
	    key: 'buildAtomMeshes',
	    value: function buildAtomMeshes(atomIndices, meshName) {
	      if (atomIndices.length === 0) {
	        return;
	      }
	      var nCopy = atomIndices.length;
	      var sphereBufferGeometry = new THREE.SphereBufferGeometry(1, 8, 8);
	      var displayGeom = new glgeom.CopyBufferGeometry(sphereBufferGeometry, nCopy);
	      var pickingGeom = new glgeom.CopyBufferGeometry(sphereBufferGeometry, nCopy);
	
	      var atomProxy = this.soup.getAtomProxy();
	      for (var iCopy = 0; iCopy < nCopy; iCopy += 1) {
	        var iAtom = atomIndices[iCopy];
	        atomProxy.load(iAtom);
	        var matrix = glgeom.getSphereMatrix(atomProxy.pos, this.atomRadius);
	        displayGeom.applyMatrixToCopy(matrix, iCopy);
	        pickingGeom.applyMatrixToCopy(matrix, iCopy);
	        displayGeom.applyColorToCopy(this.getAtomColor(iAtom), iCopy);
	        pickingGeom.applyColorToCopy(data.getIndexColor(iAtom), iCopy);
	      }
	
	      var displayMesh = new THREE.Mesh(displayGeom, this.displayMaterial);
	      this.displayMeshes[meshName].add(displayMesh);
	
	      var pickingMesh = new THREE.Mesh(pickingGeom, this.pickingMaterial);
	      this.pickingMeshes[meshName].add(pickingMesh);
	    }
	  }, {
	    key: 'buildBondMeshes',
	    value: function buildBondMeshes(bondIndices, meshName) {
	      if (bondIndices.length === 0) {
	        return;
	      }
	      var nCopy = bondIndices.length;
	
	      var cylinderBufferGeometry = new THREE.CylinderBufferGeometry(1, 1, 1, 4, 1, false);
	      cylinderBufferGeometry.applyMatrix(new THREE.Matrix4().makeRotationFromEuler(new THREE.Euler(Math.PI / 2, Math.PI, 0)));
	
	      var displayGeom = new glgeom.CopyBufferGeometry(cylinderBufferGeometry, nCopy);
	
	      var atomProxy1 = this.soup.getAtomProxy();
	      var atomProxy2 = this.soup.getOtherAtomProxy();
	      var bondProxy = this.soup.bondProxy;
	      var residueProxy = this.soup.getResidueProxy();
	      for (var iCopy = 0; iCopy < nCopy; iCopy += 1) {
	        var iBond = bondIndices[iCopy];
	
	        bondProxy.load(iBond);
	        atomProxy1.load(bondProxy.iAtom1);
	        atomProxy2.load(bondProxy.iAtom2);
	        residueProxy.load(atomProxy1.iRes);
	
	        var p1 = atomProxy1.pos.clone();
	        var p2 = atomProxy2.pos.clone();
	
	        if (atomProxy1.iRes !== atomProxy2.iRes) {
	          var midpoint = p2.clone().add(p1).multiplyScalar(0.5);
	          if (atomProxy1.iRes === residueProxy.iRes) {
	            p2 = midpoint;
	          } else if (atomProxy2.iRes === residueProxy.iRes) {
	            p1 = midpoint;
	          }
	        }
	
	        var matrix = glgeom.getCylinderMatrix(p1, p2, 0.2);
	
	        displayGeom.applyMatrixToCopy(matrix, iCopy);
	        displayGeom.applyColorToCopy(residueProxy.color, iCopy);
	      }
	
	      var displayMesh = new THREE.Mesh(displayGeom, this.displayMaterial);
	      this.displayMeshes[meshName].add(displayMesh);
	    }
	  }, {
	    key: 'buildSelectedResidues',
	    value: function buildSelectedResidues(showAllResidues) {
	      this.createOrClearMesh('sidechains');
	
	      var atomIndices = [];
	      var bondIndices = [];
	
	      var atom = this.soup.getAtomProxy();
	      var _iteratorNormalCompletion11 = true;
	      var _didIteratorError11 = false;
	      var _iteratorError11 = undefined;
	
	      try {
	        for (var _iterator11 = _lodash2.default.range(this.soup.getResidueCount())[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
	          var iRes = _step11.value;
	
	          var residue = this.soup.getResidueProxy(iRes);
	          if (!residue.isPolymer) {
	            continue;
	          }
	          var residueShow = showAllResidues || residue.selected;
	          if (!residueShow) {
	            continue;
	          }
	          var _iteratorNormalCompletion12 = true;
	          var _didIteratorError12 = false;
	          var _iteratorError12 = undefined;
	
	          try {
	            for (var _iterator12 = residue.getAtomIndices()[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
	              var iAtom = _step12.value;
	
	              atom.load(iAtom);
	              if (!util.inArray(atom.atomType, data.backboneAtomTypes)) {
	                atomIndices.push(iAtom);
	                var _iteratorNormalCompletion13 = true;
	                var _didIteratorError13 = false;
	                var _iteratorError13 = undefined;
	
	                try {
	                  for (var _iterator13 = atom.getBondIndices()[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
	                    var iBond = _step13.value;
	
	                    bondIndices.push(iBond);
	                  }
	                } catch (err) {
	                  _didIteratorError13 = true;
	                  _iteratorError13 = err;
	                } finally {
	                  try {
	                    if (!_iteratorNormalCompletion13 && _iterator13.return) {
	                      _iterator13.return();
	                    }
	                  } finally {
	                    if (_didIteratorError13) {
	                      throw _iteratorError13;
	                    }
	                  }
	                }
	              }
	            }
	          } catch (err) {
	            _didIteratorError12 = true;
	            _iteratorError12 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion12 && _iterator12.return) {
	                _iterator12.return();
	              }
	            } finally {
	              if (_didIteratorError12) {
	                throw _iteratorError12;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError11 = true;
	        _iteratorError11 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion11 && _iterator11.return) {
	            _iterator11.return();
	          }
	        } finally {
	          if (_didIteratorError11) {
	            throw _iteratorError11;
	          }
	        }
	      }
	
	      this.buildAtomMeshes(atomIndices, 'sidechains');
	      this.buildBondMeshes(bondIndices, 'sidechains');
	    }
	  }, {
	    key: 'buildMeshOfBackbone',
	    value: function buildMeshOfBackbone() {
	      this.createOrClearMesh('backbone');
	
	      var atomIndices = [];
	      var bondIndices = [];
	
	      var atom = this.soup.getAtomProxy();
	      var _iteratorNormalCompletion14 = true;
	      var _didIteratorError14 = false;
	      var _iteratorError14 = undefined;
	
	      try {
	        for (var _iterator14 = _lodash2.default.range(this.soup.getResidueCount())[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
	          var iRes = _step14.value;
	
	          var residue = this.soup.getResidueProxy(iRes);
	          if (!residue.isPolymer) {
	            continue;
	          }
	          var _iteratorNormalCompletion15 = true;
	          var _didIteratorError15 = false;
	          var _iteratorError15 = undefined;
	
	          try {
	            for (var _iterator15 = residue.getAtomIndices()[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
	              var iAtom = _step15.value;
	
	              atom.load(iAtom);
	              if (util.inArray(atom.atomType, data.backboneAtomTypes)) {
	                atomIndices.push(iAtom);
	                var _iteratorNormalCompletion16 = true;
	                var _didIteratorError16 = false;
	                var _iteratorError16 = undefined;
	
	                try {
	                  for (var _iterator16 = atom.getBondIndices()[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
	                    var iBond = _step16.value;
	
	                    bondIndices.push(iBond);
	                  }
	                } catch (err) {
	                  _didIteratorError16 = true;
	                  _iteratorError16 = err;
	                } finally {
	                  try {
	                    if (!_iteratorNormalCompletion16 && _iterator16.return) {
	                      _iterator16.return();
	                    }
	                  } finally {
	                    if (_didIteratorError16) {
	                      throw _iteratorError16;
	                    }
	                  }
	                }
	              }
	            }
	          } catch (err) {
	            _didIteratorError15 = true;
	            _iteratorError15 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion15 && _iterator15.return) {
	                _iterator15.return();
	              }
	            } finally {
	              if (_didIteratorError15) {
	                throw _iteratorError15;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError14 = true;
	        _iteratorError14 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion14 && _iterator14.return) {
	            _iterator14.return();
	          }
	        } finally {
	          if (_didIteratorError14) {
	            throw _iteratorError14;
	          }
	        }
	      }
	
	      this.buildAtomMeshes(atomIndices, 'backbone');
	      this.buildBondMeshes(bondIndices, 'backbone');
	    }
	  }, {
	    key: 'buildMeshOfLigands',
	    value: function buildMeshOfLigands() {
	      this.createOrClearMesh('ligands');
	      var atomIndices = [];
	      var bondIndices = [];
	      var atom = this.soup.getAtomProxy();
	      var _iteratorNormalCompletion17 = true;
	      var _didIteratorError17 = false;
	      var _iteratorError17 = undefined;
	
	      try {
	        for (var _iterator17 = _lodash2.default.range(this.soup.getResidueCount())[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
	          var iRes = _step17.value;
	
	          var residue = this.soup.getResidueProxy(iRes);
	          if (residue.ss !== '-') {
	            continue;
	          }
	          var _iteratorNormalCompletion18 = true;
	          var _didIteratorError18 = false;
	          var _iteratorError18 = undefined;
	
	          try {
	            for (var _iterator18 = residue.getAtomIndices()[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
	              var iAtom = _step18.value;
	
	              atom.load(iAtom);
	              atomIndices.push(iAtom);
	              var _iteratorNormalCompletion19 = true;
	              var _didIteratorError19 = false;
	              var _iteratorError19 = undefined;
	
	              try {
	                for (var _iterator19 = atom.getBondIndices()[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
	                  var iBond = _step19.value;
	
	                  bondIndices.push(iBond);
	                }
	              } catch (err) {
	                _didIteratorError19 = true;
	                _iteratorError19 = err;
	              } finally {
	                try {
	                  if (!_iteratorNormalCompletion19 && _iterator19.return) {
	                    _iterator19.return();
	                  }
	                } finally {
	                  if (_didIteratorError19) {
	                    throw _iteratorError19;
	                  }
	                }
	              }
	            }
	          } catch (err) {
	            _didIteratorError18 = true;
	            _iteratorError18 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion18 && _iterator18.return) {
	                _iterator18.return();
	              }
	            } finally {
	              if (_didIteratorError18) {
	                throw _iteratorError18;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError17 = true;
	        _iteratorError17 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion17 && _iterator17.return) {
	            _iterator17.return();
	          }
	        } finally {
	          if (_didIteratorError17) {
	            throw _iteratorError17;
	          }
	        }
	      }
	
	      this.buildAtomMeshes(atomIndices, 'ligands');
	      this.buildBondMeshes(bondIndices, 'ligands');
	    }
	  }, {
	    key: 'buildMeshOfWater',
	    value: function buildMeshOfWater() {
	      this.createOrClearMesh('water');
	      var atomIndices = [];
	      var _iteratorNormalCompletion20 = true;
	      var _didIteratorError20 = false;
	      var _iteratorError20 = undefined;
	
	      try {
	        for (var _iterator20 = _lodash2.default.range(this.soup.getResidueCount())[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
	          var iRes = _step20.value;
	
	          var residue = this.soup.getResidueProxy(iRes);
	          if (residue.resType === 'HOH') {
	            atomIndices.push(residue.iAtom);
	          }
	        }
	      } catch (err) {
	        _didIteratorError20 = true;
	        _iteratorError20 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion20 && _iterator20.return) {
	            _iterator20.return();
	          }
	        } finally {
	          if (_didIteratorError20) {
	            throw _iteratorError20;
	          }
	        }
	      }
	
	      this.buildAtomMeshes(atomIndices, 'water');
	    }
	  }, {
	    key: 'buildMeshOfGrid',
	    value: function buildMeshOfGrid() {
	      if (!this.gridControlWidget.isGrid) {
	        return;
	      }
	      this.createOrClearMesh('grid');
	
	      var grid = this.soupView.soup.grid;
	
	      var atomIndices = [];
	      var _iteratorNormalCompletion21 = true;
	      var _didIteratorError21 = false;
	      var _iteratorError21 = undefined;
	
	      try {
	        for (var _iterator21 = _lodash2.default.range(this.soup.getResidueCount())[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
	          var iRes = _step21.value;
	
	          var residue = this.soup.getResidueProxy(iRes);
	          if (residue.ss === 'G') {
	            var atom = residue.getCentralAtomProxy();
	            if (atom.bfactor > grid.bCutoff && grid.isElem[atom.elem]) {
	              atomIndices.push(atom.iAtom);
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError21 = true;
	        _iteratorError21 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion21 && _iterator21.return) {
	            _iterator21.return();
	          }
	        } finally {
	          if (_didIteratorError21) {
	            throw _iteratorError21;
	          }
	        }
	      }
	
	      this.buildAtomMeshes(atomIndices, 'grid');
	    }
	  }, {
	    key: 'buildMeshOfNucleotides',
	    value: function buildMeshOfNucleotides() {
	      var _this3 = this;
	
	      this.createOrClearMesh('basepairs');
	
	      var displayGeom = new THREE.Geometry();
	      var pickingGeom = new THREE.Geometry();
	
	      var cylinderGeom = new glgeom.UnitCylinderGeometry();
	
	      var _iteratorNormalCompletion22 = true;
	      var _didIteratorError22 = false;
	      var _iteratorError22 = undefined;
	
	      try {
	        for (var _iterator22 = _lodash2.default.range(this.soup.getResidueCount())[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
	          var iRes = _step22.value;
	
	          var residue = this.soup.getResidueProxy(iRes);
	          if (residue.ss !== 'D' || !residue.isPolymer) {
	            continue;
	          }
	
	          var basepairGeom = new THREE.Geometry();
	
	          var atomTypes = void 0,
	              bondTypes = void 0;
	          if (residue.resType === 'DA' || residue.resType === 'A') {
	            atomTypes = ['N9', 'C8', 'N7', 'C5', 'C6', 'N1', 'C2', 'N3', 'C4'];
	            bondTypes = [['C3\'', 'C2\''], ['C2\'', 'C1\''], ['C1\'', 'N9']];
	          } else if (residue.resType === 'DG' || residue.resType === 'G') {
	            atomTypes = ['N9', 'C8', 'N7', 'C5', 'C6', 'N1', 'C2', 'N3', 'C4'];
	            bondTypes = [['C3\'', 'C2\''], ['C2\'', 'C1\''], ['C1\'', 'N9']];
	          } else if (residue.resType === 'DT' || residue.resType === 'U') {
	            atomTypes = ['C6', 'N1', 'C2', 'N3', 'C4', 'C5'];
	            bondTypes = [['C3\'', 'C2\''], ['C2\'', 'C1\''], ['C1\'', 'N1']];
	          } else if (residue.resType === 'DC' || residue.resType === 'C') {
	            atomTypes = ['C6', 'N1', 'C2', 'N3', 'C4', 'C5'];
	            bondTypes = [['C3\'', 'C2\''], ['C2\'', 'C1\''], ['C1\'', 'N1']];
	          } else {
	            continue;
	          }
	
	          var getVerticesFromAtomDict = function getVerticesFromAtomDict(iRes, atomTypes) {
	            var res = _this3.soup.getResidueProxy(iRes);
	            return _lodash2.default.map(atomTypes, function (a) {
	              return res.getAtomProxy(a).pos.clone();
	            });
	          };
	
	          var vertices = getVerticesFromAtomDict(iRes, atomTypes);
	          var faceGeom = new glgeom.RaisedShapeGeometry(vertices, 0.2);
	          basepairGeom.merge(faceGeom);
	
	          var _iteratorNormalCompletion23 = true;
	          var _didIteratorError23 = false;
	          var _iteratorError23 = undefined;
	
	          try {
	            for (var _iterator23 = bondTypes[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
	              var bond = _step23.value;
	
	              var _vertices = getVerticesFromAtomDict(iRes, [bond[0], bond[1]]);
	              basepairGeom.merge(cylinderGeom, glgeom.getCylinderMatrix(_vertices[0], _vertices[1], 0.2));
	            }
	
	            // explicitly set to zero-length array as RaisedShapeGeometry
	            // sets no uv but cylinder does, and the merged geometry causes
	            // warnings in THREE.js v0.79
	          } catch (err) {
	            _didIteratorError23 = true;
	            _iteratorError23 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion23 && _iterator23.return) {
	                _iterator23.return();
	              }
	            } finally {
	              if (_didIteratorError23) {
	                throw _iteratorError23;
	              }
	            }
	          }
	
	          basepairGeom.faceVertexUvs = [new Array()];
	
	          glgeom.setGeometryVerticesColor(basepairGeom, residue.color);
	          displayGeom.merge(basepairGeom);
	
	          glgeom.setGeometryVerticesColor(basepairGeom, data.getIndexColor(residue.iAtom));
	          pickingGeom.merge(basepairGeom);
	        }
	      } catch (err) {
	        _didIteratorError22 = true;
	        _iteratorError22 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion22 && _iterator22.return) {
	            _iterator22.return();
	          }
	        } finally {
	          if (_didIteratorError22) {
	            throw _iteratorError22;
	          }
	        }
	      }
	
	      this.addGeomToDisplayMesh('basepairs', displayGeom);
	      this.addGeomToPickingMesh('basepairs', pickingGeom);
	    }
	  }, {
	    key: 'buildCrossHairs',
	    value: function buildCrossHairs() {
	      var radius = 1.2;
	      var segments = 60;
	      var material = new THREE.LineDashedMaterial({ color: 0xFF7777, linewidth: 2 });
	      var geometry = new THREE.CircleGeometry(radius, segments);
	
	      // Remove center vertex
	      geometry.vertices.shift();
	
	      this.crossHairs = new THREE.Line(geometry, material);
	      this.crossHairs.dontDelete = true;
	      this.displayScene.add(this.crossHairs);
	    }
	
	    /**
	     ******************************************
	     * Handle camera
	     ******************************************
	     */
	
	  }, {
	    key: 'setTargetViewFromAtom',
	    value: function setTargetViewFromAtom(iAtom) {
	      this.controller.set_target_view_by_atom(iAtom);
	    }
	  }, {
	    key: 'getCurrentViewCamera',
	    value: function getCurrentViewCamera() {
	      return this.soupView.current_view.camera;
	    }
	  }, {
	    key: 'rotateCameraToCurrentView',
	    value: function rotateCameraToCurrentView() {
	      var viewCamera = this.soupView.current_view.camera;
	
	      // rotate lights to soupView orientation
	      var cameraDirection = this.camera.position.clone().sub(this.camera.focus).normalize();
	      var viewCameraDirection = viewCamera.position.clone().sub(viewCamera.focus);
	      viewCameraDirection.normalize();
	      var rotation = glgeom.getUnitVectorRotation(cameraDirection, viewCameraDirection);
	      for (var i = 0; i < this.lights.length; i += 1) {
	        this.lights[i].position.applyQuaternion(rotation);
	      }
	
	      this.camera = viewCamera;
	
	      var far = this.camera.zoom + this.camera.zBack;
	      var near = this.camera.zoom + this.camera.zFront;
	      if (near < 1) {
	        near = 1;
	      }
	
	      this.threeJsCamera.position.copy(this.camera.position);
	      this.threeJsCamera.up.copy(this.camera.up);
	      this.threeJsCamera.lookAt(this.camera.focus);
	      this.threeJsCamera.near = near;
	      this.threeJsCamera.far = far;
	      this.threeJsCamera.updateProjectionMatrix();
	
	      this.displayScene.fog.near = near;
	      this.displayScene.fog.far = far;
	    }
	  }, {
	    key: 'adjustCamera',
	    value: function adjustCamera(xRotationAngle, yRotationAngle, zRotationAngle, zoomRatio) {
	      var camera = this.getCurrentViewCamera();
	
	      var y = camera.up;
	      var z = camera.position.clone().sub(camera.focus).normalize();
	      var x = _v2.default.create().crossVectors(y, z).normalize();
	
	      var rot_z = new THREE.Quaternion().setFromAxisAngle(z, zRotationAngle);
	
	      var rot_y = new THREE.Quaternion().setFromAxisAngle(y, -yRotationAngle);
	
	      var rot_x = new THREE.Quaternion().setFromAxisAngle(x, -xRotationAngle);
	
	      var rotation = new THREE.Quaternion().multiply(rot_z).multiply(rot_y).multiply(rot_x);
	
	      var newZoom = zoomRatio * camera.zoom;
	
	      if (newZoom < 2) {
	        newZoom = 2;
	      }
	
	      var position = camera.position.clone().sub(camera.focus).applyQuaternion(rotation).normalize().multiplyScalar(newZoom).add(camera.focus);
	
	      var view = this.soupView.current_view.clone();
	      view.camera.focus = camera.focus.clone();
	      view.camera.position = position;
	      view.camera.up = camera.up.clone().applyQuaternion(rotation);
	      view.camera.zoom = newZoom;
	
	      this.controller.set_current_view(view);
	    }
	  }, {
	    key: 'getZ',
	    value: function getZ(pos) {
	      var camera = this.getCurrentViewCamera();
	      var cameraDir = camera.focus.clone().sub(camera.position).normalize();
	      var posRelativeToOrigin = pos.clone().sub(camera.focus);
	      return posRelativeToOrigin.dot(cameraDir);
	    }
	  }, {
	    key: 'inZlab',
	    value: function inZlab(pos) {
	      var z = this.getZ(pos);
	      var camera = this.getCurrentViewCamera();
	      return z >= camera.zFront && z <= camera.zBack;
	    }
	  }, {
	    key: 'opacity',
	    value: function opacity(pos) {
	      var z = this.getZ(pos);
	
	      var camera = this.getCurrentViewCamera();
	
	      if (z < camera.zFront) {
	        return 1.0;
	      }
	
	      if (z > camera.zBack) {
	        return 0.0;
	      }
	
	      return 1 - (z - camera.zFront) / (camera.zBack - camera.zFront);
	    }
	  }, {
	    key: 'posXY',
	    value: function posXY(pos) {
	      var widthHalf = 0.5 * this.width();
	      var heightHalf = 0.5 * this.height();
	
	      var vector = pos.clone().project(this.threeJsCamera);
	
	      return {
	        x: vector.x * widthHalf + widthHalf + this.x(),
	        y: -(vector.y * heightHalf) + heightHalf + this.y()
	      };
	    }
	
	    /**
	     ******************************************
	     * Draw & Animate Graphical objects
	     ******************************************
	     */
	
	  }, {
	    key: 'updateCrossHairs',
	    value: function updateCrossHairs() {
	      var camera = this.getCurrentViewCamera();
	      this.crossHairs.position.copy(camera.focus);
	      this.crossHairs.lookAt(camera.position);
	      this.crossHairs.updateMatrix();
	    }
	  }, {
	    key: 'atomLabelDialog',
	    value: function atomLabelDialog() {
	      var _this4 = this;
	
	      var i_atom = this.soupView.current_view.i_atom;
	      if (i_atom >= 0) {
	        var atom = this.soup.getAtomProxy(i_atom);
	        var label = 'Label atom : ' + atom.label;
	        var success = function success(text) {
	          _this4.controller.make_label(i_atom, text);
	        };
	        util.textEntryDialog(this.div, label, success);
	      }
	    }
	  }, {
	    key: 'getIAtomHover',
	    value: function getIAtomHover() {
	      var x = this.mouseX;
	      var y = this.mouseY;
	
	      if (x === null || y === null) {
	        return null;
	      }
	
	      // create buffer for reading single pixel
	      var pixelBuffer = new Uint8Array(4);
	
	      // render the picking soupView off-screen
	      this.renderer.render(this.pickingScene, this.threeJsCamera, this.pickingTexture);
	
	      // read the pixel under the mouse from the texture
	      this.renderer.readRenderTargetPixels(this.pickingTexture, this.mouseX, this.pickingTexture.height - y, 1, 1, pixelBuffer);
	
	      // interpret the pixel as an ID
	      var i = pixelBuffer[0] << 16 | pixelBuffer[1] << 8 | pixelBuffer[2];
	
	      if (i < this.soup.getAtomCount()) {
	        return i;
	      }
	
	      return null;
	    }
	  }, {
	    key: 'updateHover',
	    value: function updateHover() {
	      if (this.soupView.n_update_step > 1) {
	        this.hover.hide();
	        return;
	      }
	
	      this.iHoverAtom = this.getIAtomHover();
	
	      if (this.iHoverAtom) {
	        var atom = this.soup.getAtomProxy(this.iHoverAtom);
	        var text = atom.label;
	        var iAtom = atom.iAtom;
	        var pos = atom.pos.clone();
	        if (iAtom === this.soupView.centered_atom().iAtom) {
	          text = '<div style="text-align: center">';
	          text += atom.label;
	          text += '<br>[drag distances]<br>';
	          text += '[double-click labels]';
	          text += '</div>';
	        }
	        this.hover.html(text);
	        var vector = this.posXY(pos);
	        this.hover.move(vector.x, vector.y);
	      } else {
	        this.hover.hide();
	      }
	    }
	
	    /**
	     ********************************************
	     * Main event loop methods
	     ********************************************
	     */
	
	  }, {
	    key: 'isChanged',
	    value: function isChanged() {
	      return this.soupView.changed;
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      if (_lodash2.default.isUndefined(this.displayMeshes)) {
	        return;
	      }
	      if (!this.isChanged()) {
	        return;
	      }
	
	      this.resize();
	
	      this.rotateCameraToCurrentView();
	
	      this.selectVisibleMeshes();
	
	      this.updateCrossHairs();
	
	      // needs to be drawn before render
	      this.distanceWidget.draw();
	      this.zSlabWidget.draw();
	      this.gridControlWidget.draw();
	      this.sequenceWidget.draw();
	
	      // leave this to the very last moment
	      // to avoid the dreaded black canvas
	      if (!util.exists(this.renderer)) {
	        this.initWebglRenderer();
	      }
	
	      // renders visible meshes to the gpu
	      this.renderer.render(this.displayScene, this.threeJsCamera);
	
	      // needs to be drawn after render
	      this.labelWidget.draw();
	
	      this.soupView.changed = false;
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      if (this.soupView.target_view === null) {
	        return;
	      }
	
	      this.soupView.n_update_step -= 1;
	      var nStep = this.soupView.n_update_step;
	      if (nStep <= 0) {
	        return;
	      }
	
	      var newCamera = (0, _soup.interpolateCameras)(this.soupView.current_view.camera, this.soupView.target_view.camera, 1.0 / nStep);
	
	      var view = this.soupView.target_view.clone();
	      view.setCamera(newCamera);
	      this.controller.set_current_view(view);
	
	      this.updateHover();
	    }
	
	    /**
	     ********************************************
	     * Standard DOM methods
	     ********************************************
	     */
	
	  }, {
	    key: 'resize',
	    value: function resize() {
	      if (!util.exists(this.renderer)) {
	        return;
	      }
	
	      this.threeJsCamera.aspect = this.width() / this.height();
	      this.threeJsCamera.updateProjectionMatrix();
	
	      this.renderer.setSize(this.width(), this.height());
	
	      this.pickingTexture.setSize(this.width(), this.height());
	
	      this.zSlabWidget.resize();
	      this.gridControlWidget.resize();
	      this.sequenceWidget.resize();
	
	      this.controller.flag_changed();
	    }
	  }, {
	    key: 'x',
	    value: function x() {
	      return 0;
	    }
	  }, {
	    key: 'y',
	    value: function y() {
	      var y = 0;
	      if (!_lodash2.default.isUndefined(this.sequenceWidget)) {
	        y += this.sequenceWidget.height();
	      }
	      return y;
	    }
	  }, {
	    key: 'width',
	    value: function width() {
	      return this.div.width();
	    }
	  }, {
	    key: 'height',
	    value: function height() {
	      return this.div.height() - this.y();
	    }
	  }, {
	    key: 'getMouse',
	    value: function getMouse(event) {
	      if (util.exists(event.touches) && event.touches.length > 0) {
	        this.eventX = event.touches[0].clientX;
	        this.eventY = event.touches[0].clientY;
	      } else {
	        this.eventX = event.clientX;
	        this.eventY = event.clientY;
	      }
	
	      var result = util.getDomPosition(this.div[0]);
	      this.mouseX = this.eventX - result[0] - this.x();
	      this.mouseY = this.eventY - result[1] - this.y();
	
	      var x = this.mouseX - this.width() / 2;
	      var y = this.mouseY - this.height() / 2;
	
	      this.mouseR = Math.sqrt(x * x + y * y);
	
	      this.mouseT = Math.atan(y / x);
	      if (x < 0) {
	        if (y > 0) {
	          this.mouseT += Math.PI;
	        } else {
	          this.mouseT -= Math.PI;
	        }
	      }
	    }
	  }, {
	    key: 'saveMouse',
	    value: function saveMouse() {
	      this.saveMouseX = this.mouseX;
	      this.saveMouseY = this.mouseY;
	      this.saveMouseR = this.mouseR;
	      this.saveMouseT = this.mouseT;
	    }
	  }, {
	    key: 'doubleclick',
	    value: function doubleclick() {
	      if (this.iHoverAtom !== null) {
	        if (this.iHoverAtom === this.soupView.centered_atom().iAtom) {
	          this.atomLabelDialog();
	        } else {
	          this.setTargetViewFromAtom(this.iHoverAtom);
	        }
	        this.isDraggingCentralAtom = false;
	      }
	    }
	  }, {
	    key: 'mousedown',
	    value: function mousedown(event) {
	      this.getMouse(event);
	
	      event.preventDefault();
	
	      var now = new Date().getTime();
	
	      var isDoubleClick = now - this.timePressed < 500;
	
	      this.updateHover();
	
	      this.iDownAtom = this.getIAtomHover();
	
	      if (isDoubleClick) {
	        this.doubleclick();
	      } else {
	        this.isDraggingCentralAtom = this.iDownAtom !== null;
	      }
	
	      this.timePressed = now;
	
	      this.saveMouse();
	      this.mousePressed = true;
	    }
	  }, {
	    key: 'mousemove',
	    value: function mousemove(event) {
	      this.getMouse(event);
	
	      event.preventDefault();
	
	      if (this.isGesture) {
	        return;
	      }
	
	      this.updateHover();
	
	      if (this.isDraggingCentralAtom) {
	        var v = this.posXY(this.soup.getAtomProxy(this.iDownAtom).pos);
	
	        this.lineElement.move(this.mouseX + this.x(), this.mouseY + this.y(), v.x, v.y);
	      } else {
	        var shiftDown = event.shiftKey === 1;
	
	        var rightMouse = event.button === 2 || event.which === 3;
	
	        if (this.mousePressed) {
	          var zoomRatio = 1.0;
	          var zRotationAngle = 0;
	          var yRotationAngle = 0;
	          var xRotationAngle = 0;
	
	          if (rightMouse || shiftDown) {
	            zRotationAngle = this.mouseT - this.saveMouseT;
	
	            if (this.mouseR > 0.0) {
	              zoomRatio = this.saveMouseR / this.mouseR;
	            }
	          } else {
	            yRotationAngle = _v2.default.degToRad(this.mouseX - this.saveMouseX);
	            xRotationAngle = _v2.default.degToRad(this.mouseY - this.saveMouseY);
	          }
	
	          this.adjustCamera(xRotationAngle, yRotationAngle, zRotationAngle, zoomRatio);
	
	          this.saveMouse();
	        }
	      }
	    }
	  }, {
	    key: 'mousewheel',
	    value: function mousewheel(event) {
	      event.preventDefault();
	
	      var wheel = void 0;
	      if (util.exists(event.wheelDelta)) {
	        wheel = event.wheelDelta / 120;
	      } else {
	        // for Firefox
	        wheel = -event.detail / 12;
	      }
	      var zoom = Math.pow(1 + Math.abs(wheel) / 2, wheel > 0 ? 1 : -1);
	
	      this.adjustCamera(0, 0, 0, zoom);
	    }
	  }, {
	    key: 'mouseup',
	    value: function mouseup(event) {
	      this.getMouse(event);
	
	      event.preventDefault();
	
	      if (this.isDraggingCentralAtom) {
	        if (this.iHoverAtom !== null) {
	          if (this.iHoverAtom !== this.iDownAtom) {
	            this.controller.make_dist(this.iHoverAtom, this.iDownAtom);
	          }
	        }
	
	        this.lineElement.hide();
	
	        this.isDraggingCentralAtom = false;
	      }
	
	      if (util.exists(event.touches)) {
	        this.hover.hide();
	        this.mouseX = null;
	        this.mouseY = null;
	      }
	
	      this.iDownAtom = null;
	
	      this.mousePressed = false;
	    }
	  }, {
	    key: 'gesturestart',
	    value: function gesturestart(event) {
	      event.preventDefault();
	      this.isGesture = true;
	      this.lastPinchRotation = 0;
	      this.lastScale = event.scale * event.scale;
	    }
	  }, {
	    key: 'gesturechange',
	    value: function gesturechange(event) {
	      event.preventDefault();
	      this.adjustCamera(0, 0, _v2.default.degToRad(event.rotation * 2 - this.lastPinchRotation), this.lastScale / (event.scale * event.scale));
	
	      this.lastPinchRotation = event.rotation * 2;
	      this.lastScale = event.scale * event.scale;
	    }
	  }, {
	    key: 'gestureend',
	    value: function gestureend(event) {
	      event.preventDefault();
	      this.isGesture = false;
	      this.iDownAtom = null;
	      this.mousePressed = false;
	    }
	  }]);
	
	  return Display;
	}();
	
	exports.Display = Display;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	idget interface
	
	decorated graphical objects on top of ProteinDisplay that are a hybrid
	of HTML DOM elements and WebGL elements such as lines, atom labels,
	distance measures, sequence bars, z-slab control, grid controls
	
	this.reset - called after model rebuild
	this.draw - called at every draw event
	this.resize - called after every resize of window
	
	
	var _jquery = __webpack_require__(3);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _three = __webpack_require__(8);
	
	var THREE = _interopRequireWildcard(_three);
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _data = __webpack_require__(16);
	
	var data = _interopRequireWildcard(_data);
	
	var _util = __webpack_require__(9);
	
	var util = _interopRequireWildcard(_util);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * LineElement
	 * - instantiates a DOM object is to draw a line between (x1, y1) and
	 *   (x2, y2) within a jquery div
	 * - used to display the mouse tool for making distance labels
	 */
	
	var LineElement = function () {
	  function LineElement(selector, color) {
	    _classCallCheck(this, LineElement);
	
	    this.color = color;
	
	    this.div = (0, _jquery2.default)('<canvas>').css({
	      'position': 'absolute',
	      'z-index': '1000',
	      'display': 'none',
	      'pointer-events': 'none'
	    });
	
	    this.canvas = this.div[0];
	    this.context2d = this.canvas.getContext('2d');
	
	    this.parentDiv = (0, _jquery2.default)(selector);
	    this.parentDiv.append(this.div);
	  }
	
	  _createClass(LineElement, [{
	    key: 'hide',
	    value: function hide() {
	      this.div.css('display', 'none');
	    }
	  }, {
	    key: 'move',
	    value: function move(x1, y1, x2, y2) {
	      var parentDivPos = this.parentDiv.position();
	
	      var width = Math.abs(x1 - x2);
	      var height = Math.abs(y1 - y2);
	
	      var left = Math.min(x1, x2);
	      var top = Math.min(y1, y2);
	
	      this.div.css('display', 'block').css('width', width).css('height', height).css('top', top + parentDivPos.top).css('left', left + parentDivPos.left);
	
	      this.canvas.width = width;
	      this.canvas.height = height;
	
	      this.context2d.clearRect(0, 0, width, height);
	      this.context2d.beginPath();
	      this.context2d.moveTo(x1 - left, y1 - top);
	      this.context2d.lineTo(x2 - left, y2 - top);
	      this.context2d.lineWidth = 2;
	      this.context2d.strokeStyle = this.color;
	      this.context2d.stroke();
	    }
	  }]);
	
	  return LineElement;
	}();
	
	/**
	 * CanvasWrapper
	 *   - abstract class to wrap a canvas element
	 *   - instantiates an absolute div that fits the $(selector)
	 *   - attaches a canvas to this div
	 *   - creates methods that redirects mouse commands to that canvas
	 */
	
	var CanvasWrapper = function () {
	  function CanvasWrapper(selector) {
	    var _this = this;
	
	    _classCallCheck(this, CanvasWrapper);
	
	    this.parentDiv = (0, _jquery2.default)(selector);
	
	    this.div = (0, _jquery2.default)('<div>').css('position', 'absolute').css('z-index', 100);
	
	    this.parentDiv.append(this.div);
	
	    this.canvas = (0, _jquery2.default)('<canvas>');
	
	    this.div.append(this.canvas);
	    this.canvasDom = this.canvas[0];
	    this.drawContext = this.canvasDom.getContext('2d');
	
	    this.mousePressed = false;
	    var dom = this.canvasDom;
	    var bind = function bind(ev, fn) {
	      dom.addEventListener(ev, fn);
	    };
	    bind('mousedown', function (e) {
	      return _this.mousedown(e);
	    });
	    bind('mousemove', function (e) {
	      return _this.mousemove(e);
	    });
	    bind('mouseup', function (e) {
	      return _this.mouseup(e);
	    });
	    bind('mouseout', function (e) {
	      return _this.mouseup(e);
	    });
	    bind('touchstart', function (e) {
	      return _this.mousedown(e);
	    });
	    bind('touchmove', function (e) {
	      return _this.mousemove(e);
	    });
	    bind('touchend', function (e) {
	      return _this.mouseup(e);
	    });
	    bind('touchcancel', function (e) {
	      return _this.mouseup(e);
	    });
	  }
	
	  _createClass(CanvasWrapper, [{
	    key: 'width',
	    value: function width() {
	      return this.parentDiv.width();
	    }
	  }, {
	    key: 'height',
	    value: function height() {
	      return this.parentDiv.height();
	    }
	  }, {
	    key: 'x',
	    value: function x() {
	      var parentDivPos = this.parentDiv.position();
	      return parentDivPos.left;
	    }
	  }, {
	    key: 'y',
	    value: function y() {
	      var parentDivPos = this.parentDiv.position();
	      return parentDivPos.top;
	    }
	  }, {
	    key: 'inside',
	    value: function inside(x, y) {
	      return x >= this.x() && x <= this.x() + this.width() && y >= this.y() && y <= this.y() + this.height();
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {}
	  }, {
	    key: 'resize',
	    value: function resize() {
	      this.canvasDom.width = this.width();
	      this.canvasDom.height = this.height();
	    }
	  }, {
	    key: 'strokeRect',
	    value: function strokeRect(x, y, w, h, strokeStyle) {
	      this.drawContext.strokeStyle = strokeStyle;
	      this.drawContext.strokeRect(x, y, w, h);
	    }
	  }, {
	    key: 'fillRect',
	    value: function fillRect(x, y, w, h, fillStyle) {
	      this.drawContext.fillStyle = fillStyle;
	      this.drawContext.fillRect(x, y, w, h);
	    }
	  }, {
	    key: 'line',
	    value: function line(x1, y1, x2, y2, lineWidth, color) {
	      this.drawContext.moveTo(x1, y1);
	      this.drawContext.lineTo(x2, y2);
	      this.drawContext.lineWidth = lineWidth;
	      this.drawContext.strokeStyle = color;
	      this.drawContext.stroke();
	    }
	  }, {
	    key: 'text',
	    value: function text(_text, x, y, font, color, align) {
	      this.drawContext.fillStyle = color;
	      this.drawContext.font = font;
	      this.drawContext.textAlign = align;
	      this.drawContext.textBaseline = 'middle';
	      this.drawContext.fillText(_text, x, y);
	    }
	  }, {
	    key: 'textWidth',
	    value: function textWidth(text, font) {
	      this.drawContext.font = font;
	      this.drawContext.textAlign = 'center';
	      return this.drawContext.measureText(text).width;
	    }
	  }, {
	    key: 'mousedown',
	    value: function mousedown(event) {
	      event.preventDefault();
	
	      this.mousePressed = true;
	
	      this.mousemove(event);
	    }
	  }, {
	    key: 'mousemove',
	    value: function mousemove(event) {}
	  }, {
	    key: 'mouseup',
	    value: function mouseup(event) {
	      event.preventDefault();
	
	      this.mousePressed = false;
	    }
	  }, {
	    key: 'getPointer',
	    value: function getPointer(event) {
	      var x = void 0,
	          y = void 0;
	      if (event.touches) {
	        x = event.touches[0].clientX;
	        y = event.touches[0].clientY;
	      } else {
	        x = event.clientX;
	        y = event.clientY;
	      }
	
	      this.pointerX = x + document.body.scrollLeft + document.documentElement.scrollLeft - this.x();
	
	      this.pointerY = y + document.body.scrollTop + document.documentElement.scrollTop - this.y();
	    }
	  }]);
	
	  return CanvasWrapper;
	}();
	
	/**
	 * PopupText is a little blob of text with a down
	 * arrow that can be displayed in a (x, y) position
	 * within a parent div denoted by selector
	 */
	
	var PopupText = function () {
	  function PopupText(selector) {
	    _classCallCheck(this, PopupText);
	
	    this.div = (0, _jquery2.default)('<div>').css({
	      'position': 'absolute',
	      'top': 0,
	      'left': 0,
	      'background': 'white',
	      'padding': '5',
	      'opacity': 0.7,
	      'display': 'none'
	    });
	
	    this.arrow = (0, _jquery2.default)('<div>').css({
	      'position': 'absolute',
	      'top': 0,
	      'left': 0,
	      'width': 0,
	      'height': 0,
	      'border-left': '5px solid transparent',
	      'border-right': '5px solid transparent',
	      'border-top': '50px solid white',
	      'opacity': 0.7,
	      'display': 'none'
	    });
	
	    this.parentDiv = (0, _jquery2.default)(selector);
	    this.parentDiv.append(this.div);
	    this.parentDiv.append(this.arrow);
	  }
	
	  _createClass(PopupText, [{
	    key: 'move',
	    value: function move(x, y) {
	      var parentDivPos = this.parentDiv.position();
	      var width = this.div.innerWidth();
	      var height = this.div.innerHeight();
	
	      if (x < 0 || x > this.parentDiv.width() || y < 0 || y > this.parentDiv.height()) {
	        this.hide();
	        return;
	      }
	
	      this.div.css({
	        'top': y - height - 50 + parentDivPos.top,
	        'left': x - width / 2 + parentDivPos.left,
	        'display': 'block',
	        'font-family': 'sans-serif',
	        'cursor': 'pointer'
	      });
	
	      this.arrow.css({
	        'top': y - 50 + parentDivPos.top,
	        'left': x - 5 + parentDivPos.left,
	        'display': 'block'
	      });
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      this.div.css('display', 'none');
	      this.arrow.css('display', 'none');
	    }
	  }, {
	    key: 'html',
	    value: function html(text) {
	      this.div.html(text);
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.div.remove();
	      this.arrow.remove();
	    }
	  }]);
	
	  return PopupText;
	}();
	
	/**
	 * A set of pop-up text labels over specified atoms, rendered as
	 * DIV text on the DOM on top of Display but using opacity
	 * of the given z position of the associated atoms
	 */
	
	
	var AtomLabelsWidget = function () {
	  function AtomLabelsWidget(proteinDisplay) {
	    _classCallCheck(this, AtomLabelsWidget);
	
	    this.popups = [];
	    this.soupView = proteinDisplay.soupView;
	    this.controller = proteinDisplay.controller;
	    this.display = proteinDisplay;
	  }
	
	  _createClass(AtomLabelsWidget, [{
	    key: 'removePopup',
	    value: function removePopup(i) {
	      this.popups[i].remove();
	      this.popups.splice(i, 1);
	      this.controller.delete_label(i);
	    }
	  }, {
	    key: 'createPopup',
	    value: function createPopup(i) {
	      var _this2 = this;
	
	      var popup = new PopupText(this.display.divTag);
	      popup.div.click(function () {
	        _this2.removePopup(i);
	      });
	      return popup;
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      var labels = this.soupView.current_view.labels;
	
	      if (labels.length > this.popups.length) {
	        for (var i = this.popups.length; i < labels.length; i += 1) {
	          this.popups.push(this.createPopup(i));
	        }
	      }
	
	      if (this.popups.length > labels.length) {
	        for (var _i = this.popups.length - 1; _i >= labels.length; _i -= 1) {
	          this.removePopup(_i);
	        }
	      }
	
	      for (var _i2 = 0; _i2 < labels.length; _i2 += 1) {
	        var atom = this.soupView.soup.getAtomProxy(labels[_i2].i_atom);
	
	        this.popups[_i2].html(labels[_i2].text);
	
	        var opacity = 0.7 * this.display.opacity(atom.pos) + 0.2;
	        this.popups[_i2].div.css('opacity', opacity);
	        this.popups[_i2].arrow.css('opacity', opacity);
	
	        var v = this.display.posXY(atom.pos);
	        this.popups[_i2].move(v.x, v.y);
	
	        if (!this.display.inZlab(atom.pos)) {
	          this.popups[_i2].div.css('display', 'none');
	          this.popups[_i2].arrow.css('display', 'none');
	        }
	      }
	    }
	  }]);
	
	  return AtomLabelsWidget;
	}();
	
	/**
	 * Collection of inter-atomic distances to be displayed
	 * using a combination of opaque canvas lines and text div
	 * tags
	 */
	
	
	var DistanceMeasuresWidget = function () {
	  function DistanceMeasuresWidget(display) {
	    _classCallCheck(this, DistanceMeasuresWidget);
	
	    this.distanceMeasures = [];
	    this.threeJsScene = display.displayScene;
	    this.soupView = display.soupView;
	    this.controller = display.controller;
	    this.display = display;
	    this.parentDiv = (0, _jquery2.default)(this.display.divTag);
	  }
	
	  _createClass(DistanceMeasuresWidget, [{
	    key: 'removeDistance',
	    value: function removeDistance(i) {
	      this.threeJsScene.remove(this.distanceMeasures[i].line);
	      this.distanceMeasures[i].div.remove();
	      this.controller.delete_dist(i);
	      this.distanceMeasures.splice(i, 1);
	    }
	  }, {
	    key: 'createDistanceMeasure',
	    value: function createDistanceMeasure(i) {
	      var _this3 = this;
	
	      var div = (0, _jquery2.default)('<div>').css({
	        'position': 'absolute',
	        'top': 0,
	        'left': 0,
	        'background-color': '#FFDDDD',
	        'padding': '5',
	        'opacity': 0.7,
	        'font-family': 'sans-serif'
	      });
	      div.click(function () {
	        _this3.removeDistance(i);
	      });
	      this.parentDiv.append(div);
	
	      var geometry = new THREE.Geometry();
	      geometry.vertices.push(new THREE.Vector3(0, 0, 0));
	      geometry.vertices.push(new THREE.Vector3(1, 1, 1));
	      var material = new THREE.LineDashedMaterial({
	        color: 0xFF7777,
	        dashSize: 3,
	        gapSize: 4,
	        linewidth: 2
	      });
	      var line = new THREE.Line(geometry, material);
	      this.threeJsScene.add(line);
	
	      return { line: line, div: div };
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      var distances = this.soupView.current_view.distances;
	
	      if (distances.length > this.distanceMeasures.length) {
	        for (var i = this.distanceMeasures.length; i < distances.length; i += 1) {
	          this.distanceMeasures.push(this.createDistanceMeasure(i));
	        }
	      }
	
	      if (this.distanceMeasures.length > distances.length) {
	        for (var _i3 = this.distanceMeasures.length - 1; _i3 >= distances.length; _i3 -= 1) {
	          this.removeDistance(_i3);
	        }
	      }
	
	      var parentDivPos = this.parentDiv.position();
	
	      for (var _i4 = 0; _i4 < distances.length; _i4 += 1) {
	        var distance = distances[_i4];
	        var distanceMeasure = this.distanceMeasures[_i4];
	
	        var p1 = this.soupView.soup.getAtomProxy(distance.i_atom1).pos.clone();
	        var p2 = this.soupView.soup.getAtomProxy(distance.i_atom2).pos.clone();
	
	        var text = p1.distanceTo(p2).toFixed(1);
	        distanceMeasure.div.text(text);
	
	        var m = p1.clone().add(p2).multiplyScalar(0.5);
	        var opacity = 0.7 * this.display.opacity(m) + 0.3;
	
	        var v = this.display.posXY(m);
	        var x = v.x;
	        var y = v.y;
	
	        if (x < 0 || x > this.parentDiv.width() || y < 0 || y > this.parentDiv.height()) {
	          distanceMeasure.div.hide();
	          continue;
	        }
	
	        var width = distanceMeasure.div.innerHeight();
	        var height = distanceMeasure.div.innerWidth();
	        distanceMeasure.div.css({
	          'top': y - width / 2 + parentDivPos.top,
	          'left': x - height / 2 + parentDivPos.left,
	          'display': 'block',
	          'cursor': 'pointer',
	          'opacity': opacity
	        });
	
	        distanceMeasure.line.geometry.vertices[0].copy(p1);
	        distanceMeasure.line.geometry.vertices[1].copy(p2);
	
	        if (!this.display.inZlab(m)) {
	          distanceMeasure.div.css('display', 'none');
	        }
	      }
	    }
	  }]);
	
	  return DistanceMeasuresWidget;
	}();
	
	/**
	 * SequenceWidget
	 *   - creates a dual band across the top of the selected div
	 *     for glProteinDisplay
	 *   - the first band is a sequence bar widget
	 *   - the second band is a sequence text widget
	 *   - these two are integrated so that they share state
	 */
	
	var SequenceWidget = function (_CanvasWrapper) {
	  _inherits(SequenceWidget, _CanvasWrapper);
	
	  function SequenceWidget(selector, proteinDisplay) {
	    _classCallCheck(this, SequenceWidget);
	
	    var _this4 = _possibleConstructorReturn(this, (SequenceWidget.__proto__ || Object.getPrototypeOf(SequenceWidget)).call(this, selector));
	
	    _this4.display = proteinDisplay;
	    _this4.soupView = proteinDisplay.soupView;
	    _this4.traces = proteinDisplay.traces;
	
	    _this4.iRes = 0;
	
	    _this4.offsetY = 4;
	    _this4.heightBar = 16;
	    _this4.spacingY = 4;
	    _this4.backColor = '#CCC';
	    _this4.selectColor = '#FFF';
	    _this4.highlightColor = '#222';
	
	    _this4.div.attr('id', 'sequence-widget');
	    _this4.div.css({
	      'width': _this4.parentDiv.width(),
	      'height': _this4.height(),
	      'top': _this4.y(),
	      'background-color': '#CCC',
	      'border-bottom': '1px solid #AAA'
	    });
	
	    _this4.charWidth = 14;
	    _this4.charHeight = 16;
	
	    _this4.textXOffset = 0;
	
	    _this4.residues = [];
	    _this4.iRes = null;
	    _this4.iStartChar = null;
	    _this4.iEndChar = null;
	
	    _this4.resize();
	    return _this4;
	  }
	
	  _createClass(SequenceWidget, [{
	    key: 'width',
	    value: function width() {
	      return this.parentDiv.width();
	    }
	  }, {
	    key: 'height',
	    value: function height() {
	      return this.offsetY + this.heightBar + this.spacingY * 6 + this.charHeight;
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {
	      _get(SequenceWidget.prototype.__proto__ || Object.getPrototypeOf(SequenceWidget.prototype), 'resize', this).call(this);
	      this.div.css('width', this.parentDiv.width());
	    }
	  }, {
	    key: 'xToI',
	    value: function xToI(x) {
	      return parseInt((x - this.textXOffset) * this.nResidue / this.textWidth());
	    }
	  }, {
	    key: 'iToX',
	    value: function iToX(iRes) {
	      return parseInt(iRes / this.nResidue * this.textWidth()) + this.textXOffset;
	    }
	  }, {
	    key: 'textWidth',
	    value: function textWidth() {
	      return this.width() - this.textXOffset;
	    }
	  }, {
	    key: 'xToIChar',
	    value: function xToIChar(x) {
	      return parseInt((x - this.textXOffset) * this.nChar / this.textWidth()) + this.iStartChar;
	    }
	  }, {
	    key: 'iCharToX',
	    value: function iCharToX(iRes) {
	      return parseInt((iRes - this.iStartChar) / this.nChar * this.textWidth() + this.textXOffset);
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.residues.length = 0;
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;
	
	      try {
	        for (var _iterator = this.traces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var trace = _step.value;
	          var _iteratorNormalCompletion2 = true;
	          var _didIteratorError2 = false;
	          var _iteratorError2 = undefined;
	
	          try {
	            for (var _iterator2 = _lodash2.default.range(trace.points.length)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	              var i = _step2.value;
	
	              var iRes = trace.indices[i];
	              var residue = trace.getReference(i);
	
	              var entry = {
	                iRes: iRes,
	                ss: residue.ss,
	                resId: residue.resId,
	                iAtom: residue.iAtom
	              };
	
	              var resType = residue.resType;
	              if (resType in data.resToAa) {
	                entry.c = data.resToAa[resType];
	              } else {
	                entry.c = '.';
	              }
	
	              this.residues.push(entry);
	            }
	          } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                _iterator2.return();
	              }
	            } finally {
	              if (_didIteratorError2) {
	                throw _iteratorError2;
	              }
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	
	      this.nResidue = this.residues.length;
	
	      this.iRes = this.nChar / 2;
	      this.iStartChar = 0;
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      if (!util.exists(this.soupView)) {
	        return;
	      }
	
	      if (this.residues.length == 0) {
	        return;
	      }
	
	      this.nChar = Math.ceil(this.width() / this.charWidth);
	
	      this.iEndChar = this.iStartChar + this.nChar;
	      if (this.iEndChar > this.residues.length) {
	        this.iEndChar = this.residues.length;
	      }
	      if (this.iStartChar < 0) {
	        this.iStartChar = 0;
	      }
	
	      // draw background
	      this.fillRect(0, 0, this.width(), this.height(), this.backColor);
	
	      this.fillRect(this.textXOffset, 0, this.textWidth(), this.heightBar + this.spacingY * 2, this.backColor);
	
	      this.fillRect(this.textXOffset, this.offsetY + this.heightBar + this.spacingY * 2, this.textWidth(), this.charHeight + this.spacingY * 2, this.selectColor);
	
	      var x1 = this.iToX(this.iStartChar);
	      var x2 = this.iToX(this.iEndChar);
	
	      this.fillRect(x1, this.offsetY, x2 - x1, this.heightBar + this.spacingY * 2, 1, this.selectColor);
	
	      // draw secondary-structure color bars
	      var ss = this.residues[0].ss;
	      var iStart = 0;
	      var iEnd = 0;
	      while (iEnd < this.nResidue) {
	        iEnd += 1;
	        if (iEnd === this.nResidue || this.residues[iEnd].ss !== ss) {
	          var _x = this.iToX(iStart);
	          var _x2 = this.iToX(iEnd);
	          var color = data.getSsColor(ss).getStyle();
	          this.fillRect(_x, this.offsetY + this.spacingY, _x2 - _x, this.heightBar, color);
	
	          if (iEnd <= this.nResidue - 1) {
	            iStart = iEnd;
	            ss = this.residues[iEnd].ss;
	          }
	        }
	      }
	
	      // draw characters for sequence
	      var y = this.offsetY + this.heightBar + this.spacingY * 3;
	      for (var iChar = this.iStartChar; iChar < this.iEndChar; iChar += 1) {
	        var residue = this.residues[iChar];
	        var _x3 = this.iCharToX(iChar);
	        var colorStyle = data.getSsColor(residue.ss).getStyle();
	        this.fillRect(_x3, y, this.charWidth, this.charHeight, colorStyle);
	        this.text(residue.c, _x3 + this.charWidth / 2, y + this.charHeight / 2, '8pt Monospace', 'black', 'center');
	      }
	
	      var currResId = this.soupView.current_view.res_id;
	      for (var iRes = this.iStartChar; iRes < this.iEndChar; iRes++) {
	        if (this.residues[iRes].resId === currResId) {
	          this.strokeRect(this.iCharToX(iRes), this.offsetY + this.heightBar + this.spacingY * 2, this.charWidth, this.charHeight + this.spacingY * 2, this.highlightColor);
	          break;
	        }
	      }
	    }
	  }, {
	    key: 'getCurrIAtom',
	    value: function getCurrIAtom() {
	      return this.residues[this.iRes].iAtom;
	    }
	  }, {
	    key: 'mousemove',
	    value: function mousemove(event) {
	      if (!this.mousePressed) {
	        return;
	      }
	      this.getPointer(event);
	      if (this.pointerY < this.heightBar + this.spacingY * 2) {
	        this.iRes = this.xToI(this.pointerX);
	
	        // reset sequence window
	        this.iStartChar = Math.max(this.iRes - 0.5 * this.nChar, 0);
	        this.iStartChar = Math.min(this.iStartChar, this.nResidue - this.nChar);
	        this.iStartChar = parseInt(this.iStartChar);
	
	        this.display.setTargetViewFromAtom(this.getCurrIAtom());
	      } else {
	        this.iRes = this.xToIChar(this.pointerX);
	        this.display.setTargetViewFromAtom(this.getCurrIAtom());
	      }
	    }
	  }]);
	
	  return SequenceWidget;
	}(CanvasWrapper);
	
	/**
	 * ZSlabWidget
	 */
	
	var ZSlabWidget = function (_CanvasWrapper2) {
	  _inherits(ZSlabWidget, _CanvasWrapper2);
	
	  function ZSlabWidget(selector, scene) {
	    _classCallCheck(this, ZSlabWidget);
	
	    var _this5 = _possibleConstructorReturn(this, (ZSlabWidget.__proto__ || Object.getPrototypeOf(ZSlabWidget)).call(this, selector));
	
	    _this5.soupView = scene;
	    _this5.maxZLength = 0.0;
	    _this5.yOffset = 60;
	    _this5.div.attr('id', 'zslab');
	
	    _this5.backColor = 'rgba(150, 150, 150, 0.75)';
	    _this5.zBackColor = 'rgba(100, 70, 70, 0.75)';
	    _this5.zFrontColor = 'rgba(150, 90, 90, 0.75)';
	    return _this5;
	  }
	
	  _createClass(ZSlabWidget, [{
	    key: 'resize',
	    value: function resize() {
	      this.div.css({
	        'width': this.width(),
	        'height': this.height(),
	        'top': this.y(),
	        'left': this.x()
	      });
	      _get(ZSlabWidget.prototype.__proto__ || Object.getPrototypeOf(ZSlabWidget.prototype), 'resize', this).call(this);
	    }
	  }, {
	    key: 'width',
	    value: function width() {
	      return 40;
	    }
	  }, {
	    key: 'y',
	    value: function y() {
	      var parentDivPos = this.parentDiv.position();
	      return parentDivPos.top + this.yOffset;
	    }
	  }, {
	    key: 'height',
	    value: function height() {
	      return this.parentDiv.height() - this.yOffset;
	    }
	  }, {
	    key: 'x',
	    value: function x() {
	      var parentDivPos = this.parentDiv.position();
	      return this.parentDiv.width() - this.width() + parentDivPos.left;
	    }
	  }, {
	    key: 'yToZ',
	    value: function yToZ(y) {
	      var fraction = y / this.height();
	      return (0.5 - fraction) * this.maxZLength;
	    }
	  }, {
	    key: 'zToY',
	    value: function zToY(z) {
	      var fraction = z / this.maxZLength;
	      return (0.5 - fraction) * this.height();
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      var protein = this.soupView.soup;
	      var target = this.soupView.current_view.camera;
	      this.maxZLength = 2.0 * protein.maxLength;
	
	      var yBack = this.zToY(target.zBack);
	      var yFront = this.zToY(target.zFront);
	      var yMid = this.zToY(0);
	
	      this.fillRect(0, 0, this.width(), this.height(), this.backColor);
	
	      this.fillRect(0, yBack, this.width(), yMid - yBack, this.zBackColor);
	
	      this.fillRect(0, yMid, this.width(), yFront - yMid, this.zFrontColor);
	
	      var font = '12px sans-serif';
	      var xm = this.width() / 2;
	
	      this.text('zslab', xm, 10, font, this.zFrontColor, 'center');
	      this.text('back', xm, yBack - 7, font, this.zBackColor, 'center');
	      this.text('front', xm, yFront + 7, font, this.zFrontColor, 'center');
	    }
	  }, {
	    key: 'getZ',
	    value: function getZ(event) {
	      this.getPointer(event);
	
	      this.z = this.yToZ(this.pointerY);
	    }
	  }, {
	    key: 'mousedown',
	    value: function mousedown(event) {
	      this.getZ(event);
	
	      if (this.z > 0) {
	        this.back = true;
	        this.front = false;
	      } else {
	        this.front = true;
	        this.back = false;
	      }
	
	      _get(ZSlabWidget.prototype.__proto__ || Object.getPrototypeOf(ZSlabWidget.prototype), 'mousedown', this).call(this, event);
	    }
	  }, {
	    key: 'mousemove',
	    value: function mousemove(event) {
	      event.preventDefault();
	
	      if (!this.mousePressed) {
	        return;
	      }
	
	      this.getZ(event);
	
	      var target = this.soupView.current_view.camera;
	
	      if (this.back) {
	        target.zBack = Math.max(2, this.z);
	      } else if (this.front) {
	        target.zFront = Math.min(-2, this.z);
	      }
	
	      this.soupView.changed = true;
	    }
	  }]);
	
	  return ZSlabWidget;
	}(CanvasWrapper);
	
	/**
	 * GridControlWidget
	 */
	
	var GridControlWidget = function (_CanvasWrapper3) {
	  _inherits(GridControlWidget, _CanvasWrapper3);
	
	  function GridControlWidget(selector, scene, isGrid) {
	    _classCallCheck(this, GridControlWidget);
	
	    var _this6 = _possibleConstructorReturn(this, (GridControlWidget.__proto__ || Object.getPrototypeOf(GridControlWidget)).call(this, selector));
	
	    _this6.isGrid = isGrid;
	    _this6.soupView = scene;
	    _this6.buttonHeight = 40;
	    _this6.sliderHeight = _this6.buttonHeight * 6 - 50;
	    _this6.div.attr('id', 'grid-control');
	    if (!_this6.isGrid) {
	      _this6.div.css('display', 'none');
	    }
	    _this6.div.css('height', _this6.height());
	    _this6.backgroundColor = '#AAA';
	    _this6.buttonsDiv = (0, _jquery2.default)('<div id="grid-control-buttons">');
	    _this6.div.append(_this6.buttonsDiv);
	    _this6.reset();
	    return _this6;
	  }
	
	  _createClass(GridControlWidget, [{
	    key: 'reset',
	    value: function reset() {
	      if (!this.isGrid) {
	        return;
	      }
	
	      this.buttonsDiv.empty();
	
	      var y = 10;
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;
	
	      try {
	        for (var _iterator3 = _lodash2.default.keys(this.soupView.soup.grid.isElem)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var elem = _step3.value;
	
	          this.buttonsDiv.append(this.makeElemButton(elem, y));
	          y += this.buttonHeight;
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	
	      if (_lodash2.default.keys(this.soupView.soup.grid.isElem).length === 0) {
	        this.div.hide();
	      } else {
	        this.div.show();
	      }
	    }
	  }, {
	    key: 'makeElemButton',
	    value: function makeElemButton(elem, y) {
	      var _this7 = this;
	
	      var color = data.ElementColors[elem];
	      var colorHexStr = color.getHexString();
	      var text_button = util.toggleButton('toggle_text', elem, 'jolecule-button', function () {
	        return _this7.soupView.soup.grid.isElem[elem];
	      }, function (b) {
	        _this7.soupView.soup.grid.isElem[elem] = b;
	        _this7.soupView.soup.grid.changed = true;
	        _this7.soupView.changed = true;
	      }, colorHexStr);
	      text_button.css('position', 'absolute');
	      text_button.css('top', y + 'px');
	      text_button.css('left', '40px');
	      text_button.css('width', '20px');
	      return text_button;
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {
	      if (!this.isGrid) {
	        return;
	      }
	      this.div.css({
	        'width': this.width(),
	        'height': this.height(),
	        'top': this.y(),
	        'left': this.x()
	      });
	      this.canvasDom.width = this.width();
	      this.canvasDom.height = this.height();
	    }
	  }, {
	    key: 'width',
	    value: function width() {
	      return 84;
	    }
	  }, {
	    key: 'height',
	    value: function height() {
	      return this.buttonHeight * 6 + 10;
	    }
	  }, {
	    key: 'x',
	    value: function x() {
	      var parentDivPos = this.parentDiv.position();
	      return parentDivPos.left;
	    }
	  }, {
	    key: 'y',
	    value: function y() {
	      var parentDivPos = this.parentDiv.position();
	      return parentDivPos.top + 60;
	    }
	  }, {
	    key: 'yToZ',
	    value: function yToZ(y) {
	      var fraction = (y - 20) / this.sliderHeight;
	      var grid = this.soupView.soup.grid;
	      var diff = grid.bMax - grid.bMin;
	      var z = fraction * diff + grid.bMin;
	      if (z < this.soupView.soup.grid.bMin) {
	        z = this.soupView.soup.grid.bMin;
	      }
	      if (z > this.soupView.soup.grid.bMax) {
	        z = this.soupView.soup.grid.bMax;
	      }
	      return z;
	    }
	  }, {
	    key: 'zToY',
	    value: function zToY(z) {
	      var grid = this.soupView.soup.grid;
	      var diff = grid.bMax - grid.bMin;
	      return (z - grid.bMin) / diff * this.sliderHeight + 20;
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      if (!this.isGrid) {
	        return;
	      }
	
	      this.fillRect(0, 0, this.width(), this.height(), this.backgroundColor);
	
	      var xm = 20;
	
	      var dark = 'rgb(100, 100, 100)';
	      var yTop = this.zToY(this.soupView.soup.grid.bMin);
	      var yBottom = this.zToY(this.soupView.soup.grid.bMax);
	      this.line(xm, yTop, xm, yBottom, 1, dark);
	      this.line(5, yTop, 35, yTop, 1, dark);
	
	      var font = '12px sans-serif';
	      var textColor = '#666';
	      var y = this.zToY(this.soupView.soup.grid.bCutoff);
	      this.fillRect(5, y, 30, 5, textColor);
	      this.text(-this.soupView.soup.grid.bCutoff.toFixed(2), xm, y + 15, font, textColor, 'center');
	    }
	  }, {
	    key: 'getZ',
	    value: function getZ(event) {
	      this.getPointer(event);
	
	      this.z = this.yToZ(this.pointerY);
	    }
	  }, {
	    key: 'mousedown',
	    value: function mousedown(event) {
	      event.preventDefault();
	
	      this.getZ(event);
	
	      this.mousePressed = true;
	
	      this.mousemove(event);
	    }
	  }, {
	    key: 'mousemove',
	    value: function mousemove(event) {
	      event.preventDefault();
	
	      if (!this.mousePressed) {
	        return;
	      }
	
	      this.getZ(event);
	
	      this.soupView.soup.grid.bCutoff = this.z;
	      this.soupView.soup.grid.changed = true;
	      this.draw();
	
	      this.soupView.changed = true;
	    }
	  }, {
	    key: 'mouseup',
	    value: function mouseup(event) {
	      event.preventDefault();
	
	      this.mousePressed = false;
	    }
	  }]);
	
	  return GridControlWidget;
	}(CanvasWrapper);
	
	exports.default = {
	  LineElement: LineElement,
	  PopupText: PopupText,
	  AtomLabelsWidget: AtomLabelsWidget,
	  DistanceMeasuresWidget: DistanceMeasuresWidget,
	  SequenceWidget: SequenceWidget,
	  ZSlabWidget: ZSlabWidget,
	  GridControlWidget: GridControlWidget
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ElementColors = exports.darkRed = exports.darkGrey = exports.darkPurple = exports.darkYellow = exports.darkBlue = exports.darkGreen = exports.red = exports.grey = exports.purple = exports.yellow = exports.blue = exports.green = exports.fatCoilFace = exports.getSsFace = exports.backboneAtomTypes = exports.getDarkSsColor = exports.resToAa = exports.getSsColor = exports.getIndexColor = undefined;
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
	entral place to store constants and color
	accesors
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _three = __webpack_require__(8);
	
	var THREE = _interopRequireWildcard(_three);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var proteinResTypes = ['ALA', 'CYS', 'ASP', 'GLU', 'PHE', 'GLY', 'HIS', 'ILE', 'LYS', 'LEU', 'MET', 'ASN', 'PRO', 'GLN', 'ARG', 'SER', 'THR', 'TRP', 'VAL', 'TYR'];
	var dnaResTypes = ['DA', 'DT', 'DG', 'DC', 'A', 'T', 'G', 'C'];
	var rnaResTypes = ['RA', 'RU', 'RC', 'RG', 'A', 'G', 'C', 'U'];
	
	// Color constants
	
	var green = new THREE.Color(0x639941);
	var blue = new THREE.Color(0x568AB5);
	var yellow = new THREE.Color(0xFFC900);
	var purple = new THREE.Color(0x9578AA);
	var grey = new THREE.Color(0xBBBBBB);
	var red = new THREE.Color(0x993333);
	
	var darkGreen = new THREE.Color(0x2E471E);
	var darkBlue = new THREE.Color(0x406786);
	var darkYellow = new THREE.Color(0xC39900);
	var darkPurple = new THREE.Color(0x5E4C6B);
	var darkGrey = new THREE.Color(0x555555);
	var darkRed = new THREE.Color(0x662222);
	
	var ElementColors = {
	  'H': 0xCCCCCC,
	  'C': 0xAAAAAA,
	  'O': 0xCC0000,
	  'N': 0x0000CC,
	  'S': 0xAAAA00,
	  'P': 0x6622CC,
	  'F': 0x00CC00,
	  'CL': 0x00CC00,
	  'BR': 0x882200,
	  'I': 0x6600AA,
	  'FE': 0xCC6600,
	  'CA': 0x8888AA,
	  'He': 0x7B86C2,
	  'Ne': 0x9ED2E4,
	  'Ar': 0x5DC4BE,
	  'Kr': 0xACD376,
	  'Xe': 0xF79F7C,
	  'Rn': 0xE29EC5
	};
	
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;
	
	try {
	  for (var _iterator = _lodash2.default.toPairs(ElementColors)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	    var _step$value = _slicedToArray(_step.value, 2),
	        k = _step$value[0],
	        v = _step$value[1];
	
	    ElementColors[k] = new THREE.Color(v);
	  }
	} catch (err) {
	  _didIteratorError = true;
	  _iteratorError = err;
	} finally {
	  try {
	    if (!_iteratorNormalCompletion && _iterator.return) {
	      _iterator.return();
	    }
	  } finally {
	    if (_didIteratorError) {
	      throw _iteratorError;
	    }
	  }
	}
	
	function getIndexColor(i) {
	  return new THREE.Color().setHex(i);
	}
	
	function getSsColor(ss) {
	  if (ss === 'E') {
	    return yellow;
	  } else if (ss === 'H') {
	    return blue;
	  } else if (ss === 'D') {
	    return purple;
	  } else if (ss === 'C') {
	    return green;
	  } else if (ss === 'W') {
	    return red;
	  }
	  return grey;
	}
	
	function getDarkSsColor(ss) {
	  if (ss === 'E') {
	    return darkYellow;
	  } else if (ss === 'H') {
	    return darkBlue;
	  } else if (ss === 'D') {
	    return darkPurple;
	  } else if (ss === 'C') {
	    return darkGreen;
	  } else if (ss === 'W') {
	    return darkRed;
	  }
	  return darkGrey;
	}
	
	var resToAa = {
	  'ALA': 'A',
	  'CYS': 'C',
	  'ASP': 'D',
	  'GLU': 'E',
	  'PHE': 'F',
	  'GLY': 'G',
	  'HIS': 'H',
	  'ILE': 'I',
	  'LYS': 'K',
	  'LEU': 'L',
	  'MET': 'M',
	  'ASN': 'N',
	  'PRO': 'P',
	  'GLN': 'Q',
	  'ARG': 'R',
	  'SER': 'S',
	  'THR': 'T',
	  'VAL': 'V',
	  'TRP': 'W',
	  'TYR': 'Y',
	  'DA': 'A',
	  'DT': 'T',
	  'DG': 'G',
	  'DC': 'C',
	  'A': 'A',
	  'T': 'T',
	  'G': 'G',
	  'C': 'C',
	  'RA': 'A',
	  'RU': 'U',
	  'RC': 'C',
	  'RG': 'G',
	  'U': 'U'
	
	};
	
	// Backbone atom names
	
	var backboneAtomTypes = ['N', 'C', 'O', 'H', 'HA', 'CA', 'OXT', 'C3\'', 'P', 'OP1', 'O5\'', 'OP2', 'C5\'', 'O5\'', 'O3\'', 'C4\'', 'O4\'', 'C1\'', 'C2\'', 'O2\'', 'H2\'', 'H2\'\'', 'H3\'', 'H4\'', 'H5\'', 'H5\'\'', 'HO3\''];
	
	// Cartoon cross-sections
	var ribbonFace = new THREE.Shape([new THREE.Vector2(-1.5, -0.2), new THREE.Vector2(-1.5, +0.2), new THREE.Vector2(+1.5, +0.2), new THREE.Vector2(+1.5, -0.2)]);
	var coilFace = new THREE.Shape([new THREE.Vector2(-0.2, -0.2), new THREE.Vector2(-0.2, +0.2), new THREE.Vector2(+0.2, +0.2), new THREE.Vector2(+0.2, -0.2)]);
	
	// Tube cross-sections
	var fatCoilFace = new THREE.Shape([new THREE.Vector2(-0.25, -0.25), new THREE.Vector2(-0.25, +0.25), new THREE.Vector2(+0.25, +0.25), new THREE.Vector2(+0.25, -0.25)]);
	
	function getSsFace(ss) {
	  if (ss === 'C' || ss === '-') {
	    return coilFace;
	  }
	  return ribbonFace;
	}
	
	exports.getIndexColor = getIndexColor;
	exports.getSsColor = getSsColor;
	exports.resToAa = resToAa;
	exports.getDarkSsColor = getDarkSsColor;
	exports.backboneAtomTypes = backboneAtomTypes;
	exports.getSsFace = getSsFace;
	exports.fatCoilFace = fatCoilFace;
	exports.green = green;
	exports.blue = blue;
	exports.yellow = yellow;
	exports.purple = purple;
	exports.grey = grey;
	exports.red = red;
	exports.darkGreen = darkGreen;
	exports.darkBlue = darkBlue;
	exports.darkYellow = darkYellow;
	exports.darkPurple = darkPurple;
	exports.darkGrey = darkGrey;
	exports.darkRed = darkRed;
	exports.ElementColors = ElementColors;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.FullPageJolecule = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _jquery = __webpack_require__(3);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _jquery3 = __webpack_require__(18);
	
	var _jquery4 = _interopRequireDefault(_jquery3);
	
	var _lodash = __webpack_require__(4);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _embedjolecule = __webpack_require__(2);
	
	var _util = __webpack_require__(9);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * ViewPieceList keeps track of the views
	 */
	
	var ViewPieceList = function () {
	  function ViewPieceList(divTag, controller, proteinDisplay, data_server, isEditable) {
	    var _this = this;
	
	    _classCallCheck(this, ViewPieceList);
	
	    this.divTag = divTag;
	    this.display = proteinDisplay;
	    this.soupView = controller.soupView;
	    this.controller = controller;
	    this.isEditable = isEditable;
	    this.data_server = data_server;
	    this.viewPiece = {};
	    this.topDiv = (0, _jquery2.default)(this.divTag).append((0, _jquery2.default)('<div>').addClass('jolecule-sub-header').append('VIEWS OF PROTEIN').append('<br>').append('<br>').append((0, _util.linkButton)('', '+[v]iew', 'jolecule-button', function () {
	      _this.makeNewView();
	    })).append((0, _util.linkButton)('', 'prev[&uarr;]', 'jolecule-button', function () {
	      _this.gotoPrevView();
	    })).append((0, _util.linkButton)('', 'next[&darr;]', 'jolecule-button', function () {
	      _this.gotoNextView();
	    })).append((0, _util.linkButton)('', '+l[a]bel', 'jolecule-button', function () {
	      _this.display.atomLabelDialog();
	    })).append('<br>')).append((0, _jquery2.default)('<div>').attr('id', 'jolecule-views'));
	  }
	
	  _createClass(ViewPieceList, [{
	    key: 'saveViewsToDataServer',
	    value: function saveViewsToDataServer(success) {
	      console.log('ViewPieceList.saveViewsToDataServer');
	      this.data_server.save_views(this.controller.get_view_dicts(), success);
	    }
	  }, {
	    key: 'updateViews',
	    value: function updateViews() {
	      for (var id in this.viewPiece) {
	        if (!(id in this.soupView.saved_views_by_id)) {
	          this.viewPiece[id].div.remove();
	          delete this.viewPiece[id];
	        }
	      }
	      for (var i = 0; i < this.soupView.saved_views.length; i++) {
	        var view = this.soupView.saved_views[i];
	        var _id = view.id;
	
	        if (!(view.id in this.viewPiece)) {
	          this.insertNewViewDiv(view.id);
	        }
	
	        var i_last_view = this.soupView.i_last_view;
	        var last_id = this.soupView.saved_views[i_last_view].id;
	
	        if (last_id === _id) {
	          this.viewPiece[_id].div.removeClass('jolecule-unselected-box');
	          this.viewPiece[_id].div.addClass('jolecule-selected-box');
	        } else {
	          this.viewPiece[_id].div.removeClass('jolecule-selected-box');
	          this.viewPiece[_id].div.addClass('jolecule-unselected-box');
	        }
	
	        var viewPiece = this.viewPiece[_id];
	        if (view.text !== viewPiece.showTextDiv.html()) {
	          viewPiece.showTextDiv.html(view.text);
	        }
	
	        var a = viewPiece.div.find('a').eq(0);
	        a.text(view.order + 1);
	      }
	    }
	  }, {
	    key: 'redrawSelectedViewId',
	    value: function redrawSelectedViewId(id) {
	      this.updateViews();
	      (0, _jquery2.default)('#jolecule-views').stop().scrollTo(this.viewPiece[id].div, 1000, { offset: { top: -80 } });
	    }
	  }, {
	    key: 'setTargetByViewId',
	    value: function setTargetByViewId(id) {
	      this.controller.set_target_view_by_id(id);
	      this.redrawSelectedViewId(id);
	      window.location.hash = id;
	    }
	  }, {
	    key: 'gotoPrevView',
	    value: function gotoPrevView() {
	      var id = this.controller.set_target_prev_view();
	      this.redrawSelectedViewId(id);
	      window.location.hash = id;
	    }
	  }, {
	    key: 'gotoNextView',
	    value: function gotoNextView() {
	      var id = this.controller.set_target_next_view();
	      this.redrawSelectedViewId(id);
	      window.location.hash = id;
	    }
	  }, {
	    key: 'removeView',
	    value: function removeView(id) {
	      var _this2 = this;
	
	      console.log('ViewPieceList.removeView');
	      this.viewPiece[id].div.css('background-color', 'lightgray');
	      this.data_server.delete_protein_view(id, function () {
	        _this2.controller.delete_view(id);
	        _this2.viewPiece[id].div.remove();
	        delete _this2.viewPiece[id];
	        _this2.updateViews();
	      });
	    }
	  }, {
	    key: 'swapViews',
	    value: function swapViews(i, j) {
	      var _this3 = this;
	
	      var i_id = this.soupView.saved_views[i].id;
	      var j_id = this.soupView.saved_views[j].id;
	      var i_div = this.viewPiece[i_id].div;
	      var j_div = this.viewPiece[j_id].div;
	
	      this.controller.swapViews(i, j);
	
	      i_div.css('background-color', 'lightgray');
	      j_div.css('background-color', 'lightgray');
	
	      this.saveViewsToDataServer(function () {
	        j_div.insertBefore(i_div);
	        _this3.updateViews();
	        i_div.css('background-color', '');
	        j_div.css('background-color', '');
	      });
	    }
	  }, {
	    key: 'swapUp',
	    value: function swapUp(view_id) {
	      var i = this.soupView.get_i_saved_view_from_id(view_id);
	      if (i < 2) {
	        return;
	      }
	      this.swapViews(i - 1, i);
	    }
	  }, {
	    key: 'swapDown',
	    value: function swapDown(view_id) {
	      var i = this.soupView.get_i_saved_view_from_id(view_id);
	      if (i > this.soupView.saved_views.length - 2) {
	        return;
	      }
	      this.swapViews(i, i + 1);
	    }
	  }, {
	    key: 'makeViewDiv',
	    value: function makeViewDiv(id) {
	      var _this4 = this;
	
	      var view = this.soupView.saved_views_by_id[id];
	      this.viewPiece[id] = new _embedjolecule.ViewPiece({
	        view: view,
	        isEditable: this.isEditable,
	        delete_view: function delete_view() {
	          _this4.removeView(id);
	        },
	        save_change: function save_change(changed_text) {
	          view.text = changed_text;
	          _this4.viewPiece[id].div.css('background-color', 'lightgray');
	          _this4.saveViewsToDataServer(function () {
	            _this4.viewPiece[id].div.css('background-color', '');
	          });
	          _this4.soupView.changed = true;
	        },
	        pick: function pick() {
	          _this4.setTargetByViewId(id);
	        },
	        goto: view.order + 1,
	        swapUp: function swapUp() {
	          _this4.swapUp(id);
	        },
	        swapDown: function swapDown() {
	          _this4.swapDown(id);
	        },
	        embed_view: function embed_view() {
	          window.location.href = '/embed/pdb?pdb_id=' + view.pdb_id + '&view=' + view.id;
	        }
	      });
	      return this.viewPiece[id].div;
	    }
	  }, {
	    key: 'makeAllViews',
	    value: function makeAllViews() {
	      for (var i = 0; i < this.soupView.saved_views.length; i += 1) {
	        var id = this.soupView.saved_views[i].id;
	        var div = this.makeViewDiv(id);
	        (0, _jquery2.default)('#jolecule-views').append(div);
	      }
	    }
	  }, {
	    key: 'insertNewViewDiv',
	    value: function insertNewViewDiv(new_id) {
	      var div = this.makeViewDiv(new_id);
	
	      if (this.soupView.i_last_view === this.soupView.saved_views.length - 1) {
	        (0, _jquery2.default)('#jolecule-views').append(div);
	      } else {
	        var j = this.soupView.i_last_view - 1;
	        var j_id = this.soupView.saved_views[j].id;
	        var j_div = this.viewPiece[j_id].div;
	        div.insertAfter(j_div);
	      }
	    }
	  }, {
	    key: 'makeNewView',
	    value: function makeNewView() {
	      var _this5 = this;
	
	      console.log('ViewPieceList.makeNewView');
	      var newId = (0, _util.randomId)();
	      this.controller.save_current_view(newId);
	      this.insertNewViewDiv(newId);
	      this.updateViews();
	      this.viewPiece[newId].div.css('background-color', 'lightgray');
	      this.saveViewsToDataServer(function () {
	        console.log('ViewPieceList.makeNewView success');
	        _this5.viewPiece[newId].div.css('background-color', '');
	        (0, _jquery2.default)('#jolecule-views').stop();
	        (0, _jquery2.default)('#jolecule-views').scrollTo(_this5.viewPiece[newId].div, 1000, { offset: { top: -80 } });
	      });
	    }
	  }]);
	
	  return ViewPieceList;
	}();
	
	/**
	 * FullPageJolecule - full page wrapper around an embedd EmbedJolecule
	 * widget. Handles keypresses and urls and adds a better views annotation
	 * list tool
	 */
	
	var FullPageJolecule = function () {
	  function FullPageJolecule(proteinDisplayTag, sequenceDisplayTag, viewsDisplayTag, params) {
	    var _this6 = this;
	
	    _classCallCheck(this, FullPageJolecule);
	
	    this.viewsDisplayTag = viewsDisplayTag;
	    this.sequenceDisplayTag = sequenceDisplayTag;
	
	    this.params = {
	      divTag: proteinDisplayTag,
	      viewId: '',
	      viewHeight: 170,
	      isViewTextShown: false,
	      isEditable: true,
	      isLoop: false,
	      isGrid: true,
	      backgroundColor: 0xCCCCCC
	    };
	
	    console.log('FullPageJolecule.constructor params', params);
	
	    if ((0, _util.exists)(params)) {
	      this.params = _lodash2.default.assign(this.params, params);
	    }
	
	    this.embedJolecule = new _embedjolecule.EmbedJolecule(this.params);
	
	    document.oncontextmenu = _lodash2.default.noop;
	    document.onkeydown = function (e) {
	      return _this6.onkeydown(e);
	    };
	    var resize_fn = function resize_fn() {
	      _this6.resize();
	    };
	    (0, _jquery2.default)(window).resize(resize_fn);
	    window.onorientationchange = resize_fn;
	
	    this.noData = true;
	  }
	
	  _createClass(FullPageJolecule, [{
	    key: 'addDataServer',
	    value: function addDataServer(dataServer) {
	      var _this7 = this;
	
	      this.embedJolecule.addDataServer(dataServer, function () {
	        if (_this7.noData) {
	          _this7.noData = false;
	
	          _this7.soupView = _this7.embedJolecule.soupView;
	          _this7.controller = _this7.embedJolecule.controller;
	          _this7.display = _this7.embedJolecule.display;
	
	          _this7.viewsDisplay = new ViewPieceList(_this7.viewsDisplayTag, _this7.controller, _this7.display, dataServer, _this7.params.isEditable);
	
	          _this7.viewsDisplay.makeAllViews();
	          var hashTag = (0, _util.getWindowUrl)().split('#')[1];
	          if (hashTag in _this7.soupView.saved_views_by_id) {
	            _this7.viewsDisplay.setTargetByViewId(hashTag);
	          } else {
	            _this7.viewsDisplay.setTargetByViewId('view:000000');
	          }
	          _this7.viewsDisplay.updateViews();
	        }
	
	        _this7.resize();
	      });
	    }
	  }, {
	    key: 'isChanged',
	    value: function isChanged() {
	      if (typeof this.soupView !== 'undefined') {
	        return this.soupView.changed;
	      }
	      return false;
	    }
	  }, {
	    key: 'draw',
	    value: function draw() {
	      if (this.soupView.changed) {
	        this.viewsDisplay.updateViews();
	        this.embedJolecule.draw();
	        this.soupView.changed = false;
	      }
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      if (typeof this.embedJolecule !== 'undefined') {
	        this.embedJolecule.animate();
	      }
	    }
	  }, {
	    key: 'resize',
	    value: function resize(event) {
	      if (typeof this.soupView !== 'undefined') {
	        this.soupView.changed = true;
	      }
	      if (typeof this.embedJolecule !== 'undefined') {
	        this.embedJolecule.resize();
	      }
	    }
	  }, {
	    key: 'gotoPrevResidue',
	    value: function gotoPrevResidue() {
	      this.controller.set_target_prev_residue();
	      window.location.hash = this.soupView.target_view.res_id;
	    }
	  }, {
	    key: 'gotoNextResidue',
	    value: function gotoNextResidue() {
	      this.controller.set_target_next_residue();
	      window.location.hash = this.soupView.target_view.res_id;
	    }
	  }, {
	    key: 'onkeydown',
	    value: function onkeydown(event) {
	      if (!window.keyboard_lock) {
	        var c = String.fromCharCode(event.keyCode).toUpperCase();
	        var s = '[' + c + ']';
	        if (c === 'V') {
	          this.viewsDisplay.makeNewView();
	          return;
	        } else if (c === 'K' || event.keyCode === 37) {
	          this.gotoPrevResidue();
	        } else if (c === 'J' || event.keyCode === 39) {
	          this.gotoNextResidue();
	        } else if (event.keyCode === 38) {
	          this.viewsDisplay.gotoPrevView();
	        } else if (c === ' ' || event.keyCode === 40) {
	          this.viewsDisplay.gotoNextView();
	        } else if (c === 'B') {
	          if (this.soupView.current_view.show.all_atom) {
	            this.controller.set_backbone_option('ribbon');
	          } else if (this.soupView.current_view.show.ribbon) {
	            this.controller.set_backbone_option('trace');
	          } else if (this.soupView.current_view.show.trace) {
	            this.controller.set_backbone_option('all_atom');
	          }
	        } else if (c === 'L') {
	          this.controller.toggle_show_option('ligands');
	        } else if (c === 'S') {
	          this.controller.toggle_show_option('sidechain');
	        } else if (c === 'W') {
	          this.controller.toggle_show_option('water');
	        } else if (c === 'C') {
	          this.display.controller.clearSelectedResidues();
	        } else if (c === 'E') {
	          var i_view = this.display.soupView.i_last_view;
	          if (i_view > 0) {
	            var view_id = this.display.soupView.saved_views[i_view].id;
	            this.viewsDisplay.div[view_id].edit_fn();
	          }
	        } else if (c === 'N') {
	          this.display.controller.toggle_neighbors();
	        } else if (c === 'A') {
	          this.display.atomLabelDialog();
	        } else {
	          var i = parseInt(c) - 1;
	          if ((i || i === 0) && i < this.soupView.saved_views.length) {
	            var id = this.soupView.saved_views[i].id;
	            this.viewsDisplay.setTargetByViewId(id);
	          }
	        }
	        this.display.soupView.changed = true;
	      }
	    }
	  }]);
	
	  return FullPageJolecule;
	}();
	
	exports.FullPageJolecule = FullPageJolecule;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery.scrollTo
	 * Copyright (c) 2007-2015 Ariel Flesler - aflesler<a>gmail<d>com | http://flesler.blogspot.com
	 * Licensed under MIT
	 * http://flesler.blogspot.com/2007/10/jqueryscrollto.html
	 * @projectDescription Lightweight, cross-browser and highly customizable animated scrolling with jQuery
	 * @author Ariel Flesler
	 * @version 2.1.2
	 */
	;(function(factory) {
		'use strict';
		if (true) {
			// AMD
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			// CommonJS
			module.exports = factory(require('jquery'));
		} else {
			// Global
			factory(jQuery);
		}
	})(function($) {
		'use strict';
	
		var $scrollTo = $.scrollTo = function(target, duration, settings) {
			return $(window).scrollTo(target, duration, settings);
		};
	
		$scrollTo.defaults = {
			axis:'xy',
			duration: 0,
			limit:true
		};
	
		function isWin(elem) {
			return !elem.nodeName ||
				$.inArray(elem.nodeName.toLowerCase(), ['iframe','#document','html','body']) !== -1;
		}		
	
		$.fn.scrollTo = function(target, duration, settings) {
			if (typeof duration === 'object') {
				settings = duration;
				duration = 0;
			}
			if (typeof settings === 'function') {
				settings = { onAfter:settings };
			}
			if (target === 'max') {
				target = 9e9;
			}
	
			settings = $.extend({}, $scrollTo.defaults, settings);
			// Speed is still recognized for backwards compatibility
			duration = duration || settings.duration;
			// Make sure the settings are given right
			var queue = settings.queue && settings.axis.length > 1;
			if (queue) {
				// Let's keep the overall duration
				duration /= 2;
			}
			settings.offset = both(settings.offset);
			settings.over = both(settings.over);
	
			return this.each(function() {
				// Null target yields nothing, just like jQuery does
				if (target === null) return;
	
				var win = isWin(this),
					elem = win ? this.contentWindow || window : this,
					$elem = $(elem),
					targ = target, 
					attr = {},
					toff;
	
				switch (typeof targ) {
					// A number will pass the regex
					case 'number':
					case 'string':
						if (/^([+-]=?)?\d+(\.\d+)?(px|%)?$/.test(targ)) {
							targ = both(targ);
							// We are done
							break;
						}
						// Relative/Absolute selector
						targ = win ? $(targ) : $(targ, elem);
						/* falls through */
					case 'object':
						if (targ.length === 0) return;
						// DOMElement / jQuery
						if (targ.is || targ.style) {
							// Get the real position of the target
							toff = (targ = $(targ)).offset();
						}
				}
	
				var offset = $.isFunction(settings.offset) && settings.offset(elem, targ) || settings.offset;
	
				$.each(settings.axis.split(''), function(i, axis) {
					var Pos	= axis === 'x' ? 'Left' : 'Top',
						pos = Pos.toLowerCase(),
						key = 'scroll' + Pos,
						prev = $elem[key](),
						max = $scrollTo.max(elem, axis);
	
					if (toff) {// jQuery / DOMElement
						attr[key] = toff[pos] + (win ? 0 : prev - $elem.offset()[pos]);
	
						// If it's a dom element, reduce the margin
						if (settings.margin) {
							attr[key] -= parseInt(targ.css('margin'+Pos), 10) || 0;
							attr[key] -= parseInt(targ.css('border'+Pos+'Width'), 10) || 0;
						}
	
						attr[key] += offset[pos] || 0;
	
						if (settings.over[pos]) {
							// Scroll to a fraction of its width/height
							attr[key] += targ[axis === 'x'?'width':'height']() * settings.over[pos];
						}
					} else {
						var val = targ[pos];
						// Handle percentage values
						attr[key] = val.slice && val.slice(-1) === '%' ?
							parseFloat(val) / 100 * max
							: val;
					}
	
					// Number or 'number'
					if (settings.limit && /^\d+$/.test(attr[key])) {
						// Check the limits
						attr[key] = attr[key] <= 0 ? 0 : Math.min(attr[key], max);
					}
	
					// Don't waste time animating, if there's no need.
					if (!i && settings.axis.length > 1) {
						if (prev === attr[key]) {
							// No animation needed
							attr = {};
						} else if (queue) {
							// Intermediate animation
							animate(settings.onAfterFirst);
							// Don't animate this axis again in the next iteration.
							attr = {};
						}
					}
				});
	
				animate(settings.onAfter);
	
				function animate(callback) {
					var opts = $.extend({}, settings, {
						// The queue setting conflicts with animate()
						// Force it to always be true
						queue: true,
						duration: duration,
						complete: callback && function() {
							callback.call(elem, targ, settings);
						}
					});
					$elem.animate(attr, opts);
				}
			});
		};
	
		// Max scrolling position, works on quirks mode
		// It only fails (not too badly) on IE, quirks mode.
		$scrollTo.max = function(elem, axis) {
			var Dim = axis === 'x' ? 'Width' : 'Height',
				scroll = 'scroll'+Dim;
	
			if (!isWin(elem))
				return elem[scroll] - $(elem)[Dim.toLowerCase()]();
	
			var size = 'client' + Dim,
				doc = elem.ownerDocument || elem.document,
				html = doc.documentElement,
				body = doc.body;
	
			return Math.max(html[scroll], body[scroll]) - Math.min(html[size], body[size]);
		};
	
		function both(val) {
			return $.isFunction(val) || $.isPlainObject(val) ? val : { top:val, left:val };
		}
	
		// Add special hooks so that window scroll properties can be animated
		$.Tween.propHooks.scrollLeft = 
		$.Tween.propHooks.scrollTop = {
			get: function(t) {
				return $(t.elem)[t.prop]();
			},
			set: function(t) {
				var curr = this.get(t);
				// If interrupt is true and user scrolled, stop animating
				if (t.options.interrupt && t._last && t._last !== curr) {
					return $(t.elem).stop();
				}
				var next = Math.round(t.now);
				// Don't waste CPU
				// Browsers don't render floating point scroll
				if (curr !== next) {
					$(t.elem)[t.prop](next);
					t._last = this.get(t);
				}
			}
		};
	
		// AMD requirement
		return $scrollTo;
	});


/***/ }
/******/ ])
});
;
//# sourceMappingURL=jolecule.js.map